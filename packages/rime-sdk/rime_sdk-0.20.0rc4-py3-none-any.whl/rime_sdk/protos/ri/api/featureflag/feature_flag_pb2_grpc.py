# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rime_sdk.protos.ri.api.featureflag import feature_flag_pb2 as ri_dot_api_dot_featureflag_dot_feature__flag__pb2


class FeatureFlagStub(object):
    """Service for managing feature flags.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpsertFeatureFlag = channel.unary_unary(
                '/rime.FeatureFlag/UpsertFeatureFlag',
                request_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.UpsertFeatureFlagsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.UpsertFeatureFlagsResponse.FromString,
                )
        self.GetFeatureFlag = channel.unary_unary(
                '/rime.FeatureFlag/GetFeatureFlag',
                request_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagsResponse.FromString,
                )
        self.GetLimitStatus = channel.unary_unary(
                '/rime.FeatureFlag/GetLimitStatus',
                request_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetLimitStatusRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetLimitStatusResponse.FromString,
                )
        self.GetEnabledFeature = channel.unary_unary(
                '/rime.FeatureFlag/GetEnabledFeature',
                request_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetEnabledFeatureRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetEnabledFeatureResponse.FromString,
                )
        self.ListEnabledFeatures = channel.unary_unary(
                '/rime.FeatureFlag/ListEnabledFeatures',
                request_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.ListEnabledFeatureRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.ListEnabledFeatureResponse.FromString,
                )
        self.GetFeatureFlagJwt = channel.unary_unary(
                '/rime.FeatureFlag/GetFeatureFlagJwt',
                request_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagJwtRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagJwtResponse.FromString,
                )


class FeatureFlagServicer(object):
    """Service for managing feature flags.
    """

    def UpsertFeatureFlag(self, request, context):
        """UpsertFeatureFlag update a feature jwt token with customer name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeatureFlag(self, request, context):
        """GetFeatureFlag

        Returns feature message with customer name
        This endpoint is deprecated,
        use `ListEnabledFeatures` or `GetLimitStatusRequest` instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLimitStatus(self, request, context):
        """GetLimitStatus

        Returns a license limit status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnabledFeature(self, request, context):
        """GetEnabledFeature

        Returns whether a feature is enabled in license for a customer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEnabledFeatures(self, request, context):
        """ListEnabledFeatures

        Returns all features enabled in license for a customer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeatureFlagJwt(self, request, context):
        """GetFeatureFlagJwt returns the jwt token of the customer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FeatureFlagServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpsertFeatureFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertFeatureFlag,
                    request_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.UpsertFeatureFlagsRequest.FromString,
                    response_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.UpsertFeatureFlagsResponse.SerializeToString,
            ),
            'GetFeatureFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatureFlag,
                    request_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagsRequest.FromString,
                    response_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagsResponse.SerializeToString,
            ),
            'GetLimitStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLimitStatus,
                    request_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetLimitStatusRequest.FromString,
                    response_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetLimitStatusResponse.SerializeToString,
            ),
            'GetEnabledFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnabledFeature,
                    request_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetEnabledFeatureRequest.FromString,
                    response_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetEnabledFeatureResponse.SerializeToString,
            ),
            'ListEnabledFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEnabledFeatures,
                    request_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.ListEnabledFeatureRequest.FromString,
                    response_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.ListEnabledFeatureResponse.SerializeToString,
            ),
            'GetFeatureFlagJwt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatureFlagJwt,
                    request_deserializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagJwtRequest.FromString,
                    response_serializer=ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagJwtResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.FeatureFlag', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FeatureFlag(object):
    """Service for managing feature flags.
    """

    @staticmethod
    def UpsertFeatureFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FeatureFlag/UpsertFeatureFlag',
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.UpsertFeatureFlagsRequest.SerializeToString,
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.UpsertFeatureFlagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeatureFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FeatureFlag/GetFeatureFlag',
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagsRequest.SerializeToString,
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLimitStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FeatureFlag/GetLimitStatus',
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetLimitStatusRequest.SerializeToString,
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetLimitStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEnabledFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FeatureFlag/GetEnabledFeature',
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetEnabledFeatureRequest.SerializeToString,
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetEnabledFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEnabledFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FeatureFlag/ListEnabledFeatures',
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.ListEnabledFeatureRequest.SerializeToString,
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.ListEnabledFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeatureFlagJwt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FeatureFlag/GetFeatureFlagJwt',
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagJwtRequest.SerializeToString,
            ri_dot_api_dot_featureflag_dot_feature__flag__pb2.GetFeatureFlagJwtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
