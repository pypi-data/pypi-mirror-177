# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from rime_sdk.protos.ri.api.testrunresults import test_run_results_pb2 as ri_dot_api_dot_testrunresults_dot_test__run__results__pb2


class ResultsReaderStub(object):
    """ResultsReader is a service for querying test run results.
    Note: unfortunately, this includes methods for writing test run state.
    Changing the name of the service is difficult for backwards compatibility
    reasons so we are forced to keep it as ResultsReader.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTestRun = channel.unary_unary(
                '/testrunresult.ResultsReader/GetTestRun',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestRunRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestRunResponse.FromString,
                )
        self.ListTestRuns = channel.unary_unary(
                '/testrunresult.ResultsReader/ListTestRuns',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestRunsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestRunsResponse.FromString,
                )
        self.GetBatchResult = channel.unary_unary(
                '/testrunresult.ResultsReader/GetBatchResult',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetBatchResultRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetBatchResultResponse.FromString,
                )
        self.ListBatchResults = channel.unary_unary(
                '/testrunresult.ResultsReader/ListBatchResults',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListBatchResultsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListBatchResultsResponse.FromString,
                )
        self.GetFeatureResult = channel.unary_unary(
                '/testrunresult.ResultsReader/GetFeatureResult',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetFeatureResultRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetFeatureResultResponse.FromString,
                )
        self.ListFeatureResults = channel.unary_unary(
                '/testrunresult.ResultsReader/ListFeatureResults',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListFeatureResultsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListFeatureResultsResponse.FromString,
                )
        self.ListTestCases = channel.unary_unary(
                '/testrunresult.ResultsReader/ListTestCases',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestCasesRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestCasesResponse.FromString,
                )
        self.ListSummaryTests = channel.unary_unary(
                '/testrunresult.ResultsReader/ListSummaryTests',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListSummaryTestsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListSummaryTestsResponse.FromString,
                )
        self.DeleteTestRun = channel.unary_unary(
                '/testrunresult.ResultsReader/DeleteTestRun',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.DeleteTestRunRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.RenameTestRun = channel.unary_unary(
                '/testrunresult.ResultsReader/RenameTestRun',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.RenameTestRunRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.RenameTestRunResponse.FromString,
                )
        self.GetTestConfig = channel.unary_unary(
                '/testrunresult.ResultsReader/GetTestConfig',
                request_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestConfigRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestConfigResponse.FromString,
                )


class ResultsReaderServicer(object):
    """ResultsReader is a service for querying test run results.
    Note: unfortunately, this includes methods for writing test run state.
    Changing the name of the service is difficult for backwards compatibility
    reasons so we are forced to keep it as ResultsReader.
    """

    def GetTestRun(self, request, context):
        """GetTestRun

        Get the test run result detail with test run id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestRuns(self, request, context):
        """ListTestRuns

        List all test runs belonging to a project.

        [Python pagination example](#tag/JobReader/operation/JobReader_ListJobs)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatchResult(self, request, context):
        """GetBatchResult

        Get batch result with a test run id and a test type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatchResults(self, request, context):
        """ListBatchResults

        Returns a paginated list of batch results from a test run.

        [Python pagination example](#tag/JobReader/operation/JobReader_ListJobs)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeatureResult(self, request, context):
        """GetFeatureResult

        Returns the feature result that matches the specified test run ID 
        and feature ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFeatureResults(self, request, context):
        """ListFeatureResults

        List all feature results from a test run.

        [Python pagination example](#tag/JobReader/operation/JobReader_ListJobs)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestCases(self, request, context):
        """ListTestCases

        Returns a paginated list of the test cases in a test run. Specify a set 
        of test types to filter the list by the specified types.

        [Python pagination example](#tag/JobReader/operation/JobReader_ListJobs)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSummaryTests(self, request, context):
        """ListSummaryTests

        Returns a paginated list of the summary tests of a test run.

        [Python pagination example](#tag/JobReader/operation/JobReader_ListJobs)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTestRun(self, request, context):
        """DeleteTestRun

        Deletes a specified test run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameTestRun(self, request, context):
        """RenameTestRun

        Updates the name of a test run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTestConfig(self, request, context):
        """Returns the test configuration of the specified test run as bytes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultsReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestRun,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestRunRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestRunResponse.SerializeToString,
            ),
            'ListTestRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestRuns,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestRunsRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestRunsResponse.SerializeToString,
            ),
            'GetBatchResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatchResult,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetBatchResultRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetBatchResultResponse.SerializeToString,
            ),
            'ListBatchResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBatchResults,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListBatchResultsRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListBatchResultsResponse.SerializeToString,
            ),
            'GetFeatureResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatureResult,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetFeatureResultRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetFeatureResultResponse.SerializeToString,
            ),
            'ListFeatureResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFeatureResults,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListFeatureResultsRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListFeatureResultsResponse.SerializeToString,
            ),
            'ListTestCases': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestCases,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestCasesRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestCasesResponse.SerializeToString,
            ),
            'ListSummaryTests': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSummaryTests,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListSummaryTestsRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListSummaryTestsResponse.SerializeToString,
            ),
            'DeleteTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTestRun,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.DeleteTestRunRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'RenameTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameTestRun,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.RenameTestRunRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.RenameTestRunResponse.SerializeToString,
            ),
            'GetTestConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestConfig,
                    request_deserializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestConfigRequest.FromString,
                    response_serializer=ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestConfigResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'testrunresult.ResultsReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResultsReader(object):
    """ResultsReader is a service for querying test run results.
    Note: unfortunately, this includes methods for writing test run state.
    Changing the name of the service is difficult for backwards compatibility
    reasons so we are forced to keep it as ResultsReader.
    """

    @staticmethod
    def GetTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetTestRun',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestRunRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListTestRuns',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestRunsRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatchResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetBatchResult',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetBatchResultRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetBatchResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatchResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListBatchResults',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListBatchResultsRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListBatchResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeatureResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetFeatureResult',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetFeatureResultRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetFeatureResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFeatureResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListFeatureResults',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListFeatureResultsRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListFeatureResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListTestCases',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestCasesRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListTestCasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSummaryTests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListSummaryTests',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListSummaryTestsRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.ListSummaryTestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/DeleteTestRun',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.DeleteTestRunRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/RenameTestRun',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.RenameTestRunRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.RenameTestRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTestConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetTestConfig',
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestConfigRequest.SerializeToString,
            ri_dot_api_dot_testrunresults_dot_test__run__results__pb2.GetTestConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
