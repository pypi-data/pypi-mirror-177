# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rime_sdk.protos.ri.api.datacollector import data_collector_pb2 as ri_dot_api_dot_datacollector_dot_data__collector__pb2


class DataCollectorStub(object):
    """
    Service of endpoints for Data Collector (Batch + Stream).

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreDatapoints = channel.unary_unary(
                '/rime.DataCollector/StoreDatapoints',
                request_serializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.StoreDatapointsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.StoreDatapointsResponse.FromString,
                )
        self.GetDatapoints = channel.unary_stream(
                '/rime.DataCollector/GetDatapoints',
                request_serializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.GetDatapointsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.GetDatapointsResponse.FromString,
                )


class DataCollectorServicer(object):
    """
    Service of endpoints for Data Collector (Batch + Stream).

    """

    def StoreDatapoints(self, request, context):
        """StoreDatapoints

        Stores multiple new datapoints.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatapoints(self, request, context):
        """GetDatapoints returns all datapoints from a time period
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataCollectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreDatapoints': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreDatapoints,
                    request_deserializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.StoreDatapointsRequest.FromString,
                    response_serializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.StoreDatapointsResponse.SerializeToString,
            ),
            'GetDatapoints': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDatapoints,
                    request_deserializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.GetDatapointsRequest.FromString,
                    response_serializer=ri_dot_api_dot_datacollector_dot_data__collector__pb2.GetDatapointsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.DataCollector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataCollector(object):
    """
    Service of endpoints for Data Collector (Batch + Stream).

    """

    @staticmethod
    def StoreDatapoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.DataCollector/StoreDatapoints',
            ri_dot_api_dot_datacollector_dot_data__collector__pb2.StoreDatapointsRequest.SerializeToString,
            ri_dot_api_dot_datacollector_dot_data__collector__pb2.StoreDatapointsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDatapoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.DataCollector/GetDatapoints',
            ri_dot_api_dot_datacollector_dot_data__collector__pb2.GetDatapointsRequest.SerializeToString,
            ri_dot_api_dot_datacollector_dot_data__collector__pb2.GetDatapointsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
