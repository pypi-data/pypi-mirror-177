# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import dbt_pb2 as dbt_dot_v1_dot_dbt__pb2


class DBTServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunCommand = channel.unary_stream(
                '/dbt.v1.DBTService/RunCommand',
                request_serializer=dbt_dot_v1_dot_dbt__pb2.RunCommandRequest.SerializeToString,
                response_deserializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
                )
        self.SeedCommand = channel.unary_stream(
                '/dbt.v1.DBTService/SeedCommand',
                request_serializer=dbt_dot_v1_dot_dbt__pb2.SeedCommandRequest.SerializeToString,
                response_deserializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
                )
        self.SnapshotCommand = channel.unary_stream(
                '/dbt.v1.DBTService/SnapshotCommand',
                request_serializer=dbt_dot_v1_dot_dbt__pb2.SnapshotCommandRequest.SerializeToString,
                response_deserializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
                )
        self.TestCommand = channel.unary_stream(
                '/dbt.v1.DBTService/TestCommand',
                request_serializer=dbt_dot_v1_dot_dbt__pb2.TestCommandRequest.SerializeToString,
                response_deserializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
                )
        self.RunOperationCommand = channel.unary_stream(
                '/dbt.v1.DBTService/RunOperationCommand',
                request_serializer=dbt_dot_v1_dot_dbt__pb2.RunOperationCommandRequest.SerializeToString,
                response_deserializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
                )
        self.DebugCommand = channel.unary_stream(
                '/dbt.v1.DBTService/DebugCommand',
                request_serializer=dbt_dot_v1_dot_dbt__pb2.DebugCommandRequest.SerializeToString,
                response_deserializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
                )


class DBTServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunCommand(self, request, context):
        """Request a `dbt run` command invocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SeedCommand(self, request, context):
        """Request a `dbt seed` command invocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SnapshotCommand(self, request, context):
        """Request a `dbt snapshot` command invocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestCommand(self, request, context):
        """Request a `dbt test` command invocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunOperationCommand(self, request, context):
        """Request a `dbt run-operation` command invocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugCommand(self, request, context):
        """Request a `dbt debug` command invocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DBTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.RunCommand,
                    request_deserializer=dbt_dot_v1_dot_dbt__pb2.RunCommandRequest.FromString,
                    response_serializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.SerializeToString,
            ),
            'SeedCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.SeedCommand,
                    request_deserializer=dbt_dot_v1_dot_dbt__pb2.SeedCommandRequest.FromString,
                    response_serializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.SerializeToString,
            ),
            'SnapshotCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.SnapshotCommand,
                    request_deserializer=dbt_dot_v1_dot_dbt__pb2.SnapshotCommandRequest.FromString,
                    response_serializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.SerializeToString,
            ),
            'TestCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.TestCommand,
                    request_deserializer=dbt_dot_v1_dot_dbt__pb2.TestCommandRequest.FromString,
                    response_serializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.SerializeToString,
            ),
            'RunOperationCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.RunOperationCommand,
                    request_deserializer=dbt_dot_v1_dot_dbt__pb2.RunOperationCommandRequest.FromString,
                    response_serializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.SerializeToString,
            ),
            'DebugCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.DebugCommand,
                    request_deserializer=dbt_dot_v1_dot_dbt__pb2.DebugCommandRequest.FromString,
                    response_serializer=dbt_dot_v1_dot_dbt__pb2.CommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbt.v1.DBTService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DBTService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dbt.v1.DBTService/RunCommand',
            dbt_dot_v1_dot_dbt__pb2.RunCommandRequest.SerializeToString,
            dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SeedCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dbt.v1.DBTService/SeedCommand',
            dbt_dot_v1_dot_dbt__pb2.SeedCommandRequest.SerializeToString,
            dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SnapshotCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dbt.v1.DBTService/SnapshotCommand',
            dbt_dot_v1_dot_dbt__pb2.SnapshotCommandRequest.SerializeToString,
            dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dbt.v1.DBTService/TestCommand',
            dbt_dot_v1_dot_dbt__pb2.TestCommandRequest.SerializeToString,
            dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunOperationCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dbt.v1.DBTService/RunOperationCommand',
            dbt_dot_v1_dot_dbt__pb2.RunOperationCommandRequest.SerializeToString,
            dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DebugCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dbt.v1.DBTService/DebugCommand',
            dbt_dot_v1_dot_dbt__pb2.DebugCommandRequest.SerializeToString,
            dbt_dot_v1_dot_dbt__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
