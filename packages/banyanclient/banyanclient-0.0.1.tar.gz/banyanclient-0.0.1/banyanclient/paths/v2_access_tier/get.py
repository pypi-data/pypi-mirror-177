# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from banyanclient import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from banyanclient import schemas  # noqa: F401

from . import path

# query params
SkipSchema = schemas.StrSchema
NameSchema = schemas.StrSchema
LimitSchema = schemas.StrSchema
ClusterNameSchema = schemas.StrSchema
ClusterIdSchema = schemas.StrSchema
AddressSchema = schemas.StrSchema
OrderByDefaultcreatedAtSchema = schemas.StrSchema
OrderDefaultdescSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'skip': typing.Union[SkipSchema, str, ],
        'name': typing.Union[NameSchema, str, ],
        'limit': typing.Union[LimitSchema, str, ],
        'cluster_name': typing.Union[ClusterNameSchema, str, ],
        'cluster_id': typing.Union[ClusterIdSchema, str, ],
        'address': typing.Union[AddressSchema, str, ],
        'order_by(default&#x3D;created_at)': typing.Union[OrderByDefaultcreatedAtSchema, str, ],
        'order (default&#x3D;desc)': typing.Union[OrderDefaultdescSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_skip = api_client.QueryParameter(
    name="skip",
    style=api_client.ParameterStyle.FORM,
    schema=SkipSchema,
    explode=True,
)
request_query_name = api_client.QueryParameter(
    name="name",
    style=api_client.ParameterStyle.FORM,
    schema=NameSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_cluster_name = api_client.QueryParameter(
    name="cluster_name",
    style=api_client.ParameterStyle.FORM,
    schema=ClusterNameSchema,
    explode=True,
)
request_query_cluster_id = api_client.QueryParameter(
    name="cluster_id",
    style=api_client.ParameterStyle.FORM,
    schema=ClusterIdSchema,
    explode=True,
)
request_query_address = api_client.QueryParameter(
    name="address",
    style=api_client.ParameterStyle.FORM,
    schema=AddressSchema,
    explode=True,
)
request_query_order_by_defaultcreated_at = api_client.QueryParameter(
    name="order_by(default&#x3D;created_at)",
    style=api_client.ParameterStyle.FORM,
    schema=OrderByDefaultcreatedAtSchema,
    explode=True,
)
request_query_order__defaultdesc = api_client.QueryParameter(
    name="order (default&#x3D;desc)",
    style=api_client.ParameterStyle.FORM,
    schema=OrderDefaultdescSchema,
    explode=True,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.IntSchema
            error_description = schemas.StrSchema
            
            
            class data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class access_tiers(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            id = schemas.StrSchema
                                            name = schemas.StrSchema
                                            address = schemas.StrSchema
                                            status = schemas.StrSchema
                                            
                                            
                                            class domains(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'domains':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class netagents(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                Hostname = schemas.StrSchema
                                                                
                                                                
                                                                class IPs(
                                                                    schemas.ListSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        items = schemas.StrSchema
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    ) -> 'IPs':
                                                                        return super().__new__(
                                                                            cls,
                                                                            arg,
                                                                            _configuration=_configuration,
                                                                        )
                                                                
                                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                                        return super().__getitem__(i)
                                                                Version = schemas.StrSchema
                                                                Visibility = schemas.IntSchema
                                                                CIDRs = schemas.StrSchema
                                                                
                                                                
                                                                class HostTags(
                                                                    schemas.DictSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        
                                                                        class properties:
                                                                            com_banyanops_hosttag_hname = schemas.StrSchema
                                                                            com_banyanops_hosttag_site_address = schemas.StrSchema
                                                                            com_banyanops_hosttag_site_autoscale = schemas.StrSchema
                                                                            com_banyanops_hosttag_site_domain_names = schemas.StrSchema
                                                                            com_banyanops_hosttag_site_name = schemas.StrSchema
                                                                            __annotations__ = {
                                                                                "com.banyanops.hosttag.hname": com_banyanops_hosttag_hname,
                                                                                "com.banyanops.hosttag.site_address": com_banyanops_hosttag_site_address,
                                                                                "com.banyanops.hosttag.site_autoscale": com_banyanops_hosttag_site_autoscale,
                                                                                "com.banyanops.hosttag.site_domain_names": com_banyanops_hosttag_site_domain_names,
                                                                                "com.banyanops.hosttag.site_name": com_banyanops_hosttag_site_name,
                                                                            }
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> MetaOapg.properties.com_banyanops_hosttag_hname: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_address"]) -> MetaOapg.properties.com_banyanops_hosttag_site_address: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_autoscale"]) -> MetaOapg.properties.com_banyanops_hosttag_site_autoscale: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_domain_names"]) -> MetaOapg.properties.com_banyanops_hosttag_site_domain_names: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_name"]) -> MetaOapg.properties.com_banyanops_hosttag_site_name: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                    
                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.hname", "com.banyanops.hosttag.site_address", "com.banyanops.hosttag.site_autoscale", "com.banyanops.hosttag.site_domain_names", "com.banyanops.hosttag.site_name", ], str]):
                                                                        # dict_instance[name] accessor
                                                                        return super().__getitem__(name)
                                                                    
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_hname, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_address"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_address, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_autoscale"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_autoscale, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_domain_names"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_domain_names, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_name"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_name, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                    
                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.hname", "com.banyanops.hosttag.site_address", "com.banyanops.hosttag.site_autoscale", "com.banyanops.hosttag.site_domain_names", "com.banyanops.hosttag.site_name", ], str]):
                                                                        return super().get_item_oapg(name)
                                                                    
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                    ) -> 'HostTags':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            _configuration=_configuration,
                                                                            **kwargs,
                                                                        )
                                                                Uname = schemas.StrSchema
                                                                ClusterID = schemas.StrSchema
                                                                LastActivityAt = schemas.StrSchema
                                                                CreatedAt = schemas.StrSchema
                                                                Status = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "Hostname": Hostname,
                                                                    "IPs": IPs,
                                                                    "Version": Version,
                                                                    "Visibility": Visibility,
                                                                    "CIDRs": CIDRs,
                                                                    "HostTags": HostTags,
                                                                    "Uname": Uname,
                                                                    "ClusterID": ClusterID,
                                                                    "LastActivityAt": LastActivityAt,
                                                                    "CreatedAt": CreatedAt,
                                                                    "Status": Status,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["Hostname"]) -> MetaOapg.properties.Hostname: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["IPs"]) -> MetaOapg.properties.IPs: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["Version"]) -> MetaOapg.properties.Version: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["Visibility"]) -> MetaOapg.properties.Visibility: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["CIDRs"]) -> MetaOapg.properties.CIDRs: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["HostTags"]) -> MetaOapg.properties.HostTags: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["Uname"]) -> MetaOapg.properties.Uname: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["ClusterID"]) -> MetaOapg.properties.ClusterID: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["LastActivityAt"]) -> MetaOapg.properties.LastActivityAt: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", "Uname", "ClusterID", "LastActivityAt", "CreatedAt", "Status", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["Hostname"]) -> typing.Union[MetaOapg.properties.Hostname, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["IPs"]) -> typing.Union[MetaOapg.properties.IPs, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["Version"]) -> typing.Union[MetaOapg.properties.Version, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["Visibility"]) -> typing.Union[MetaOapg.properties.Visibility, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["CIDRs"]) -> typing.Union[MetaOapg.properties.CIDRs, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["HostTags"]) -> typing.Union[MetaOapg.properties.HostTags, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["Uname"]) -> typing.Union[MetaOapg.properties.Uname, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["ClusterID"]) -> typing.Union[MetaOapg.properties.ClusterID, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["LastActivityAt"]) -> typing.Union[MetaOapg.properties.LastActivityAt, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", "Uname", "ClusterID", "LastActivityAt", "CreatedAt", "Status", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            Hostname: typing.Union[MetaOapg.properties.Hostname, str, schemas.Unset] = schemas.unset,
                                                            IPs: typing.Union[MetaOapg.properties.IPs, list, tuple, schemas.Unset] = schemas.unset,
                                                            Version: typing.Union[MetaOapg.properties.Version, str, schemas.Unset] = schemas.unset,
                                                            Visibility: typing.Union[MetaOapg.properties.Visibility, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                            CIDRs: typing.Union[MetaOapg.properties.CIDRs, str, schemas.Unset] = schemas.unset,
                                                            HostTags: typing.Union[MetaOapg.properties.HostTags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                            Uname: typing.Union[MetaOapg.properties.Uname, str, schemas.Unset] = schemas.unset,
                                                            ClusterID: typing.Union[MetaOapg.properties.ClusterID, str, schemas.Unset] = schemas.unset,
                                                            LastActivityAt: typing.Union[MetaOapg.properties.LastActivityAt, str, schemas.Unset] = schemas.unset,
                                                            CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, str, schemas.Unset] = schemas.unset,
                                                            Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                Hostname=Hostname,
                                                                IPs=IPs,
                                                                Version=Version,
                                                                Visibility=Visibility,
                                                                CIDRs=CIDRs,
                                                                HostTags=HostTags,
                                                                Uname=Uname,
                                                                ClusterID=ClusterID,
                                                                LastActivityAt=LastActivityAt,
                                                                CreatedAt=CreatedAt,
                                                                Status=Status,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'netagents':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            Hostname = schemas.StrSchema
                                            
                                            
                                            class IPs(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'IPs':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            Version = schemas.StrSchema
                                            Visibility = schemas.IntSchema
                                            CIDRs = schemas.StrSchema
                                            
                                            
                                            class HostTags(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        com_banyanops_hosttag_hname = schemas.StrSchema
                                                        com_banyanops_hosttag_site_address = schemas.StrSchema
                                                        com_banyanops_hosttag_site_autoscale = schemas.StrSchema
                                                        com_banyanops_hosttag_site_domain_names = schemas.StrSchema
                                                        com_banyanops_hosttag_site_name = schemas.StrSchema
                                                        Uname = schemas.StrSchema
                                                        ClusterID = schemas.StrSchema
                                                        LastActivityAt = schemas.StrSchema
                                                        CreatedAt = schemas.StrSchema
                                                        Status = schemas.StrSchema
                                                        __annotations__ = {
                                                            "com.banyanops.hosttag.hname": com_banyanops_hosttag_hname,
                                                            "com.banyanops.hosttag.site_address": com_banyanops_hosttag_site_address,
                                                            "com.banyanops.hosttag.site_autoscale": com_banyanops_hosttag_site_autoscale,
                                                            "com.banyanops.hosttag.site_domain_names": com_banyanops_hosttag_site_domain_names,
                                                            "com.banyanops.hosttag.site_name": com_banyanops_hosttag_site_name,
                                                            "Uname": Uname,
                                                            "ClusterID": ClusterID,
                                                            "LastActivityAt": LastActivityAt,
                                                            "CreatedAt": CreatedAt,
                                                            "Status": Status,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> MetaOapg.properties.com_banyanops_hosttag_hname: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_address"]) -> MetaOapg.properties.com_banyanops_hosttag_site_address: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_autoscale"]) -> MetaOapg.properties.com_banyanops_hosttag_site_autoscale: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_domain_names"]) -> MetaOapg.properties.com_banyanops_hosttag_site_domain_names: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_name"]) -> MetaOapg.properties.com_banyanops_hosttag_site_name: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["Uname"]) -> MetaOapg.properties.Uname: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["ClusterID"]) -> MetaOapg.properties.ClusterID: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["LastActivityAt"]) -> MetaOapg.properties.LastActivityAt: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.hname", "com.banyanops.hosttag.site_address", "com.banyanops.hosttag.site_autoscale", "com.banyanops.hosttag.site_domain_names", "com.banyanops.hosttag.site_name", "Uname", "ClusterID", "LastActivityAt", "CreatedAt", "Status", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_hname, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_address"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_address, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_autoscale"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_autoscale, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_domain_names"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_domain_names, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_name"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_name, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["Uname"]) -> typing.Union[MetaOapg.properties.Uname, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["ClusterID"]) -> typing.Union[MetaOapg.properties.ClusterID, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["LastActivityAt"]) -> typing.Union[MetaOapg.properties.LastActivityAt, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.hname", "com.banyanops.hosttag.site_address", "com.banyanops.hosttag.site_autoscale", "com.banyanops.hosttag.site_domain_names", "com.banyanops.hosttag.site_name", "Uname", "ClusterID", "LastActivityAt", "CreatedAt", "Status", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    Uname: typing.Union[MetaOapg.properties.Uname, str, schemas.Unset] = schemas.unset,
                                                    ClusterID: typing.Union[MetaOapg.properties.ClusterID, str, schemas.Unset] = schemas.unset,
                                                    LastActivityAt: typing.Union[MetaOapg.properties.LastActivityAt, str, schemas.Unset] = schemas.unset,
                                                    CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, str, schemas.Unset] = schemas.unset,
                                                    Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'HostTags':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        Uname=Uname,
                                                        ClusterID=ClusterID,
                                                        LastActivityAt=LastActivityAt,
                                                        CreatedAt=CreatedAt,
                                                        Status=Status,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class tunnel_satellite(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        id = schemas.StrSchema
                                                        org_id = schemas.StrSchema
                                                        access_tier_id = schemas.StrSchema
                                                        tunnel_peer_type = schemas.StrSchema
                                                        dns_search_domains = schemas.StrSchema
                                                        udp_port_number = schemas.IntSchema
                                                        tunnel_ip_address = schemas.StrSchema
                                                        wireguard_public_key = schemas.StrSchema
                                                        dns_enabled = schemas.IntSchema
                                                        keepalive = schemas.IntSchema
                                                        created_at = schemas.IntSchema
                                                        updated_at = schemas.IntSchema
                                                        
                                                        
                                                        class cidrs(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'cidrs':
                                                                return super().__new__(
                                                                    cls,
                                                                    arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class domains(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'domains':
                                                                return super().__new__(
                                                                    cls,
                                                                    arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        client_cidr_range = schemas.StrSchema
                                                        __annotations__ = {
                                                            "id": id,
                                                            "org_id": org_id,
                                                            "access_tier_id": access_tier_id,
                                                            "tunnel_peer_type": tunnel_peer_type,
                                                            "dns_search_domains": dns_search_domains,
                                                            "udp_port_number": udp_port_number,
                                                            "tunnel_ip_address": tunnel_ip_address,
                                                            "wireguard_public_key": wireguard_public_key,
                                                            "dns_enabled": dns_enabled,
                                                            "keepalive": keepalive,
                                                            "created_at": created_at,
                                                            "updated_at": updated_at,
                                                            "cidrs": cidrs,
                                                            "domains": domains,
                                                            "client_cidr_range": client_cidr_range,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["access_tier_id"]) -> MetaOapg.properties.access_tier_id: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["tunnel_peer_type"]) -> MetaOapg.properties.tunnel_peer_type: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["dns_search_domains"]) -> MetaOapg.properties.dns_search_domains: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["udp_port_number"]) -> MetaOapg.properties.udp_port_number: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["tunnel_ip_address"]) -> MetaOapg.properties.tunnel_ip_address: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["wireguard_public_key"]) -> MetaOapg.properties.wireguard_public_key: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["dns_enabled"]) -> MetaOapg.properties.dns_enabled: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["keepalive"]) -> MetaOapg.properties.keepalive: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["cidrs"]) -> MetaOapg.properties.cidrs: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["client_cidr_range"]) -> MetaOapg.properties.client_cidr_range: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "org_id", "access_tier_id", "tunnel_peer_type", "dns_search_domains", "udp_port_number", "tunnel_ip_address", "wireguard_public_key", "dns_enabled", "keepalive", "created_at", "updated_at", "cidrs", "domains", "client_cidr_range", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["access_tier_id"]) -> typing.Union[MetaOapg.properties.access_tier_id, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["tunnel_peer_type"]) -> typing.Union[MetaOapg.properties.tunnel_peer_type, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["dns_search_domains"]) -> typing.Union[MetaOapg.properties.dns_search_domains, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["udp_port_number"]) -> typing.Union[MetaOapg.properties.udp_port_number, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["tunnel_ip_address"]) -> typing.Union[MetaOapg.properties.tunnel_ip_address, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["wireguard_public_key"]) -> typing.Union[MetaOapg.properties.wireguard_public_key, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["dns_enabled"]) -> typing.Union[MetaOapg.properties.dns_enabled, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["keepalive"]) -> typing.Union[MetaOapg.properties.keepalive, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["cidrs"]) -> typing.Union[MetaOapg.properties.cidrs, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> typing.Union[MetaOapg.properties.domains, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["client_cidr_range"]) -> typing.Union[MetaOapg.properties.client_cidr_range, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "org_id", "access_tier_id", "tunnel_peer_type", "dns_search_domains", "udp_port_number", "tunnel_ip_address", "wireguard_public_key", "dns_enabled", "keepalive", "created_at", "updated_at", "cidrs", "domains", "client_cidr_range", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                    org_id: typing.Union[MetaOapg.properties.org_id, str, schemas.Unset] = schemas.unset,
                                                    access_tier_id: typing.Union[MetaOapg.properties.access_tier_id, str, schemas.Unset] = schemas.unset,
                                                    tunnel_peer_type: typing.Union[MetaOapg.properties.tunnel_peer_type, str, schemas.Unset] = schemas.unset,
                                                    dns_search_domains: typing.Union[MetaOapg.properties.dns_search_domains, str, schemas.Unset] = schemas.unset,
                                                    udp_port_number: typing.Union[MetaOapg.properties.udp_port_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    tunnel_ip_address: typing.Union[MetaOapg.properties.tunnel_ip_address, str, schemas.Unset] = schemas.unset,
                                                    wireguard_public_key: typing.Union[MetaOapg.properties.wireguard_public_key, str, schemas.Unset] = schemas.unset,
                                                    dns_enabled: typing.Union[MetaOapg.properties.dns_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    keepalive: typing.Union[MetaOapg.properties.keepalive, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    updated_at: typing.Union[MetaOapg.properties.updated_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    cidrs: typing.Union[MetaOapg.properties.cidrs, list, tuple, schemas.Unset] = schemas.unset,
                                                    domains: typing.Union[MetaOapg.properties.domains, list, tuple, schemas.Unset] = schemas.unset,
                                                    client_cidr_range: typing.Union[MetaOapg.properties.client_cidr_range, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'tunnel_satellite':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        id=id,
                                                        org_id=org_id,
                                                        access_tier_id=access_tier_id,
                                                        tunnel_peer_type=tunnel_peer_type,
                                                        dns_search_domains=dns_search_domains,
                                                        udp_port_number=udp_port_number,
                                                        tunnel_ip_address=tunnel_ip_address,
                                                        wireguard_public_key=wireguard_public_key,
                                                        dns_enabled=dns_enabled,
                                                        keepalive=keepalive,
                                                        created_at=created_at,
                                                        updated_at=updated_at,
                                                        cidrs=cidrs,
                                                        domains=domains,
                                                        client_cidr_range=client_cidr_range,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class tunnel_enduser(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        id = schemas.StrSchema
                                                        org_id = schemas.StrSchema
                                                        access_tier_id = schemas.StrSchema
                                                        tunnel_peer_type = schemas.StrSchema
                                                        dns_search_domains = schemas.StrSchema
                                                        udp_port_number = schemas.IntSchema
                                                        tunnel_ip_address = schemas.StrSchema
                                                        wireguard_public_key = schemas.StrSchema
                                                        dns_enabled = schemas.IntSchema
                                                        keepalive = schemas.IntSchema
                                                        created_at = schemas.IntSchema
                                                        updated_at = schemas.IntSchema
                                                        
                                                        
                                                        class cidrs(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'cidrs':
                                                                return super().__new__(
                                                                    cls,
                                                                    arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class domains(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'domains':
                                                                return super().__new__(
                                                                    cls,
                                                                    arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        client_cidr_range = schemas.StrSchema
                                                        __annotations__ = {
                                                            "id": id,
                                                            "org_id": org_id,
                                                            "access_tier_id": access_tier_id,
                                                            "tunnel_peer_type": tunnel_peer_type,
                                                            "dns_search_domains": dns_search_domains,
                                                            "udp_port_number": udp_port_number,
                                                            "tunnel_ip_address": tunnel_ip_address,
                                                            "wireguard_public_key": wireguard_public_key,
                                                            "dns_enabled": dns_enabled,
                                                            "keepalive": keepalive,
                                                            "created_at": created_at,
                                                            "updated_at": updated_at,
                                                            "cidrs": cidrs,
                                                            "domains": domains,
                                                            "client_cidr_range": client_cidr_range,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["access_tier_id"]) -> MetaOapg.properties.access_tier_id: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["tunnel_peer_type"]) -> MetaOapg.properties.tunnel_peer_type: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["dns_search_domains"]) -> MetaOapg.properties.dns_search_domains: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["udp_port_number"]) -> MetaOapg.properties.udp_port_number: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["tunnel_ip_address"]) -> MetaOapg.properties.tunnel_ip_address: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["wireguard_public_key"]) -> MetaOapg.properties.wireguard_public_key: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["dns_enabled"]) -> MetaOapg.properties.dns_enabled: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["keepalive"]) -> MetaOapg.properties.keepalive: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["cidrs"]) -> MetaOapg.properties.cidrs: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["client_cidr_range"]) -> MetaOapg.properties.client_cidr_range: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "org_id", "access_tier_id", "tunnel_peer_type", "dns_search_domains", "udp_port_number", "tunnel_ip_address", "wireguard_public_key", "dns_enabled", "keepalive", "created_at", "updated_at", "cidrs", "domains", "client_cidr_range", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["access_tier_id"]) -> typing.Union[MetaOapg.properties.access_tier_id, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["tunnel_peer_type"]) -> typing.Union[MetaOapg.properties.tunnel_peer_type, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["dns_search_domains"]) -> typing.Union[MetaOapg.properties.dns_search_domains, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["udp_port_number"]) -> typing.Union[MetaOapg.properties.udp_port_number, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["tunnel_ip_address"]) -> typing.Union[MetaOapg.properties.tunnel_ip_address, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["wireguard_public_key"]) -> typing.Union[MetaOapg.properties.wireguard_public_key, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["dns_enabled"]) -> typing.Union[MetaOapg.properties.dns_enabled, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["keepalive"]) -> typing.Union[MetaOapg.properties.keepalive, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["cidrs"]) -> typing.Union[MetaOapg.properties.cidrs, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> typing.Union[MetaOapg.properties.domains, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["client_cidr_range"]) -> typing.Union[MetaOapg.properties.client_cidr_range, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "org_id", "access_tier_id", "tunnel_peer_type", "dns_search_domains", "udp_port_number", "tunnel_ip_address", "wireguard_public_key", "dns_enabled", "keepalive", "created_at", "updated_at", "cidrs", "domains", "client_cidr_range", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                    org_id: typing.Union[MetaOapg.properties.org_id, str, schemas.Unset] = schemas.unset,
                                                    access_tier_id: typing.Union[MetaOapg.properties.access_tier_id, str, schemas.Unset] = schemas.unset,
                                                    tunnel_peer_type: typing.Union[MetaOapg.properties.tunnel_peer_type, str, schemas.Unset] = schemas.unset,
                                                    dns_search_domains: typing.Union[MetaOapg.properties.dns_search_domains, str, schemas.Unset] = schemas.unset,
                                                    udp_port_number: typing.Union[MetaOapg.properties.udp_port_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    tunnel_ip_address: typing.Union[MetaOapg.properties.tunnel_ip_address, str, schemas.Unset] = schemas.unset,
                                                    wireguard_public_key: typing.Union[MetaOapg.properties.wireguard_public_key, str, schemas.Unset] = schemas.unset,
                                                    dns_enabled: typing.Union[MetaOapg.properties.dns_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    keepalive: typing.Union[MetaOapg.properties.keepalive, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    updated_at: typing.Union[MetaOapg.properties.updated_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    cidrs: typing.Union[MetaOapg.properties.cidrs, list, tuple, schemas.Unset] = schemas.unset,
                                                    domains: typing.Union[MetaOapg.properties.domains, list, tuple, schemas.Unset] = schemas.unset,
                                                    client_cidr_range: typing.Union[MetaOapg.properties.client_cidr_range, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'tunnel_enduser':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        id=id,
                                                        org_id=org_id,
                                                        access_tier_id=access_tier_id,
                                                        tunnel_peer_type=tunnel_peer_type,
                                                        dns_search_domains=dns_search_domains,
                                                        udp_port_number=udp_port_number,
                                                        tunnel_ip_address=tunnel_ip_address,
                                                        wireguard_public_key=wireguard_public_key,
                                                        dns_enabled=dns_enabled,
                                                        keepalive=keepalive,
                                                        created_at=created_at,
                                                        updated_at=updated_at,
                                                        cidrs=cidrs,
                                                        domains=domains,
                                                        client_cidr_range=client_cidr_range,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            created_at = schemas.IntSchema
                                            created_by = schemas.StrSchema
                                            updated_at = schemas.IntSchema
                                            updated_by = schemas.StrSchema
                                            __annotations__ = {
                                                "id": id,
                                                "name": name,
                                                "address": address,
                                                "status": status,
                                                "domains": domains,
                                                "netagents": netagents,
                                                "Hostname": Hostname,
                                                "IPs": IPs,
                                                "Version": Version,
                                                "Visibility": Visibility,
                                                "CIDRs": CIDRs,
                                                "HostTags": HostTags,
                                                "tunnel_satellite": tunnel_satellite,
                                                "tunnel_enduser": tunnel_enduser,
                                                "created_at": created_at,
                                                "created_by": created_by,
                                                "updated_at": updated_at,
                                                "updated_by": updated_by,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["netagents"]) -> MetaOapg.properties.netagents: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["Hostname"]) -> MetaOapg.properties.Hostname: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["IPs"]) -> MetaOapg.properties.IPs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["Version"]) -> MetaOapg.properties.Version: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["Visibility"]) -> MetaOapg.properties.Visibility: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["CIDRs"]) -> MetaOapg.properties.CIDRs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["HostTags"]) -> MetaOapg.properties.HostTags: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["tunnel_satellite"]) -> MetaOapg.properties.tunnel_satellite: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["tunnel_enduser"]) -> MetaOapg.properties.tunnel_enduser: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updated_by"]) -> MetaOapg.properties.updated_by: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "address", "status", "domains", "netagents", "Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", "tunnel_satellite", "tunnel_enduser", "created_at", "created_by", "updated_at", "updated_by", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> typing.Union[MetaOapg.properties.domains, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["netagents"]) -> typing.Union[MetaOapg.properties.netagents, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["Hostname"]) -> typing.Union[MetaOapg.properties.Hostname, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["IPs"]) -> typing.Union[MetaOapg.properties.IPs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["Version"]) -> typing.Union[MetaOapg.properties.Version, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["Visibility"]) -> typing.Union[MetaOapg.properties.Visibility, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["CIDRs"]) -> typing.Union[MetaOapg.properties.CIDRs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["HostTags"]) -> typing.Union[MetaOapg.properties.HostTags, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["tunnel_satellite"]) -> typing.Union[MetaOapg.properties.tunnel_satellite, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["tunnel_enduser"]) -> typing.Union[MetaOapg.properties.tunnel_enduser, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updated_by"]) -> typing.Union[MetaOapg.properties.updated_by, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "address", "status", "domains", "netagents", "Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", "tunnel_satellite", "tunnel_enduser", "created_at", "created_by", "updated_at", "updated_by", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
                                        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                                        domains: typing.Union[MetaOapg.properties.domains, list, tuple, schemas.Unset] = schemas.unset,
                                        netagents: typing.Union[MetaOapg.properties.netagents, list, tuple, schemas.Unset] = schemas.unset,
                                        Hostname: typing.Union[MetaOapg.properties.Hostname, str, schemas.Unset] = schemas.unset,
                                        IPs: typing.Union[MetaOapg.properties.IPs, list, tuple, schemas.Unset] = schemas.unset,
                                        Version: typing.Union[MetaOapg.properties.Version, str, schemas.Unset] = schemas.unset,
                                        Visibility: typing.Union[MetaOapg.properties.Visibility, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        CIDRs: typing.Union[MetaOapg.properties.CIDRs, str, schemas.Unset] = schemas.unset,
                                        HostTags: typing.Union[MetaOapg.properties.HostTags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        tunnel_satellite: typing.Union[MetaOapg.properties.tunnel_satellite, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        tunnel_enduser: typing.Union[MetaOapg.properties.tunnel_enduser, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        created_by: typing.Union[MetaOapg.properties.created_by, str, schemas.Unset] = schemas.unset,
                                        updated_at: typing.Union[MetaOapg.properties.updated_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        updated_by: typing.Union[MetaOapg.properties.updated_by, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            id=id,
                                            name=name,
                                            address=address,
                                            status=status,
                                            domains=domains,
                                            netagents=netagents,
                                            Hostname=Hostname,
                                            IPs=IPs,
                                            Version=Version,
                                            Visibility=Visibility,
                                            CIDRs=CIDRs,
                                            HostTags=HostTags,
                                            tunnel_satellite=tunnel_satellite,
                                            tunnel_enduser=tunnel_enduser,
                                            created_at=created_at,
                                            created_by=created_by,
                                            updated_at=updated_at,
                                            updated_by=updated_by,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'access_tiers':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        count = schemas.IntSchema
                        __annotations__ = {
                            "access_tiers": access_tiers,
                            "count": count,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["access_tiers"]) -> MetaOapg.properties.access_tiers: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_tiers", "count", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["access_tiers"]) -> typing.Union[MetaOapg.properties.access_tiers, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_tiers", "count", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    access_tiers: typing.Union[MetaOapg.properties.access_tiers, list, tuple, schemas.Unset] = schemas.unset,
                    count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        access_tiers=access_tiers,
                        count=count,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_description": error_description,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_description"]) -> MetaOapg.properties.error_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_description"]) -> typing.Union[MetaOapg.properties.error_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error_description: typing.Union[MetaOapg.properties.error_description, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            request_id=request_id,
            error_code=error_code,
            error_description=error_description,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


class SchemaFor500ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.IntSchema
            error_description = schemas.StrSchema
            data = schemas.IntSchema
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_description": error_description,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_description"]) -> MetaOapg.properties.error_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_description"]) -> typing.Union[MetaOapg.properties.error_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error_description: typing.Union[MetaOapg.properties.error_description, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor500ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            request_id=request_id,
            error_code=error_code,
            error_description=error_description,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v2_access_tier_get_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         List Access Tier(s) of an organization
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_skip,
            request_query_name,
            request_query_limit,
            request_query_cluster_name,
            request_query_cluster_id,
            request_query_address,
            request_query_order_by_defaultcreated_at,
            request_query_order__defaultdesc,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V2AccessTierGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v2_access_tier_get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v2_access_tier_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v2_access_tier_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


