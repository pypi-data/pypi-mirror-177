from .core import File as File
from .errors import EntityNotFoundError as EntityNotFoundError, InternalError as InternalError
from munch import Munch as Munch
from typing import Any, Iterable, List, Optional

class User:
    first_name: Any = ...
    last_name: Any = ...
    email: Any = ...
    job_title: Any = ...
    def __init__(self, first_name: str, last_name: str, email: str, job_title: str) -> None: ...
    @property
    def full_name(self) -> str: ...

class EntityType:
    id: Any = ...
    def __init__(self, name: str, id_: int) -> None: ...
    @property
    def name(self) -> str: ...
    @classmethod
    def from_json(cls: Any, json_: dict) -> EntityType: ...

class _ResolvedEntity:
    entity_type: Any = ...
    name: Any = ...
    id: Any = ...
    def __init__(self, name: str, id_: int, entity_type: EntityType, params: Munch=..., summary: Munch=...) -> None: ...
    @classmethod
    def from_json(cls: Any, json_: dict) -> _ResolvedEntity: ...
    @property
    def last_saved_params(self) -> Munch: ...
    @property
    def last_saved_summary(self) -> Munch: ...

class Entity:
    def __init__(self, api: _API, origin_id: int, operations: List[str]=..., resolved: _ResolvedEntity=...) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def entity_type(self) -> EntityType: ...
    @property
    def id(self) -> int: ...
    @property
    def last_saved_params(self) -> Munch: ...
    @property
    def last_saved_summary(self) -> Munch: ...
    def parent(self) -> Entity: ...
    def children(self, *, include_params: bool=..., entity_type_names: List[str]=...) -> EntityList: ...
    def siblings(self, *, include_params: bool=..., entity_type_names: List[str]=...) -> EntityList: ...
    def get_file(self) -> File: ...

class EntityList:
    def __init__(self, api: _API, relation: str, origin: Optional[Entity], entity_type_names: Optional[List[str]], include_params: bool) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Entity: ...
    def __iter__(self) -> Iterable[Entity]: ...

class _API:
    host: Any = ...
    def __init__(self, token: str, host: str, privileged: bool) -> None: ...
    def get_current_user(self) -> User: ...
    def get_entity(self, id_: int) -> Entity: ...
    def get_root_entities(self, *, include_params: bool=..., entity_type_names: List[str]=...) -> EntityList: ...
    def get_entity_file(self, entity_id: int) -> File: ...

class API(_API):
    def __init__(self) -> None: ...

class PrivilegedAPI(_API):
    def __init__(self) -> None: ...
