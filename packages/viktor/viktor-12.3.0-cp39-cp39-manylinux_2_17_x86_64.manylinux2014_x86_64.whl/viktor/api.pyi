import abc
import requests
from .parametrization import OptionListElement as OptionListElement
from abc import abstractmethod
from munch import Munch as Munch
from typing import Any, List, Optional, Union

ENTITY_DATABASE_FORMAT: str

class API:
    headers: Any = ...
    host: Any = ...
    def __init__(self) -> None: ...
    @staticmethod
    def verify_status_code(response: requests.Response, allowed: Union[int, List[int]]=...) -> None: ...
    def entity(self, entity_id: int=...) -> Entity: ...
    def entity_type(self, entity_type_id: int=...) -> EntityType: ...

class Resource(metaclass=abc.ABCMeta):
    id: Any = ...
    headers: Any = ...
    host: Any = ...
    resource_name: Optional[str] = ...
    def __init__(self, headers: dict, host: str, resource_id: int=...) -> None: ...
    @abstractmethod
    def list(self) -> List[dict]: ...
    @abstractmethod
    def get(self) -> dict: ...
    def create(self, data: Any) -> dict: ...
    def post(self, data: Any) -> dict: ...
    def update_properties(self, new_properties: Union[Munch, dict]) -> dict: ...
    def post_properties(self, new_properties: Union[Munch, dict]) -> dict: ...
    def delete(self) -> None: ...

class Entity(Resource):
    resource_name: str = ...
    def list(self) -> List[dict]: ...
    def get(self) -> dict: ...
    def children(self, include_deleted: bool=...) -> List[dict]: ...
    def root_entities(self, include_deleted: bool=...) -> List[dict]: ...
    def child_ids(self, include_deleted: bool=...) -> List[int]: ...
    def create_child(self, child_entity: Union[Munch, dict]) -> Any: ...
    def parents(self) -> List[dict]: ...
    def parent_ids(self) -> List[int]: ...
    def revisions(self) -> List[dict]: ...
    def download(self, encoding: str) -> str: ...
    def download(self, encoding: None=...) -> bytes: ...
    def download(self, encoding: str=...) -> Union[bytes, str]: ...

class EntityType(Resource):
    resource_name: str = ...
    def list(self) -> List[dict]: ...
    def get(self) -> dict: ...
    def child_types(self) -> List[dict]: ...
    def entities(self, include_deleted: bool=...) -> List[dict]: ...
    def find_by_name(self, name: str) -> dict: ...

def get_database_value_from_entity_id(entity: dict) -> Optional[str]: ...
def get_entity_id_from_database_value(value: str) -> Optional[int]: ...
def get_entity_option_list_for_designer(entities: List[dict]) -> List[OptionListElement]: ...
