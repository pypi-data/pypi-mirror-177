from .api_v1 import API as API
from .core import File as File, _SerializableObject
from .views import JPGResult as JPGResult, PNGResult as PNGResult, SVGResult as SVGResult
from io import BytesIO
from munch import Munch as Munch
from typing import Any, List, Union

class SetParametersResult(_SerializableObject):
    def __init__(self, params: dict) -> None: ...
    def get(self, key: str) -> Any: ...

class DownloadResult(_SerializableObject):
    def __init__(self, file_content: Union[str, bytes, File, BytesIO], file_name: str, encoding: str=...) -> None: ...

class OptimisationResultElement:
    def __init__(self, params: Union[dict, Munch], analysis_result: dict=...) -> None: ...

class OptimisationResult(_SerializableObject):
    result_column_names_input: Any = ...
    result_column_names_result: Any = ...
    def __init__(self, results: List[OptimisationResultElement], result_column_names_input: List[str]=..., output_headers: dict=..., image: Union[PNGResult, JPGResult, SVGResult]=...) -> None: ...

class ViktorResult(_SerializableObject):
    def __init__(self, optimisation_result: OptimisationResult=..., set_parameters_result: SetParametersResult=..., download_result: DownloadResult=...) -> None: ...
