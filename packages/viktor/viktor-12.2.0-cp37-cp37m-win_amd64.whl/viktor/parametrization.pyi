import abc
import datetime
from .core import ISCLOSE_ATOL as ISCLOSE_ATOL, UserException as UserException, _OrderedClass
from .geometry import GeoPoint as GeoPoint, GeoPolygon as GeoPolygon, GeoPolyline as GeoPolyline
from abc import ABC, abstractmethod
from enum import Enum
from typing import Any, Callable, List, Optional, Union

logger: Any
ValueType = Union[int, float, str]
MinMaxType: Any
VisibleType: Any

class _ParamNotFoundError(ValueError):
    def __init__(self, key: str) -> None: ...

class _AttrGroup:
    def __init__(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...

class _ActionButton(ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, method: str, longpoll: bool, require_all_fields: bool, visible: VisibleType, always_available: bool, flex: Optional[int]) -> None: ...

class DownloadButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool=..., require_all_fields: bool=..., visible: VisibleType=..., always_available: bool=..., flex: int=...) -> None: ...

class ActionButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool=..., require_all_fields: bool=..., visible: VisibleType=..., always_available: bool=..., flex: int=...) -> None: ...
AnalyseButton = ActionButton

class OptimizationButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool=..., require_all_fields: bool=..., visible: VisibleType=..., always_available: bool=..., flex: int=...) -> None: ...
OptimiseButton = OptimizationButton

class SetParamsButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool=..., require_all_fields: bool=..., visible: VisibleType=..., always_available: bool=..., flex: int=...) -> None: ...

class Lookup:
    def __init__(self, target: str) -> None: ...

class FunctionLookup:
    def __init__(self, func: Callable, *func_args: Any, **kwargs: Any) -> None: ...

class RowLookup:
    def __init__(self, target: str) -> None: ...

class BoolOperator(ABC, metaclass=abc.ABCMeta): ...

class And(BoolOperator):
    def __init__(self, *operands: Union[Lookup, BoolOperator, bool]) -> None: ...

class Or(BoolOperator):
    def __init__(self, *operands: Union[Lookup, BoolOperator, bool]) -> None: ...

class Not(BoolOperator):
    def __init__(self, operand: Union[Lookup, BoolOperator, bool]) -> None: ...

class IsEqual(BoolOperator):
    def __init__(self, operand1: Union[Lookup, BoolOperator, Any], operand2: Union[Lookup, BoolOperator, Any]) -> None: ...

class IsNotEqual(IsEqual): ...

class IsTrue(IsEqual):
    def __init__(self, operand: Union[Lookup, BoolOperator, Any]) -> None: ...

class IsFalse(IsEqual):
    def __init__(self, operand: Union[Lookup, BoolOperator, Any]) -> None: ...

class IsNotNone(IsNotEqual):
    def __init__(self, operand: Union[Lookup, BoolOperator, Any]) -> None: ...

class DynamicArrayConstraint:
    def __init__(self, dynamic_array_name: str, operand: Union[Lookup, BoolOperator, FunctionLookup]) -> None: ...

class DynamicArray(_AttrGroup):
    def __init__(self, ui_name: str, min: Union[int, Lookup, FunctionLookup, Callable]=..., max: Union[int, Lookup, FunctionLookup, Callable]=..., copylast: bool=..., visible: Union[bool, BoolOperator, Lookup, FunctionLookup, Callable]=..., default: List[dict]=...) -> None: ...

class Field(ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, name: str=..., prefix: str=..., suffix: str=..., options: List[OptionListElement]=..., default: Any=..., flex: int=..., visible: VisibleType=...) -> None: ...
    @property
    def name(self) -> Optional[str]: ...

class DateField(Field):
    def __init__(self, ui_name: str, name: str=..., prefix: str=..., suffix: str=..., *, default: datetime.date=..., flex: int=..., visible: VisibleType=...) -> None: ...

class NumberField(Field):
    class Variant(Enum):
        STANDARD: NumberField.Variant = ...
        SLIDER: NumberField.Variant = ...
    def __init__(self, ui_name: str, name: str=..., prefix: str=..., *, suffix: str=..., default: float=..., step: float=..., min: MinMaxType=..., max: MinMaxType=..., min_message: str=..., max_message: str=..., num_decimals: int=..., visible: VisibleType=..., flex: int=..., variant: Variant=...) -> None: ...

class IntegerField(NumberField):
    def __init__(self, ui_name: str, name: str=..., prefix: str=..., *, suffix: str=..., default: int=..., step: int=..., min: MinMaxType=..., max: MinMaxType=..., min_message: str=..., max_message: str=..., visible: VisibleType=..., flex: int=...) -> None: ...

class TextField(Field):
    def __init__(self, ui_name: str, name: str=..., prefix: str=..., *, suffix: str=..., default: str=..., visible: VisibleType=..., flex: int=...) -> None: ...

class OutputField:
    def __init__(self, ui_name: str, *, value: Union[float, str, BoolOperator, Lookup, FunctionLookup, Callable]=..., prefix: str=..., suffix: str=..., visible: VisibleType=..., flex: int=...) -> None: ...

class LineBreak:
    def __init__(self) -> None: ...

class BooleanField(Field):
    def __init__(self, ui_name: str, name: str=..., *, default: bool=..., visible: VisibleType=..., flex: int=..., always_available: bool=...) -> None: ...
ToggleButton = BooleanField

class _SelectField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, name: Optional[str], prefix: Optional[str], suffix: Optional[str], options: Union[List[OptionListElement], Callable], default: Union[List[Union[str, int, float]], str, int, float, None], flex: Optional[int], visible: VisibleType, multiple: bool=...) -> None: ...

class OptionField(_SelectField):
    def __init__(self, ui_name: str, options: Union[List[OptionListElement], Callable], name: str=..., prefix: str=..., suffix: str=..., default: Union[str, int, float]=..., visible: VisibleType=..., flex: int=...) -> None: ...

class MultiSelectField(_SelectField):
    def __init__(self, ui_name: str, options: Union[List[OptionListElement], Callable], name: str=..., prefix: str=..., suffix: str=..., default: List[Union[str, int, float]]=..., visible: VisibleType=..., flex: int=...) -> None: ...
MultipleSelectField = MultiSelectField

class AutocompleteField(_SelectField):
    def __init__(self, ui_name: str, options: Union[List[OptionListElement], Callable], name: str=..., prefix: str=..., suffix: str=..., default: Union[str, int, float]=..., visible: VisibleType=..., flex: int=...) -> None: ...

class _EntitySelectField(Field, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, type_: str, ui_name: str, name: str=..., visible: VisibleType=..., flex: int=..., *, entity_type_names: List[str]=...) -> Any: ...

class _EntityOptionField(_EntitySelectField, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, type_: str, ui_name: str, name: str=..., visible: VisibleType=..., flex: int=..., *, entity_type_names: List[str]=...) -> Any: ...

class ChildEntityOptionField(_EntityOptionField):
    def __init__(self, ui_name: str, name: str=..., visible: VisibleType=..., flex: int=..., *, entity_type_names: List[str]=...) -> None: ...

class SiblingEntityOptionField(_EntityOptionField):
    def __init__(self, ui_name: str, name: str=..., visible: VisibleType=..., flex: int=..., *, entity_type_names: List[str]=...) -> None: ...

class _EntityMultiSelectField(_EntitySelectField, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, type_: str, ui_name: str, name: str=..., visible: VisibleType=..., flex: int=..., *, entity_type_names: List[str]=...) -> Any: ...

class ChildEntityMultiSelectField(_EntityMultiSelectField):
    def __init__(self, ui_name: str, name: str=..., visible: VisibleType=..., flex: int=..., *, entity_type_names: List[str]=...) -> None: ...

class SiblingEntityMultiSelectField(_EntityMultiSelectField):
    def __init__(self, ui_name: str, name: str=..., visible: VisibleType=..., flex: int=..., *, entity_type_names: List[str]=...) -> None: ...

class Table(Field, _AttrGroup):
    def __init__(self, ui_name: str, name: str=..., *, default: List[dict]=..., visible: VisibleType=...) -> None: ...
TableInput = Table

class _GeoField(Field, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, type_: str, ui_name: str, *, name: str=..., default: Union[GeoPoint, GeoPolyline, GeoPolygon, List[GeoPoint], List[GeoPolyline], List[GeoPolygon]]=..., visible: VisibleType=...) -> Any: ...

class GeoPointField(_GeoField):
    def __init__(self, ui_name: str, *, name: str=..., default: GeoPoint=..., visible: VisibleType=...) -> None: ...

class GeoPolylineField(_GeoField):
    def __init__(self, ui_name: str, *, name: str=..., default: GeoPolyline=..., visible: VisibleType=...) -> None: ...

class GeoPolygonField(_GeoField):
    def __init__(self, ui_name: str, *, name: str=..., default: GeoPolygon=..., visible: VisibleType=...) -> None: ...

class _GeoMultiField(_GeoField, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, type_: str, ui_name: str, *, name: str=..., default: Union[List[GeoPoint], List[GeoPolyline], List[GeoPolygon]]=..., visible: VisibleType=...) -> Any: ...

class _GeoMultiPointField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str=..., default: List[GeoPoint]=..., visible: VisibleType=...) -> None: ...

class _GeoMultiPolylineField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str=..., default: List[GeoPolyline]=..., visible: VisibleType=...) -> None: ...

class _GeoMultiPolygonField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str=..., default: List[GeoPolygon]=..., visible: VisibleType=...) -> None: ...

class TextAreaField(Field):
    def __init__(self, ui_name: str, name: str=..., default: str=..., visible: VisibleType=..., flex: int=...) -> None: ...
TextAreaInput = TextAreaField

class HiddenField:
    def __init__(self, ui_name: str, name: str=...) -> None: ...

class OptionListElement:
    def __init__(self, value: ValueType, label: str=..., visible: Union[bool, BoolOperator, Lookup, FunctionLookup]=...) -> None: ...
    @property
    def label(self) -> str: ...
    @property
    def value(self) -> ValueType: ...

class Parametrization(metaclass=_OrderedClass): ...

class _Group(_AttrGroup):
    def __init__(self, title: str, type_: str) -> None: ...

class Tab(_Group):
    def __init__(self, title: str) -> None: ...

class Section(_Group):
    def __init__(self, title: str) -> None: ...
