import libcst
from typing import Any
from viktor._codemod.helpers import match_controller_class as match_controller_class

def dfs(visited: Any, graph: Any, method: Any) -> None: ...

class Visitor(libcst.CSTVisitor):
    within_controller: bool = ...
    add_params_in_signature: bool = ...
    add_entity_id_in_signature: bool = ...
    called_methods: Any = ...
    method_graph: Any = ...
    methods_with_params: Any = ...
    methods_with_entity_id: Any = ...
    method_nesting_level: int = ...
    def __init__(self) -> None: ...
    def visit_ClassDef(self, node: ClassDef) -> Any: ...
    def leave_ClassDef(self, original_node: ClassDef) -> None: ...
    def leave_Attribute(self, original_node: Attribute) -> None: ...
    def leave_Call_func(self, node: Call) -> None: ...
    def visit_FunctionDef(self, node: FunctionDef) -> Any: ...
    def leave_FunctionDef(self, original_node: FunctionDef) -> None: ...

class Transformer(libcst.CSTTransformer):
    within_controller: bool = ...
    method_graph: Any = ...
    methods_with_params: Any = ...
    methods_with_entity_id: Any = ...
    def __init__(self, visitor: Any) -> None: ...
    def visit_ClassDef(self, node: ClassDef) -> Any: ...
    def leave_ClassDef(self, original_node: ClassDef, updated_node: ClassDef) -> Any: ...
    def leave_FunctionDef(self, original_node: FunctionDef, updated_node: FunctionDef) -> Any: ...
    def leave_Attribute(self, original_node: Attribute, updated_node: Attribute) -> BaseExpression: ...
    def leave_Call(self, original_node: Call, updated_node: Call) -> BaseExpression: ...
