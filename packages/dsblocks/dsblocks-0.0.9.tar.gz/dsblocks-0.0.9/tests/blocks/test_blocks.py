# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/00_tests/blocks/tst.blocks.ipynb.

# %% auto 0
__all__ = ['test_splitter', 'test_single_kfold', 'test_fixed_double_kfold', 'test_sksplit_generator',
           'test_sksplit_generator_reset', 'test_pandas_evaluator']

# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 2
from dsblocks.blocks.blocks import *

# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 3
import numpy as np
import pandas as pd
import pytest 
from sklearn.model_selection import KFold
import os
import joblib
from IPython.display import display

# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 4
def test_splitter ():
    df = pd.DataFrame ({'a': list(range(10)),
                        'b': list (range(10)),
                        'split': (['test','training','test','validation','test','training','validation']+
                                  ['test']*3)
                        })
    dict_results = Splitter (training='training')(df)
    
    reference = dict(training=[1,5], 
                     validation=[3,6], 
                     test=[0,2,4,7,8,9])
    for k in ['training', 'validation', 'test']:
        df = dict_results[k]
        assert (df.columns == ['a','b','split']).all()
        assert (df['split']==k).all()
        assert (df.a == reference[k]).all()
        assert (df.b == reference[k]).all()


# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 5
def test_single_kfold ():
    df = pd.DataFrame ({'a': list(range(10)),
                        'b': list (range(10)),
                        'label': [0]*5+[1]*5})
    
    cv2 = SingleKFold (KFold (5))
    generator = cv2.split (df)
    
    expected = (
        dict(training=[2, 3, 4, 5, 6, 7, 8, 9], validation=[0, 1]),
        dict(training=[0, 1, 4, 5, 6, 7, 8, 9], validation=[2, 3]),
        dict(training=[0, 1, 2, 3, 6, 7, 8, 9], validation=[4, 5]),
        dict(training=[0, 1, 2, 3, 4, 5, 8, 9], validation=[6, 7]),
        dict(training=[0, 1, 2, 3, 4, 5, 6, 7], validation=[8, 9])
    )
    
    for i in range (5):
        training, validation, test = next (generator)
        assert all(training==expected[i]['training'])
        assert all(validation==expected[i]['validation'])
        assert all(test == np.array([]))


# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 6
def test_fixed_double_kfold ():
    df = pd.DataFrame ({'a': list(range(20)),
                        'b': list (range(20)),
                        'split': ['training','test']*10,
                        'label': ([0]*5+[1]*5)*2})
    
    cv2 = FixedDoubleKFold (KFold (5))
    generator = cv2.split (df)
    
    expected = (
        dict(training=[4, 6, 8, 10, 12, 14, 16, 18], validation=[0, 2], test=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]),
        dict(training=[0, 2, 8, 10, 12, 14, 16, 18], validation=[4, 6], test=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]),
        dict(training=[0, 2, 4, 6, 12, 14, 16, 18], validation=[8, 10], test=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]),
        dict(training=[0, 2, 4, 6, 8, 10, 16, 18], validation=[12, 14], test=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]),
        dict(training=[0, 2, 4, 6, 8, 10, 12, 14], validation=[16, 18], test=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]),
    )
    
    for i in range (5):
        training, validation, test = next (generator)
        assert all(training==expected[i]['training'])
        assert all(validation==expected[i]['validation'])
        assert all(test==expected[i]['test'])


# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 7
def test_sksplit_generator ():
    df = pd.DataFrame ({'a': list(range(10)),
                       'b': list (range(10)),
                       'label': [0]*5+[1]*5})
    df_original = df.copy()
    generator = SkSplitGenerator (KFold (n_splits=5), 
                                  label_col='label', 
                                  split_col='split')
    
    reference = pd.concat ([df_original, pd.DataFrame({'split': ['test']*2 + ['training']*8})], axis=1)
    dfr=generator.fit_apply (df)
    assert (reference==dfr).all().all()
    
    dfr=generator.fit_apply (df)
    reference = pd.concat ([df_original, pd.DataFrame({'split': ['training']*2 + ['test']*2 + ['training']*6})], 
                           axis=1)
    assert (reference==dfr).all().all()
    
    dfr=generator.apply (df)
    reference = pd.concat ([df_original, pd.DataFrame({'split': ['test']*10})], axis=1)
    assert (reference==dfr).all().all()


# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 8
def test_sksplit_generator_reset ():
    df = pd.DataFrame ({'a': list(range(9)),
                       'b': list (range(9)),
                       'label': [0]*5+[1]*4})
    df_original = df.copy()
    generator = SkSplitGenerator (KFold (n_splits=5), 
                                  label_col='label', 
                                  split_col='split')
    for i in range(5):
        dfr=generator.fit_apply (df)
    with pytest.raises (StopIteration):
        dfr=generator.fit_apply (df)
    
    generator.reset()
    for i in range(5):
        dfr=generator.fit_apply (df)
    with pytest.raises (StopIteration):
        dfr=generator.fit_apply (df)


# %% ../../../nbs/00_tests/blocks/tst.blocks.ipynb 9
def test_pandas_evaluator ():
    df = pd.DataFrame ({'a': list(range(10)),
                       'b': list (range(10)),
                       'label': [0]*5+[1]*5,
                       'classification': [0]*4+[1]*6})
    assert PandasEvaluator ()(df) == {'accuracy_score': 0.9}
    
    evaluator = PandasEvaluator (classification_metrics=['accuracy_score', 'auc'], 
                                 regression_metrics=['mean_squared_error', 'max_error'],
                                 prediction_col='classification')
    assert evaluator (df)=={'accuracy_score': 0.9, 'auc': 1.0, 'mean_squared_error': 0.1, 'max_error': 1}

