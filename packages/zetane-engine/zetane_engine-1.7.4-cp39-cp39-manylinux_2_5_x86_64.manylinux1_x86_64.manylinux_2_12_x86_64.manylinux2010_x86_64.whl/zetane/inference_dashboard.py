

class Metric:
    def __init__(self):
        pass


class Inference_Dashboard:
    def __init__(self, model, zcontext, zmodel):
        pass


    def image_map(self, classes, image_table, N=1):
        """Take the most probable labels (output of postprocess).
        Args:
            classes (list): names of the classes used for training the model
            image_table (dictionary): dictionary to map the id to the names of the classes 
            N (int):  top N labels that fit the picture
            
        Returns:
            images (list):top N labels that fit the picture.
        
        """
        return self


    def softmax(self, x):
        """Compute softmax values (probabilities from 0 to 1) for each possible label.
        Args:
            x (numpy): numpy (in this case score) for which softmax will be calculated
            
        Returns:
            e_x / e_x.sum(axis=0): softmax for the x values
        
        """
        return self


    def postprocess(self, scores):
        """This function takes the scores generated by the network.
        Args:
            scores(numpy): scores generated by the network 
            
        Returns:
            classes(numpy): the classes ids for the number of classes
            probability (float): probability of the classes predicted by the model
        
        """
        return self


    def keras_training(self, data, data_id, classes, model_type='classification', model_name='keras_model', validation_split =0.2, batch_size = 8, epochs = 1, verbose = 1):
        """
         This function is used to train the model, all types of models will be used for this template in future currently it handles only 
        classification models 
    
        Args:
            
            data (numpy): training data under which model will be trained
            data_id (numpy): class index or class id of the image under which model will be trained
            classes (list): names of the classes used for training the model
            model_type(string): Type of the model used 
            model_name (string): Name under which the keras model will be converted to onnx and will saved 
            validation_split (float): used to split the training data in validation and train set 
            batch_size (int): specifies the number of images that will send together for training 
            epochs (int): specifies the number of iterations that will be used for training the model
            verbose(int): specifies the verbage of the training model
    
        Returns:
          model: Returns the trained model which can used in inference
        
        """
        return self


    def keras_inference(self, test_data, test_data_id, image_table, model_name='keras_model', verbose = 1, debug_data_index=0):
        """
        This function is used to test the model, all types of models will be used for this template in future currently it handles only 
        classification models 
        
        Args:
            
            test_data (numpy): data under which model will be tested
            test_data_id (numpy): class index or class id of the image under which model will be tested
            image_table (dictionary): dictionary to map the id to the names of the classes 
            model_name (onnx model name): Name under which the keras model will be converted to onnx and will saved 
            verbose(int): specifies the verbage of the training model
            debug_data_index (int): index of a single 'data' input to debug in Zetane (per layer feature maps, tensor viz)
        
        Returns:
           model: Returns the infered model
        """
        return self


    def pytorch_train(self, device, train_loader, optimizer, epochs, loss_criteria, test_loader, classes, model_name='pytorch_model', model_type = 'classification', opset_version=12):
        """
       
        This function is used to train the model, all types of models will be used for this template in future currently it handles only 
        classification models 
    
        Args:
            device: type of device used (cpu or cuda) for model
            train_loader: training data loader under which model will be trained
            epochs (int): specifies the number of iterations that will be used for training the model
            optimizer : specifies the type of optimizer used such as Adam, SGD or RMSProp
            loss_criteria : used to define the loss for the model
            test_loader: testing data loader under which model will be tested
            classes (list): names of the classes used for training the model
            dummy_input (tuple): dummy_input to convert the model to onnx
            model_name (string): Name under which the pytorch model will be converted to onnx and will saved 
            model_type(string): Type of the model used 
            opset_version(int): ONNX opset version (default:12)
            
        Returns:
          model: Returns the trained model which can used in inference
        
        """
        return self


    def pytorch_test_loss(self, device, test_loader, loss_criteria):
        """
        This function is used to generate the test loss for the model
    
        Args:
            device: type of device used (cpu or cuda) for model
            test_loader: test data under which model will be tested
            loss_criteria : used to define the loss for the model
    
        Returns:
           avg_loss: Returns the average loss 
           test_acc: Returns the test accuracy
    
        """
        return self


    def pytorch_inference(self, device, test_loader, loss_criteria, image_table, model_name='pytorch_model', debug_data_index=0, opset_version=12):
        """
        This function is used to test the model, all types of models will be used for this template in future currently it handles only 
        classification models 
    
        Args:
            device: type of device used (cpu or cuda) for model
            test_loader: testing data loader under which model will be tested
            loss_criteria : used to define the loss for the model
            image_table (dictionary): dictionary to map the id to the names of the classes
            model_name (string): Name under which the pytorch model will be converted to onnx and will saved 
            debug_data_index (int): index of a single 'data' input to debug in Zetane (per layer feature maps, tensor viz)
            opset_version (int): ONNX opset version (default: 12)

        Returns:
           model: Returns the infered model
    
        """
        return self
