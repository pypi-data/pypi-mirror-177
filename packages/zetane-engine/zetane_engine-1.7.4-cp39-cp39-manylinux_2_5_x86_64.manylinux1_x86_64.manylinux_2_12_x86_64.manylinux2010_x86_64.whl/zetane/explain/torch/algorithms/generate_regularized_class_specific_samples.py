

def preprocess_and_blur_image(pil_im, mean=None, std=None, resize_im=True, size=(224, 224), blur_rad=None):
    """
    Processes image with optional Gaussian blur for CNNs.

    Args:
        pil_im (PIL.Image): PIL Image or ndarray to process
        mean (list(float)): mean values between 0 and 1 for each channel (default: None)
        std (list(float)): standard deviation values between 0 and 1 for each channel (default: None)
        resize_im (bool): to resize or not (default: True)
        size (tuple(int, int)): the size to resize. Used only if resize_im=True (default: (224, 224))
        blur_rad (int): pixel radius for Gaussian blurring (default: None)

    returns:
        torch.autograd.Variable: Variable that contains processed float tensor
    """
    return None


class RegularizedClassSpecificImageGeneration:
    """
    Produces an image that maximizes a certain class with gradient ascent. Uses Gaussian blur, weight decay, and clipping.

    Args:
        model (torch.nn.Module): the model used
        target_class (int): the class for which the images will be generated
        size (tuple(int)): size of the input image
        out_dir (str): output directory
        mean (list): mean values between 0 and 1 for each channel (default: None)
        std (list): standard deviation values between 0 and 1 for each channel (default: None)

    Attributes:
        model (torch.nn.Module): the model used
        target_class (int): the class for which the images will be generated
        size (tuple(int)): size of the input image
        out_dir (str): output directory
        mean (list(float)): mean values between 0 and 1 for each channel
        std (list(float)): standard deviation values between 0 and 1 for each channel
        created_image (PIL image): the final image generated by the network created_image, WxHx3 (channels last) format with int values between 0-255
    """
    def __init__(self, model, target_class, size, out_dir, mean=None, std=None):
        pass


    def generate(self, iterations=150, blur_freq=4, blur_rad=1, wd=0.0001, clipping_value=0.1, initial_learning_rate=6):
        """
        Generates class specific image with enhancements to improve image quality. See https://arxiv.org/abs/1506.06579 for details on each argument's effect on output quality.

        Play around with combinations of arguments. Besides the defaults, this combination has produced good images:
        blur_freq=6, blur_rad=0.8, wd = 0.05

        Args:
            iterations (int): Total iterations for gradient ascent (default: 150)
            blur_freq (int): Frequency of Gaussian blur effect, in iterations (default: 6)
            blur_rad (float): Radius for gaussian blur, passed to PIL.ImageFilter.GaussianBlur() (default: 0.8)
            wd (float): Weight decay value for Stochastic Gradient Ascent (default: 0.05)
            clipping_value (None or float): Value for gradient clipping (default: 0.1)
            initial_learning_rate (float): Initial learning rate of optimizer (default: 6)
        
        Returns:
            np.ndarray: Final maximally activated class image, HxWx3 (channels last) format with float values between 0-1
        """
        return self
