

class Metric:
    def __init__(self):
        pass


class Inference_Dashboard:
    def __init__(self, model, zcontext, zmodel):
        pass


    def image_map(self, classes, image_able, N=1):
        """Take he most probable labels (output of postprocess).
        Args:
            classes (list): names of he classes used for aining he model
            image_able (dictionary): dictionary o map he id o he names of he classes 
            N (int):  op N labels hat fit he picture
            
        Returns:
            images (list):op N labels hat fit he picture.
        
        """
        return self


    def softmax(self, x):
        """Compute softmax values (probabilities from 0 o 1) for each possible label.
        Args:
            x (numpy): numpy (in his case score) for which softmax will be calculated
            
        Returns:
            e_x / e_x.sum(axis=0): softmax for he x values
        
        """
        return self


    def postprocess(self, scores):
        """This function akes he scores generated by he network.
        Args:
            scores(numpy): scores generated by he network 
            
        Returns:
            classes(numpy): he classes ids for he number of classes
            probability (float): probability of he classes predicted by he model
        
        """
        return self
