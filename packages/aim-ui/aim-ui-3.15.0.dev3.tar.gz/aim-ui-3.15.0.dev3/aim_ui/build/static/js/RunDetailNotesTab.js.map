{"version":3,"sources":["components/RouteLeavingGuard/RouteLeavingGuard.tsx","components/RouteLeavingGuard/index.ts","pages/RunDetail/RunDetailNotesTab/NoteTooltip.tsx","pages/RunDetail/RunDetailNotesTab/RunDetailNotesTab.tsx","pages/RunDetail/RunDetailNotesTab/index.ts","components/ConfirmModal/ConfirmModal.tsx"],"names":["RouteLeavingGuard","when","message","confirmBtnText","React","useState","openModal","setOpenModal","nextLocation","setNextLocation","confirmNavigation","setConfirmNavigation","history","useHistory","onBeforeUnload","event","preventDefault","returnValue","closeModal","useEffect","push","window","addEventListener","removeEventListener","location","showModal","pathname","ConfirmModal","open","onCancel","onSubmit","text","icon","name","statusType","title","NoteTooltip","children","ref","useRef","mounted","setMounted","parentNode","current","id","RunDetailNotesTab","runHash","useModel","notesModel","isLoading","noteData","notifyData","value","setValue","saveDisabled","setSaveDisabled","theme","setTheme","editorRef","initialize","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","notes","tabView","destroy","content","RichEditorThemeColors","onNoteSave","useCallback","onNoteUpdate","onNoteCreate","onNoteChange","currentVal","isSaveDisabled","className","classNames","created_at","Tooltip","tint","moment","utc","local","format","updated_at","disabled","variant","size","onClick","placeholder","disableExtensions","tooltip","onChange","Spinner","length","NotificationContainer","handleClose","onNoteNotificationDelete","data","displayName","memo","NotesTab","props","onClose","aria-labelledby","aria-describedby","PaperProps","elevation","color","withOnlyIcon","component","weight","description","cancelBtnText","autoFocus","defaultProps"],"mappings":"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","file":"static/js/RunDetailNotesTab.js?version=5e55761cee9325355926","sourcesContent":["import React from 'react';\nimport { Prompt, useHistory } from 'react-router-dom';\n\nimport ConfirmModal from 'components/ConfirmModal/ConfirmModal';\nimport { Icon } from 'components/kit';\n\nimport { IRouteLeavingGuardProps } from './RouteLeavingGuard.d';\n\nfunction RouteLeavingGuard({\n  when,\n  message = 'Changes you made may not be saved.',\n  confirmBtnText = 'Leave',\n}: IRouteLeavingGuardProps) {\n  const [openModal, setOpenModal] = React.useState<boolean>(false);\n  const [nextLocation, setNextLocation] = React.useState<string>('');\n  const [confirmNavigation, setConfirmNavigation] = React.useState(false);\n  const history = useHistory();\n\n  React.useEffect(() => {\n    if (confirmNavigation) {\n      history.push(nextLocation);\n      setConfirmNavigation(false);\n    }\n    window.addEventListener('beforeunload', onBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [confirmNavigation, when]);\n\n  function onBeforeUnload(event: any): string | undefined {\n    if (!when) {\n      return;\n    } else {\n      event?.preventDefault();\n      if (event) {\n        event.returnValue =\n          'Your changes is not saved. Do you still want to leave';\n      }\n      return '';\n    }\n  }\n\n  function showModal(location: string): void {\n    setOpenModal(true);\n    setNextLocation(location);\n  }\n\n  function closeModal() {\n    setOpenModal(false);\n  }\n\n  function handleBlockedNavigation(location: Location | any): boolean {\n    if (!confirmNavigation) {\n      showModal(location.pathname);\n      return false;\n    }\n    return true;\n  }\n  function handleConfirm(): void {\n    closeModal();\n    if (nextLocation) {\n      setConfirmNavigation(true);\n    }\n  }\n\n  return (\n    <>\n      <Prompt when={when} message={handleBlockedNavigation} />\n      <ConfirmModal\n        open={openModal}\n        onCancel={closeModal}\n        onSubmit={handleConfirm}\n        text={message}\n        icon={<Icon name='warning-contained' />}\n        statusType='warning'\n        confirmBtnText={confirmBtnText}\n        title='Are you sure'\n      />\n    </>\n  );\n}\n\nexport default RouteLeavingGuard;\n","import RouteLeavingGuard from './RouteLeavingGuard';\n\nexport * from './RouteLeavingGuard.d';\n\nexport default RouteLeavingGuard;\n","import React from 'react';\n\nimport { INoteTooltipProps } from '../NotesTab/types';\n\nfunction NoteTooltip({ children }: INoteTooltipProps) {\n  const ref = React.useRef<any>(null);\n  const [mounted, setMounted] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (!mounted) {\n      setMounted(true);\n    } else {\n      const parentNode: HTMLDivElement =\n        ref.current.parentNode.parentNode.parentNode;\n      if (parentNode.id !== 'notes-toolbar-popover') {\n        parentNode.id = 'notes-toolbar-popover';\n      }\n    }\n  }, [mounted]);\n\n  return <div ref={ref}>{children}</div>;\n}\n\nexport default NoteTooltip;\n","import React from 'react';\nimport classNames from 'classnames';\nimport Editor from 'rich-markdown-editor';\nimport moment from 'moment';\nimport { useModel } from 'hooks';\n\nimport { Tooltip } from '@material-ui/core';\n\nimport { Button, Icon, Text } from 'components/kit';\nimport NotificationContainer from 'components/NotificationContainer/NotificationContainer';\nimport Spinner from 'components/kit/Spinner';\nimport RouteLeavingGuard from 'components/RouteLeavingGuard';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\nimport { RichEditorThemeColors } from 'config/colors/colors';\n\nimport * as analytics from 'services/analytics';\nimport notesModel from 'services/models/notes/notesModel';\n\nimport { INoteReqBody } from 'types/services/models/notes/notes';\n\nimport NoteTooltip from './NoteTooltip';\nimport { IRunDetailNotesTabProps } from './types';\n\nimport './RunDetailNotesTab.scss';\n\nfunction RunDetailNotesTab({\n  runHash,\n}: IRunDetailNotesTabProps): React.FunctionComponentElement<React.ReactNode> {\n  const { isLoading, noteData, notifyData } = useModel(notesModel)!;\n  const [value, setValue] = React.useState<string>('');\n  const [saveDisabled, setSaveDisabled] = React.useState<boolean>(true);\n  const [theme, setTheme] = React.useState<null | {}>(null);\n  const editorRef = React.useRef<Editor | any>(null);\n\n  React.useEffect(() => {\n    notesModel.initialize(runHash);\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.notes.tabView);\n\n    return () => {\n      notesModel.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    if (editorRef.current) {\n      setValue(noteData?.id ? noteData?.content : '');\n      setTheme({\n        ...editorRef.current?.theme(),\n        ...RichEditorThemeColors,\n      });\n    }\n  }, [noteData]);\n\n  // CRUD handlers\n  const onNoteSave = React.useCallback((): void => {\n    setSaveDisabled(true);\n    if (noteData?.id) {\n      onNoteUpdate();\n    } else {\n      notesModel.onNoteCreate(runHash, {\n        content: editorRef.current.value(),\n      } as INoteReqBody);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [noteData?.id, runHash]);\n\n  const onNoteUpdate = React.useCallback((): void => {\n    notesModel.onNoteUpdate(runHash, {\n      content: editorRef.current.value(),\n    } as INoteReqBody);\n  }, [runHash]);\n\n  const onNoteChange = React.useCallback(\n    (currentVal: () => string): void => {\n      const isSaveDisabled: boolean = value === currentVal();\n      if (saveDisabled !== isSaveDisabled) {\n        setSaveDisabled(isSaveDisabled);\n      }\n    },\n    [saveDisabled, value],\n  );\n\n  return (\n    <section className='RunDetailNotesTab'>\n      <RouteLeavingGuard when={!saveDisabled} />\n      <div\n        className={classNames('RunDetailNotesTab__Editor', {\n          isLoading,\n        })}\n      >\n        <div className='RunDetailNotesTab__Editor__actionPanel'>\n          <div className='RunDetailNotesTab__Editor__actionPanel__info'>\n            {noteData?.created_at && (\n              <Tooltip title='Created at'>\n                <div className='RunDetailNotesTab__Editor__actionPanel__info-field'>\n                  <Icon name='calendar' />\n                  <Text tint={70}>\n                    {`${moment\n                      .utc(noteData?.created_at)\n                      .local()\n                      .format('YYYY-MM-DD HH:mm A')}`}\n                  </Text>\n                </div>\n              </Tooltip>\n            )}\n            {noteData?.updated_at && (\n              <Tooltip title='Updated at'>\n                <div className='RunDetailNotesTab__Editor__actionPanel__info-field'>\n                  <Icon name='time' />\n                  <Text tint={70}>\n                    {`${moment\n                      .utc(noteData?.updated_at)\n                      .local()\n                      .format('YYYY-MM-DD HH:mm A')}`}\n                  </Text>\n                </div>\n              </Tooltip>\n            )}\n          </div>\n          <Tooltip title='Save Note'>\n            <div>\n              <Button\n                disabled={saveDisabled || isLoading}\n                variant='contained'\n                size='small'\n                onClick={onNoteSave}\n              >\n                Save\n              </Button>\n            </div>\n          </Tooltip>\n        </div>\n        <Editor\n          ref={editorRef}\n          className='RunDetailNotesTab__Editor__container'\n          value={value}\n          placeholder='Leave your Note'\n          theme={theme || editorRef.current?.theme()}\n          disableExtensions={['table', 'image', 'container_notice']}\n          tooltip={({ children }) => {\n            return <NoteTooltip>{children}</NoteTooltip>;\n          }}\n          onChange={onNoteChange}\n        />\n        {isLoading && <Spinner />}\n      </div>\n      {notifyData!.length > 0 && (\n        <NotificationContainer\n          handleClose={notesModel.onNoteNotificationDelete}\n          data={notifyData!}\n        />\n      )}\n    </section>\n  );\n}\n\nRunDetailNotesTab.displayName = 'RunDetailNotesTab';\n\nexport default React.memo(RunDetailNotesTab);\n","import NotesTab from './RunDetailNotesTab';\n\nexport default NotesTab;\n","import React from 'react';\n\nimport { Dialog } from '@material-ui/core';\n\nimport { Button, Text, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IConfirmModalProps } from 'types/components/ConfirmModal/ConfirmModal';\n\nimport './ConfirmModal.scss';\n\nfunction ConfirmModal(\n  props: IConfirmModalProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <Dialog\n        open={props.open}\n        onClose={props.onCancel}\n        aria-labelledby='dialog-title'\n        aria-describedby='dialog-description'\n        PaperProps={{\n          elevation: 10,\n        }}\n        className={`ConfirmModal ConfirmModal__${props.statusType}`}\n      >\n        <div className='ConfirmModal__Body'>\n          <Button\n            size='small'\n            className='ConfirmModal__Close__Icon'\n            color='secondary'\n            withOnlyIcon\n            onClick={props.onCancel}\n          >\n            <Icon name='close' />\n          </Button>\n\n          <div className='ConfirmModal__Title__Container'>\n            <div className='ConfirmModal__Icon'>{props.icon}</div>\n            {props.title && (\n              <Text size={16} tint={100} component='h4' weight={600}>\n                {props.title}\n              </Text>\n            )}\n          </div>\n\n          <div>\n            {props.description && (\n              <Text\n                className='ConfirmModal__description'\n                weight={400}\n                component='p'\n                id='dialog-description'\n              >\n                {props.description}\n              </Text>\n            )}\n\n            <div>\n              {props.text && (\n                <Text\n                  className='ConfirmModal__text'\n                  weight={400}\n                  component='p'\n                  size={14}\n                  id='dialog-description'\n                >\n                  {props.text || ''}\n                </Text>\n              )}\n              {props.children && props.children}\n            </div>\n          </div>\n        </div>\n\n        <div className='ConfirmModal__Footer'>\n          <Button\n            onClick={props.onCancel}\n            className='ConfirmModal__CancelButton'\n          >\n            {props.cancelBtnText}\n          </Button>\n          <Button\n            onClick={props.onSubmit}\n            color='primary'\n            variant='contained'\n            className='ConfirmModal__ConfirmButton'\n            autoFocus\n          >\n            {props.confirmBtnText}\n          </Button>\n        </div>\n      </Dialog>\n    </ErrorBoundary>\n  );\n}\n\nConfirmModal.defaultProps = {\n  confirmBtnText: 'Confirm',\n  cancelBtnText: 'Cancel',\n  statusType: 'info',\n};\n\nConfirmModal.displayName = 'ConfirmModal';\n\nexport default React.memo<IConfirmModalProps>(ConfirmModal);\n"],"sourceRoot":""}