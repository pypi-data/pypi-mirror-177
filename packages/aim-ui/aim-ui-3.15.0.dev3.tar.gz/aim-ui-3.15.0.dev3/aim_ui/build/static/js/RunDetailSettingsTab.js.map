{"version":3,"sources":["pages/RunDetail/RunDetailSettingsTab/RunNameAndDescriptionCard.tsx","pages/RunDetail/RunDetailSettingsTab/RunDetailSettingsTab.tsx","components/ConfirmModal/ConfirmModal.tsx"],"names":["RunNameAndDescriptionCard","runHash","defaultName","defaultDescription","isArchived","formik","useFormik","initialValues","name","description","onSubmit","_","noop","validationSchema","yup","required","values","errors","touched","setFieldValue","setFieldTouched","onChange","e","fieldName","target","value","then","React","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","settings","tabView","ErrorBoundary","className","component","weight","size","tint","Button","onClick","runDetailAppModel","editRunNameAndDescription","disabled","isEmpty","variant","color","TextField","error","helperText","label","multiline","type","memo","RunDetailSettingsTab","history","useHistory","useState","openDeleteModal","setOpenDeleteModal","title","btnTooltip","btnText","onAction","archiveRun","btnProps","classNames","RunDetailSettingsTab__actionCardsCnt__btn__archive","RunDetailSettingsTab__actionCardsCnt__btn__unarchive","ConfirmModal","open","onCancel","deleteRun","push","text","icon","statusType","confirmBtnText","props","onClose","aria-labelledby","aria-describedby","PaperProps","elevation","withOnlyIcon","id","children","cancelBtnText","autoFocus","defaultProps","displayName"],"mappings":"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","file":"static/js/RunDetailSettingsTab.js?version=1abe62fd0f7dca6e4902","sourcesContent":["import React, { memo } from 'react';\nimport * as yup from 'yup';\nimport _ from 'lodash-es';\nimport { useFormik } from 'formik';\n\nimport { Button, TextField } from '@material-ui/core';\n\nimport { Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\nimport * as analytics from 'services/analytics';\n\nimport { IRunNameAndDescriptionCardProps } from './types';\n\nimport './RunDetailSettingsTab.scss';\n\nfunction RunNameAndDescriptionCard({\n  runHash,\n  defaultName,\n  defaultDescription,\n  isArchived,\n}: IRunNameAndDescriptionCardProps): React.FunctionComponentElement<React.ReactNode> {\n  const formik = useFormik({\n    initialValues: {\n      name: defaultName ?? '',\n      description: defaultDescription ?? '',\n    },\n    onSubmit: _.noop,\n    validationSchema: yup.object({\n      name: yup.string().required('Name is a required field'),\n    }),\n  });\n\n  const { values, errors, touched, setFieldValue, setFieldTouched } = formik;\n\n  function onChange(e: React.ChangeEvent<any>, fieldName: string) {\n    setFieldValue(fieldName, e?.target?.value, true).then(() => {\n      setFieldTouched(fieldName, true);\n    });\n  }\n\n  React.useEffect(() => {\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.tabView);\n  }, []);\n\n  function onSave() {\n    runDetailAppModel.editRunNameAndDescription(\n      runHash,\n      values.name,\n      values.description,\n      isArchived,\n    );\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className='NameAndDescriptionEditCard'>\n        <div className='NameAndDescriptionEditCard__header'>\n          <Text component='h4' weight={600} size={14} tint={100}>\n            Run Properties\n          </Text>\n          <Button\n            onClick={onSave}\n            disabled={\n              !_.isEmpty(errors) ||\n              (values.name === defaultName &&\n                values.description === defaultDescription)\n            }\n            variant='contained'\n            color='primary'\n          >\n            Save\n          </Button>\n        </div>\n        <div className='NameAndDescriptionEditCard__content'>\n          <div className='NameAndDescriptionEditCard__content__nameBox'>\n            <TextField\n              variant='outlined'\n              className='TextField__OutLined__Medium NameAndDescriptionEditCard__content__nameBox__nameInput'\n              value={values.name}\n              onChange={(e) => onChange(e, 'name')}\n              error={!!(touched.name && errors.name)}\n              helperText={touched.name && errors.name}\n              label='Name'\n            />\n          </div>\n          <div className='NameAndDescriptionEditCard__content__descriptionBox'>\n            <TextField\n              variant='outlined'\n              multiline\n              label='Description'\n              type='textarea'\n              className='NameAndDescriptionEditCard__content__descriptionBox__descriptionInput'\n              value={values.description}\n              onChange={(e) => onChange(e, 'description')}\n              error={!!(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunNameAndDescriptionCard);\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\n\nimport ConfirmModal from 'components/ConfirmModal/ConfirmModal';\nimport { ActionCard, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\nimport * as analytics from 'services/analytics';\n\nimport RunNameAndDescriptionCard from './RunNameAndDescriptionCard';\nimport { IRunDetailSettingsTabProps } from './types';\n\nimport './RunDetailSettingsTab.scss';\n\nfunction RunDetailSettingsTab({\n  runHash,\n  isArchived,\n  defaultName,\n  defaultDescription,\n}: IRunDetailSettingsTabProps): React.FunctionComponentElement<React.ReactNode> {\n  const history = useHistory();\n  const [openDeleteModal, setOpenDeleteModal] = React.useState<boolean>(false);\n\n  function onRunArchive() {\n    analytics.trackEvent(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.archiveRun,\n    );\n    runDetailAppModel.archiveRun(runHash, !isArchived);\n  }\n\n  function onRunDelete() {\n    analytics.trackEvent(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.deleteRun,\n    );\n    runDetailAppModel.deleteRun(runHash, () => {\n      history.push('/runs');\n    });\n  }\n\n  function handleDeleteModalOpen() {\n    setOpenDeleteModal(true);\n  }\n\n  function handleDeleteModalClose() {\n    setOpenDeleteModal(false);\n  }\n\n  React.useEffect(() => {\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.tabView);\n  }, []);\n  return (\n    <ErrorBoundary>\n      <div className='RunDetailSettingsTab'>\n        <div className='RunDetailSettingsTab__actionCardsCnt'>\n          <RunNameAndDescriptionCard\n            defaultName={defaultName ?? ''}\n            defaultDescription={defaultDescription ?? ''}\n            runHash={runHash}\n            isArchived={isArchived}\n          />\n          <ActionCard\n            title={isArchived ? 'Unarchive Run' : 'Archive Run'}\n            description={\n              isArchived\n                ? 'Unarchive runs will appear in search both on Dashboard and Explore.'\n                : 'Archived runs will not appear in search both on Dashboard and Explore.'\n            }\n            btnTooltip={isArchived ? 'Unarchive' : 'Archive'}\n            btnText={isArchived ? 'Unarchive' : 'Archive'}\n            onAction={onRunArchive}\n            btnProps={{\n              variant: 'outlined',\n              className: classNames({\n                RunDetailSettingsTab__actionCardsCnt__btn__archive: !isArchived,\n                RunDetailSettingsTab__actionCardsCnt__btn__unarchive:\n                  isArchived,\n              }),\n            }}\n          />\n\n          <ActionCard\n            title='Delete Run'\n            description='Once you delete a run, there is no going back. Please be certain.'\n            btnTooltip='Delete Run'\n            btnText='Delete'\n            onAction={handleDeleteModalOpen}\n            btnProps={{\n              variant: 'contained',\n              className: 'RunDetailSettingsTab__actionCardsCnt__btn__delete',\n            }}\n          />\n        </div>\n        <ConfirmModal\n          open={openDeleteModal}\n          onCancel={handleDeleteModalClose}\n          onSubmit={onRunDelete}\n          text='Are you sure you want to delete this run?'\n          icon={<Icon name='delete' />}\n          title='Delete run'\n          statusType='error'\n          confirmBtnText='Delete'\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunDetailSettingsTab);\n","import React from 'react';\n\nimport { Dialog } from '@material-ui/core';\n\nimport { Button, Text, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IConfirmModalProps } from 'types/components/ConfirmModal/ConfirmModal';\n\nimport './ConfirmModal.scss';\n\nfunction ConfirmModal(\n  props: IConfirmModalProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <Dialog\n        open={props.open}\n        onClose={props.onCancel}\n        aria-labelledby='dialog-title'\n        aria-describedby='dialog-description'\n        PaperProps={{\n          elevation: 10,\n        }}\n        className={`ConfirmModal ConfirmModal__${props.statusType}`}\n      >\n        <div className='ConfirmModal__Body'>\n          <Button\n            size='small'\n            className='ConfirmModal__Close__Icon'\n            color='secondary'\n            withOnlyIcon\n            onClick={props.onCancel}\n          >\n            <Icon name='close' />\n          </Button>\n\n          <div className='ConfirmModal__Title__Container'>\n            <div className='ConfirmModal__Icon'>{props.icon}</div>\n            {props.title && (\n              <Text size={16} tint={100} component='h4' weight={600}>\n                {props.title}\n              </Text>\n            )}\n          </div>\n\n          <div>\n            {props.description && (\n              <Text\n                className='ConfirmModal__description'\n                weight={400}\n                component='p'\n                id='dialog-description'\n              >\n                {props.description}\n              </Text>\n            )}\n\n            <div>\n              {props.text && (\n                <Text\n                  className='ConfirmModal__text'\n                  weight={400}\n                  component='p'\n                  size={14}\n                  id='dialog-description'\n                >\n                  {props.text || ''}\n                </Text>\n              )}\n              {props.children && props.children}\n            </div>\n          </div>\n        </div>\n\n        <div className='ConfirmModal__Footer'>\n          <Button\n            onClick={props.onCancel}\n            className='ConfirmModal__CancelButton'\n          >\n            {props.cancelBtnText}\n          </Button>\n          <Button\n            onClick={props.onSubmit}\n            color='primary'\n            variant='contained'\n            className='ConfirmModal__ConfirmButton'\n            autoFocus\n          >\n            {props.confirmBtnText}\n          </Button>\n        </div>\n      </Dialog>\n    </ErrorBoundary>\n  );\n}\n\nConfirmModal.defaultProps = {\n  confirmBtnText: 'Confirm',\n  cancelBtnText: 'Cancel',\n  statusType: 'info',\n};\n\nConfirmModal.displayName = 'ConfirmModal';\n\nexport default React.memo<IConfirmModalProps>(ConfirmModal);\n"],"sourceRoot":""}