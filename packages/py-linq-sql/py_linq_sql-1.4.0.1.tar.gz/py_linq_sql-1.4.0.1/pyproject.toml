[tool.poetry]
name = "py-linq-sql"
version = "1.4.0.1"
description = "A Python module used for interacting with sql database using LINQ syntax."
license = "EUPL v1.2"
authors = ["CHOSSON Ulysse <ulysse.chosson@obspm.fr>"]
maintainers = ["CHOSSON Ulysse <ulysse.chosson@obspm.fr>", "MARTIN Pierre-Yves <pierre-yves.martin@obspm.fr>"]
readme = "README.md"
repository = "https://gitlab.obspm.fr/exoplanet/py-linq-sql"
documentation = "https://py-linq-sql.readthedocs.io/en/latest/"
homepage = "https://gitlab.obspm.fr/exoplanet/py-linq-sql"
keywords = ["linq", "py-linq", "sql", "database", "requests"]


[tool.poetry.dependencies]
python = ">=3.10 <4.0.0"
rich = "^12.6.0"
py-linq = "^1.3.0"
dotmap = "^1.3.30"
psycopg = "^3.1.4"
toml = "^0.10.2"
pyyaml = "^6.0"
types-toml = "^0.10.8"
types-pyyaml = "^6.0.12.1"
six = "^1.16.0"


[tool.poetry.group.dev.dependencies]
pytest = "7.0.0"
pytest-sugar = "0.9.5"
pytest-pudb = "^0.7.0"
assertpy = "^1.1"
pytest-postgresql = "^4.1.1"
tmp-connection-psql = "^1.1.0"
psycopg-pool = "3.1.3"
mpmath = "^1.2.1"
numpy = "^1.23.4"
xdoctest = "^1.1.0"
isort = "^5.10.1"
black = "^22.10.0"
pytest-cov = "^4.0.0"
mdx-truly-sane-lists = "^1.3"
mkdocs-autorefs = "0.4.1"
mkdocs = "1.4.0"
mkdocstrings = {version = "0.19.0", extras = ["python-legacy"]}
sniffio = "1.2.0"
pre-commit = "^2.20.0"
codespell = "^2.2.2"
dlint = "^0.13.0"
bandit = "^1.7.4"
pydocstyle = "^6.1.1"
mypy = "^0.982"
sqlfluff = "^1.4.1"
pylint = "^2.15.5"
pygments = "2.12.0"
plerr = "^3.0.0"
flake8 = "^5.0.4"
flake8-commas = "^2.1.0"
flake8-bandit = "^4.1.1"
import-linter = "^1.4.0"
flake8-eradicate = "^1.4.0"
pep8-naming = "^0.13.2"
wrapt = "^1.14.1"
strenum = "^0.4.8"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
addopts = "--xdoctest -xl"

[tool.isort]
profile = "black"
known_pytest = ["pytest", "pytest_postgresql"]
sections = ["FUTURE", "PYTEST", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_future = "Future imports"
import_heading_pytest = "Pytest imports"
import_heading_stdlib = "Standard imports"
import_heading_thirdparty = "Third party imports"
import_heading_firstparty = "First party imports"
import_heading_localfolder = "Local imports"

[tool.importlinter]
root_package = "py_linq_sql"

[tools.importlinter.contracts]
name = "Py-linq-sql layers contract"
type = "layers"
layers=["sql_enumerable",
    "build_request",
    "utils",
    "exception"]
containers=["py_linq_sql"]

[tool.bandit]
targets = ["py_linq_sql/"]
skips = ["B608", "B101", "B404"]

[tool.pydocstyle]
match = '((?!test_).)*\.py'

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# mypy per-module options:

[[tool.mypy.overrides]]
module = ["dotmap", "py_linq", "strenum"]
ignore_missing_imports = true

[tool.sqlfluff.core]
dialect = "postgres"

[tool.pylint.message_control]
output-format = "colorized"
msg-template = "'{msg_id}: in the file: {path}, at line: {line:}, at column: {column}, in objects: {obj} -> {msg}' py_linq_sql/"

[tool.pylint.miscellaneous]
notes = ["FIXME","XXX"]

[tool.pylinqsql]
whitelist = ["toto",
    "objects",
    "satellite",
    "relational_objects",
    "relational_satellite",
    "relational_one_column_objects",
    "relational_array_column_objects",
    "mixed_objects"]
