# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['urlstd']

package_data = \
{'': ['*']}

install_requires = \
['icupy>=0.11.0']

setup_kwargs = {
    'name': 'urlstd',
    'version': '2021.10.25.post2',
    'description': 'Python implementation of the WHATWG URL Standard',
    'long_description': '# urlstd\n\n[![PyPI](https://img.shields.io/pypi/v/urlstd)](https://pypi.org/project/urlstd/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/urlstd)](https://pypi.org/project/urlstd/)\n[![PyPI - License](https://img.shields.io/pypi/l/urlstd)](https://pypi.org/project/urlstd/)\n[![CI](https://github.com/miute/urlstd/actions/workflows/main.yml/badge.svg)](https://github.com/miute/urlstd/actions/workflows/main.yml)\n[![codecov](https://codecov.io/gh/miute/urlstd/branch/main/graph/badge.svg?token=XJGM09H5TS)](https://codecov.io/gh/miute/urlstd)\n\n`urlstd` is a Python implementation of the WHATWG [URL Standard](https://url.spec.whatwg.org/).\n\nThis library provides `URL` class, `URLSearchParams` class, and low-level APIs that comply with the URL specification.\n\n*Note: The latest release of urlstd is implemented based on the URL specification commit [f787850](https://github.com/whatwg/url/commit/f787850695969d51caaa5c290f2c2e050e083638).*\n\n## Supported APIs\n\n- [URL class](https://url.spec.whatwg.org/#url-class)\n  - class urlstd.parse.`URL(url: str, base: Optional[str] = None)`\n    - [href](https://url.spec.whatwg.org/#dom-url-href): `readonly property href: str`\n    - [origin](https://url.spec.whatwg.org/#dom-url-origin): `readonly property origin: str`\n    - [protocol](https://url.spec.whatwg.org/#dom-url-protocol): `property protocol: str`\n    - [username](https://url.spec.whatwg.org/#dom-url-username): `property username: str`\n    - [password](https://url.spec.whatwg.org/#dom-url-password): `property password: str`\n    - [host](https://url.spec.whatwg.org/#dom-url-host): `property host: str`\n    - [hostname](https://url.spec.whatwg.org/#dom-url-hostname): `property hostname: str`\n    - [port](https://url.spec.whatwg.org/#dom-url-port): `property port: str`\n    - [pathname](https://url.spec.whatwg.org/#dom-url-pathname): `property pathname: str`\n    - [search](https://url.spec.whatwg.org/#dom-url-search): `property search: str`\n    - [searchParams](https://url.spec.whatwg.org/#dom-url-searchparams): `readonly property search_params: URLSearchParams`\n    - [hash](https://url.spec.whatwg.org/#dom-url-hash): `property hash: str`\n\n- [URLSearchParams class](https://url.spec.whatwg.org/#interface-urlsearchparams)\n  - class urlstd.parse.`URLSearchParams(init: Optional[Union[str, Sequence[Sequence[Union[str, int, float]]], Dict[str, Union[str, int, float]], URLRecord, URLSearchParams]] = None)`\n    - [append](https://url.spec.whatwg.org/#dom-urlsearchparams-append): `append(name: str, value: Union[str, int, float]) -> None`\n    - [delete](https://url.spec.whatwg.org/#dom-urlsearchparams-delete): `delete(name: str) -> None`\n    - [get](https://url.spec.whatwg.org/#dom-urlsearchparams-get): `get(name: str) -> Optional[str]`\n    - [getAll](https://url.spec.whatwg.org/#dom-urlsearchparams-getall): `get_all(name: str) -> Tuple[str, ...]`\n    - [has](https://url.spec.whatwg.org/#dom-urlsearchparams-has): `has(name: str) -> bool`\n    - [set](https://url.spec.whatwg.org/#dom-urlsearchparams-set): `set(name: str, value: Union[str, int, float]) -> None`\n    - [sort](https://url.spec.whatwg.org/#dom-urlsearchparams-sort): `sort() -> None`\n\n- Low-level APIs\n\n  - [URL parser](https://url.spec.whatwg.org/#concept-url-parser)\n    - urlstd.parse.`parse_url(urlstring: str, base: str = None, encoding: str = "utf-8") -> URLRecord`\n\n  - [basic URL parser](https://url.spec.whatwg.org/#concept-basic-url-parser)\n    - class urlstd.parse.`BasicURLParser`\n      - classmethod `parse(urlstring: str, base: Optional[URLRecord] = None, encoding: str = "utf-8", url: Optional[URLRecord] = None, state_override: Optional[URLParserState] = None) -> URLRecord`\n\n  - [URL record](https://url.spec.whatwg.org/#concept-url)\n    - class urlstd.parse.`URLRecord`\n      - [scheme](https://url.spec.whatwg.org/#concept-url-scheme): `property scheme: str = ""`\n      - [username](https://url.spec.whatwg.org/#concept-url-username): `property username: str = ""`\n      - [password](https://url.spec.whatwg.org/#concept-url-password): `property password: str = ""`\n      - [host](https://url.spec.whatwg.org/#concept-url-host): `property host: Optional[Union[str, int, Tuple[int, ...]]] = None`\n      - [port](https://url.spec.whatwg.org/#concept-url-port): `property port: Optional[int] = None`\n      - [path](https://url.spec.whatwg.org/#concept-url-path): `property path: Union[List[str], str] = []`\n      - [query](https://url.spec.whatwg.org/#concept-url-query): `property query: Optional[str] = None`\n      - [fragment](https://url.spec.whatwg.org/#concept-url-fragment): `property fragment: Optional[str] = None`\n      - [origin](https://url.spec.whatwg.org/#concept-url-origin): `readonly property origin: Optional[Origin]`\n      - [is special](https://url.spec.whatwg.org/#is-special): `is_special() -> bool`\n      - [is not special](https://url.spec.whatwg.org/#is-not-special): `is_not_special() -> bool`\n      - [includes credentials](https://url.spec.whatwg.org/#include-credentials): `includes_credentials() -> bool`\n      - [has an opaque path](https://url.spec.whatwg.org/#url-opaque-path): `has_opaque_path() -> bool`\n      - [cannot have a username/password/port](https://url.spec.whatwg.org/#cannot-have-a-username-password-port): `cannot_have_username_password_port() -> bool`\n      - [URL serializer](https://url.spec.whatwg.org/#concept-url-serializer): `serialize_url(exclude_fragment: bool = False) -> str`\n      - [host serializer](https://url.spec.whatwg.org/#concept-host-serializer): `serialize_host() -> str`\n      - [URL path serializer](https://url.spec.whatwg.org/#url-path-serializer): `serialize_path() -> str`\n\n  - [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii)\n    - urlstd.parse.IDNA.`domain_to_ascii(domain: str, be_strict: bool = False) -> str`\n\n  - [host parser](https://url.spec.whatwg.org/#concept-host-parser)\n    - urlstd.parse.Host.`parse(host: str, is_not_special: bool = False) -> Union[str, int, Tuple[int, ...]]`\n\n  - [host serializer](https://url.spec.whatwg.org/#concept-host-serializer)\n    - urlstd.parse.Host.`serialize(host: Union[str, int, Sequence[int]]) -> str`\n\n  - [percent-decode a string](https://url.spec.whatwg.org/#string-percent-decode)\n    - urlstd.parse.`string_percent_decode(s: str) -> bytes`\n\n  - [percent-encode after encoding](https://url.spec.whatwg.org/#string-percent-encode-after-encoding)\n    - urlstd.parse.`string_percent_encode(s: str, safe: str, encoding: str = "utf-8", space_as_plus: bool = False) -> str`\n\n  - [application/x-www-form-urlencoded parser](https://url.spec.whatwg.org/#concept-urlencoded-parser)\n    - urlstd.parse.`parse_qsl(query: bytes) -> List[Tuple[str, str]]`\n\n  - [application/x-www-form-urlencoded serializer](https://url.spec.whatwg.org/#concept-urlencoded-serializer)\n    - urlstd.parse.`urlencode(query: Sequence[Tuple[str, str]], encoding: str = "utf-8") -> str`\n\n- Compatibility with standard library `urllib`\n  - urlstd.parse.`urlparse(urlstring: str, base: str = None, encoding: str = "utf-8", allow_fragments: bool = True) -> urllib.parse.ParseResult`\n\n    `urlstd.parse.urlparse()` ia an alternative to `urllib.parse.urlparse()`.\n    Parses a string representation of a URL using the basic URL parser, and returns `urllib.parse.ParseResult`.\n\n## Basic Usage\n\nTo parse a string into a `URL` with using a base URL:\n\n```python\nfrom urlstd.parse import URL\nurl = URL(\'?ï¬ƒ&ðŸŒˆ\', \'http://example.org\')\nurl  # â†’ URL(href=\'http://example.org/?%EF%AC%83&%F0%9F%8C%88\', origin=\'http://example.org\', protocol=\'http:\', username=\'\', password=\'\', host=\'example.org\', hostname=\'example.org\', port=\'\', pathname=\'/\', search=\'?%EF%AC%83&%F0%9F%8C%88\', hash=\'\')\nurl.search  # â†’ \'?%EF%AC%83&%F0%9F%8C%88\'\nparams = url.search_params\nparams  # â†’ URLSearchParams([(\'ï¬ƒ\', \'\'), (\'ðŸŒˆ\', \'\')])\nparams.sort()\nparams  # â†’ URLSearchParams([(\'ðŸŒˆ\', \'\'), (\'ï¬ƒ\', \'\')])\nurl.search  # â†’ \'?%F0%9F%8C%88=&%EF%AC%83=\'\nstr(url)  # â†’ \'http://example.org/?%F0%9F%8C%88=&%EF%AC%83=\'\n```\n\nTo parse a string into a `urllib.parse.ParseResult` with using a base URL:\n\n```python\nimport html\nfrom urllib.parse import unquote\nfrom urlstd.parse import urlparse\npr = urlparse(\'?aÃ¿b\', \'http://example.org/foo/\', encoding=\'utf-8\')\npr  # â†’ ParseResult(scheme=\'http\', netloc=\'example.org\', path=\'/foo/\', params=\'\', query=\'a%C3%BFb\', fragment=\'\')\nunquote(pr.query)  # â†’ \'aÃ¿b\'\npr = urlparse(\'?aÃ¿b\', \'http://example.org/foo/\', encoding=\'windows-1251\')\npr  # â†’ ParseResult(scheme=\'http\', netloc=\'example.org\', path=\'/foo/\', params=\'\', query=\'a%26%23255%3Bb\', fragment=\'\')\nunquote(pr.query, encoding=\'windows-1251\')  # â†’ \'a&#255;b\'\nhtml.unescape(\'a&#255;b\')  # â†’ \'aÃ¿b\'\npr = urlparse(\'?aÃ¿b\', \'http://example.org/foo/\', encoding=\'windows-1252\')\npr  # â†’ ParseResult(scheme=\'http\', netloc=\'example.org\', path=\'/foo/\', params=\'\', query=\'a%FFb\', fragment=\'\')\nunquote(pr.query, encoding=\'windows-1252\')  # â†’ \'aÃ¿b\'\n```\n\n## Logging\n\n`urlstd` uses standard library `logging` for [validation error](https://url.spec.whatwg.org/#validation-error).\nChange the logger log level of urlstd if needed:\n\n```python\nlogging.getLogger(\'urlstd\').setLevel(logging.ERROR)\n```\n\n## Dependencies\n\n- [icupy](https://pypi.org/project/icupy/) >= 0.11.0 (pre-built packages are [available](https://github.com/miute/icupy/releases))\n  - icupy requirements:\n    - [ICU4C](https://github.com/unicode-org/icu/releases) ([ICU - International Components for Unicode](https://icu.unicode.org/)) - latest version recommended\n    - C++17 compatible compiler (see [supported compilers](https://github.com/pybind/pybind11#supported-compilers))\n    - [CMake](https://cmake.org/) >= 3.7\n\n## Installation\n\n1. Configuring environment variables for icupy (ICU):\n    - Windows:\n      - Set the `ICU_ROOT` environment variable to the root of the ICU installation (default is `C:\\icu`).\n        For example, if the ICU is located in `C:\\icu4c`:\n\n        ```bat\n        set ICU_ROOT=C:\\icu4c\n        ```\n\n        or in PowerShell:\n\n        ```bat\n        $env:ICU_ROOT = "C:\\icu4c"\n        ```\n\n      - To verify settings using *icuinfo (64 bit)*:\n\n        ```bat\n        %ICU_ROOT%\\bin64\\icuinfo\n        ```\n\n        or in PowerShell:\n\n        ```bat\n        & $env:ICU_ROOT\\bin64\\icuinfo\n        ```\n\n    - Linux/POSIX:\n      - If the ICU is located in a non-regular place, set the `PKG_CONFIG_PATH` and `LD_LIBRARY_PATH` environment variables.\n        For example, if the ICU is located in `/usr/local`:\n\n        ```bash\n        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\n        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n        ```\n\n      - To verify settings using *pkg-config*:\n\n        ```bash\n        $ pkg-config --cflags --libs icu-uc\n        -I/usr/local/include -L/usr/local/lib -licuuc -licudata\n        ```\n\n2. Installing from PyPI:\n\n    ```bash\n    pip install urlstd\n    ```\n\n## Running Tests\n\nInstall dependencies:\n\n```bash\npip install tox\n```\n\nTo run tests and generate a report:\n\n```bash\ngit clone https://github.com/miute/urlstd.git\ncd urlstd\ntox -e wpt\n```\n\nSee result: [tests/wpt/report.html](https://htmlpreview.github.io/?https://github.com/miute/urlstd/blob/main/tests/wpt/report.html)\n\n## License\n\n[MIT License](https://github.com/miute/urlstd/blob/main/LICENSE).\n',
    'author': 'Tetsuya Miura',
    'author_email': 'miute.dev@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/miute/urlstd',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
