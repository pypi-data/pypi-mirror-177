{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\"; // Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\n\nconst labelDiv = document.body.appendChild(document.createElement(\"div\"));\nconst label = labelDiv.appendChild(document.createTextNode(\"\"));\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\")); // const button = span.appendChild(document.createElement(\"button\"))\n// button.textContent = \"Click Me!\"\n// Add a click handler to our button. It will send data back to Streamlit.\n// let selectedIndex = 0\n// Streamlit.setComponentValue(selectedIndex)\n// let numClicks = 0\n// let isFocused = false\n// button.onclick = function(): void {\n//   // Increment numClicks, and pass the new value back to\n//   // Streamlit via `Streamlit.setComponentValue`.\n//   numClicks += 1\n//   Streamlit.setComponentValue(numClicks)\n// }\n// button.onfocus = function(): void {\n//   isFocused = true\n// }\n// button.onblur = function(): void {\n//   isFocused = false\n// }\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  let images = data.args[\"images\"];\n  console.log(data); // console.log(images)\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  // if (data.theme) {\n  //   // Use CSS vars to style our button border. Alternatively, the theme style\n  //   // is defined in the data.theme object.\n  //   const borderStyling = `1px solid var(${\n  //     isFocused ? \"--primary-color\" : \"gray\"\n  //   })`\n  //   button.style.border = borderStyling\n  //   button.style.outline = borderStyling\n  // }\n  // Disable our button if necessary.\n  // button.disabled = data.disabled\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  // let name =\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n\n  label.textContent = data.args[\"label\"];\n\n  if (imagesDiv.childNodes.length === 0) {\n    images.forEach((image, i) => {\n      let img = imagesDiv.appendChild(document.createElement(\"img\"));\n      img.src = image;\n      img.width = 100;\n\n      img.onclick = function () {\n        Streamlit.setComponentValue(i);\n      };\n    });\n  } // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n\n\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","labelDiv","document","body","appendChild","createElement","label","createTextNode","imagesDiv","onRender","event","data","detail","images","args","console","log","textContent","childNodes","length","forEach","image","i","img","src","width","onclick","setComponentValue","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/Users/jrieke/Desktop/component-template/template-reactless/my_component/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\n\nconst labelDiv = document.body.appendChild(document.createElement(\"div\"))\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\"))\n// const button = span.appendChild(document.createElement(\"button\"))\n// button.textContent = \"Click Me!\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\n// let selectedIndex = 0\n// Streamlit.setComponentValue(selectedIndex)\n// let numClicks = 0\n// let isFocused = false\n// button.onclick = function(): void {\n//   // Increment numClicks, and pass the new value back to\n//   // Streamlit via `Streamlit.setComponentValue`.\n//   numClicks += 1\n//   Streamlit.setComponentValue(numClicks)\n// }\n\n\n// button.onfocus = function(): void {\n//   isFocused = true\n// }\n\n// button.onblur = function(): void {\n//   isFocused = false\n// }\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  let images = data.args[\"images\"]\n  console.log(data)\n  // console.log(images)\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  // if (data.theme) {\n  //   // Use CSS vars to style our button border. Alternatively, the theme style\n  //   // is defined in the data.theme object.\n  //   const borderStyling = `1px solid var(${\n  //     isFocused ? \"--primary-color\" : \"gray\"\n  //   })`\n  //   button.style.border = borderStyling\n  //   button.style.outline = borderStyling\n  // }\n\n  // Disable our button if necessary.\n  // button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  // let name =\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  label.textContent = data.args[\"label\"]\n\n  if (imagesDiv.childNodes.length === 0) {\n    images.forEach((image: string, i: number) => {\n      let img = imagesDiv.appendChild(document.createElement(\"img\"))\n      img.src = image\n      img.width = 100\n      img.onclick = function () {\n        Streamlit.setComponentValue(i)\n      }\n    })\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"AAAA,SAASA,SAAT,QAAsC,yBAAtC,C,CAEA;AACA;;AAEA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAA1B,CAAjB;AACA,MAAMC,KAAK,GAAGL,QAAQ,CAACG,WAAT,CAAqBF,QAAQ,CAACK,cAAT,CAAwB,EAAxB,CAArB,CAAd;AACA,MAAMC,SAAS,GAAGN,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAA1B,CAAlB,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASI,QAAT,CAAkBC,KAAlB,EAAsC;EACpC;EACA,MAAMC,IAAI,GAAID,KAAD,CAAmCE,MAAhD;EAEA,IAAIC,MAAM,GAAGF,IAAI,CAACG,IAAL,CAAU,QAAV,CAAb;EACAC,OAAO,CAACC,GAAR,CAAYL,IAAZ,EALoC,CAMpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;;EACAL,KAAK,CAACW,WAAN,GAAoBN,IAAI,CAACG,IAAL,CAAU,OAAV,CAApB;;EAEA,IAAIN,SAAS,CAACU,UAAV,CAAqBC,MAArB,KAAgC,CAApC,EAAuC;IACrCN,MAAM,CAACO,OAAP,CAAe,CAACC,KAAD,EAAgBC,CAAhB,KAA8B;MAC3C,IAAIC,GAAG,GAAGf,SAAS,CAACJ,WAAV,CAAsBF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAAtB,CAAV;MACAkB,GAAG,CAACC,GAAJ,GAAUH,KAAV;MACAE,GAAG,CAACE,KAAJ,GAAY,GAAZ;;MACAF,GAAG,CAACG,OAAJ,GAAc,YAAY;QACxB1B,SAAS,CAAC2B,iBAAV,CAA4BL,CAA5B;MACD,CAFD;IAGD,CAPD;EAQD,CArCmC,CAuCpC;EACA;EACA;EACA;;;EACAtB,SAAS,CAAC4B,cAAV;AACD,C,CAED;;;AACA5B,SAAS,CAAC6B,MAAV,CAAiBC,gBAAjB,CAAkC9B,SAAS,CAAC+B,YAA5C,EAA0DtB,QAA1D,E,CAEA;AACA;;AACAT,SAAS,CAACgC,iBAAV,G,CAEA;AACA;;AACAhC,SAAS,CAAC4B,cAAV"},"metadata":{},"sourceType":"module"}