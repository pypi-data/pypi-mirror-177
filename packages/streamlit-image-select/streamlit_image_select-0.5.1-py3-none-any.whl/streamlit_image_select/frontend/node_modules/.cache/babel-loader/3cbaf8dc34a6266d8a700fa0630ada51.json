{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"));\nconst label = labelDiv.appendChild(document.createTextNode(\"\"));\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\"));\nimagesDiv.classList.add(\"image-picker\");\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n\n  if (data.theme) {\n    labelDiv.style.font = data.theme.font;\n    labelDiv.style.color = data.theme.textColor;\n\n    if (data.theme.base === \"dark\") {\n      document.body.querySelectorAll(\".box, .caption\").forEach(el => {\n        el.classList.add(\"dark\");\n      });\n    } else {\n      document.body.querySelectorAll(\".box, .caption\").forEach(el => {\n        el.classList.remove(\"dark\");\n      });\n    } // TODO: Gray out the component if it's disabled. \n\n  }\n\n  label.textContent = data.args[\"label\"];\n  let images = data.args[\"images\"];\n  let captions = data.args[\"captions\"]; // console.log(captions)\n\n  if (imagesDiv.childNodes.length === 0) {\n    images.forEach((image, i) => {\n      let container = imagesDiv.appendChild(document.createElement(\"div\"));\n      let box = container.appendChild(document.createElement(\"div\"));\n      box.classList.add(\"box\");\n      let img = box.appendChild(document.createElement(\"img\"));\n      img.classList.add(\"image\");\n      img.src = image;\n\n      if (captions) {\n        let desc = container.appendChild(document.createElement(\"div\"));\n        desc.classList.add(\"caption\");\n        desc.textContent = captions[i];\n      } // TODO: Change this to use `default` instead of just 0.\n\n\n      if (i === 0) {\n        box.classList.add(\"selected\");\n        img.classList.add(\"selected\");\n      }\n\n      img.onclick = function () {\n        imagesDiv.querySelectorAll(\".selected\").forEach(el => {\n          el.classList.remove(\"selected\");\n        });\n        Streamlit.setComponentValue(i);\n        box.classList.add(\"selected\");\n        img.classList.add(\"selected\");\n      };\n    });\n  } // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n\n\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","labelDiv","document","body","appendChild","createElement","label","createTextNode","imagesDiv","classList","add","onRender","event","data","detail","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","textContent","args","images","captions","childNodes","length","image","i","container","box","img","src","desc","onclick","setComponentValue","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/Users/jrieke/Desktop/streamlit-image-select/streamlit_image_select/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\"))\nimagesDiv.classList.add(\"image-picker\")\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  if (data.theme) {\n    labelDiv.style.font = data.theme.font\n    labelDiv.style.color = data.theme.textColor\n    if (data.theme.base === \"dark\") {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.add(\"dark\")\n      })\n    } else {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.remove(\"dark\")\n      })\n    }\n\n    // TODO: Gray out the component if it's disabled. \n  }\n\n  label.textContent = data.args[\"label\"]\n  let images = data.args[\"images\"]\n  let captions = data.args[\"captions\"]\n  // console.log(captions)\n\n  if (imagesDiv.childNodes.length === 0) {\n    images.forEach((image: string, i: number) => {\n      let container = imagesDiv.appendChild(document.createElement(\"div\"))\n\n      let box = container.appendChild(document.createElement(\"div\"))\n      box.classList.add(\"box\")\n\n      let img = box.appendChild(document.createElement(\"img\"))\n      img.classList.add(\"image\")\n      img.src = image\n\n      if (captions) {\n        let desc = container.appendChild(document.createElement(\"div\"))\n        desc.classList.add(\"caption\")\n        desc.textContent = captions[i]\n      }\n\n      // TODO: Change this to use `default` instead of just 0.\n      if (i === 0) {\n        box.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n\n      img.onclick = function () {\n        imagesDiv.querySelectorAll(\".selected\").forEach((el) => {\n          el.classList.remove(\"selected\")\n        })\n        Streamlit.setComponentValue(i)\n        box.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n    })\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}