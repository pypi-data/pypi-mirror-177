{"ast":null,"code":"import{Streamlit}from\"streamlit-component-lib\";var labelDiv=document.body.appendChild(document.createElement(\"label\"));var label=labelDiv.appendChild(document.createTextNode(\"\"));var imagesDiv=document.body.appendChild(document.createElement(\"div\"));imagesDiv.classList.add(\"image-picker\");/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */function onRender(event){// Get the RenderData from the event\nvar data=event.detail;if(data.theme){labelDiv.style.font=data.theme.font;labelDiv.style.color=data.theme.textColor;if(data.theme.base===\"dark\"){document.body.querySelectorAll(\".option\").forEach(function(el){el.classList.add(\"dark\");});}else{document.body.querySelectorAll(\".option\").forEach(function(el){el.classList.remove(\"dark\");});}}label.textContent=data.args[\"label\"];var images=data.args[\"images\"];if(imagesDiv.childNodes.length===0){images.forEach(function(image,i){var imgDiv=imagesDiv.appendChild(document.createElement(\"div\"));imgDiv.classList.add(\"option\");var img=imgDiv.appendChild(document.createElement(\"img\"));img.classList.add(\"thumbnail\");img.src=image;if(i===0){imgDiv.classList.add(\"selected\");img.classList.add(\"selected\");}img.onclick=function(){imagesDiv.querySelectorAll(\".selected\").forEach(function(el){el.classList.remove(\"selected\");});Streamlit.setComponentValue(i);imgDiv.classList.add(\"selected\");img.classList.add(\"selected\");};});}// We tell Streamlit to update our frameHeight after each render event, in\n// case it has changed. (This isn't strictly necessary for the example\n// because our height stays fixed, but this is a low-cost function, so\n// there's no harm in doing it redundantly.)\nStreamlit.setFrameHeight();}// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","labelDiv","document","body","appendChild","createElement","label","createTextNode","imagesDiv","classList","add","onRender","event","data","detail","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","textContent","args","images","childNodes","length","image","i","imgDiv","img","src","onclick","setComponentValue","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/Users/jrieke/Desktop/streamlit-image-select/streamlit_image_select/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\"))\nimagesDiv.classList.add(\"image-picker\")\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  if (data.theme) {\n    labelDiv.style.font = data.theme.font\n    labelDiv.style.color = data.theme.textColor\n    if (data.theme.base === \"dark\") {\n      document.body.querySelectorAll(\".option\").forEach((el) => {\n        el.classList.add(\"dark\")\n      })\n    } else {\n      document.body.querySelectorAll(\".option\").forEach((el) => {\n        el.classList.remove(\"dark\")\n      })\n    }\n  }\n\n  label.textContent = data.args[\"label\"]\n  let images = data.args[\"images\"]\n\n  if (imagesDiv.childNodes.length === 0) {\n    images.forEach((image: string, i: number) => {\n      let imgDiv = imagesDiv.appendChild(document.createElement(\"div\"))\n      imgDiv.classList.add(\"option\")\n\n      let img = imgDiv.appendChild(document.createElement(\"img\"))\n      img.classList.add(\"thumbnail\")\n      img.src = image\n\n      if (i === 0) {\n        imgDiv.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n\n      img.onclick = function () {\n        imagesDiv.querySelectorAll(\".selected\").forEach((el) => {\n          el.classList.remove(\"selected\")\n        })\n        Streamlit.setComponentValue(i)\n        imgDiv.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n    })\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"AAAA,OAASA,SAAT,KAAsC,yBAAtC,CAEA,GAAMC,SAAQ,CAAGC,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BF,QAAQ,CAACG,aAAT,CAAuB,OAAvB,CAA1B,CAAjB,CACA,GAAMC,MAAK,CAAGL,QAAQ,CAACG,WAAT,CAAqBF,QAAQ,CAACK,cAAT,CAAwB,EAAxB,CAArB,CAAd,CACA,GAAMC,UAAS,CAAGN,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAA1B,CAAlB,CACAG,SAAS,CAACC,SAAV,CAAoBC,GAApB,CAAwB,cAAxB,EAEA;AACA;AACA;AACA;AACA,GACA,QAASC,SAAT,CAAkBC,KAAlB,CAAsC,CACpC;AACA,GAAMC,KAAI,CAAID,KAAD,CAAmCE,MAAhD,CAEA,GAAID,IAAI,CAACE,KAAT,CAAgB,CACdd,QAAQ,CAACe,KAAT,CAAeC,IAAf,CAAsBJ,IAAI,CAACE,KAAL,CAAWE,IAAjC,CACAhB,QAAQ,CAACe,KAAT,CAAeE,KAAf,CAAuBL,IAAI,CAACE,KAAL,CAAWI,SAAlC,CACA,GAAIN,IAAI,CAACE,KAAL,CAAWK,IAAX,GAAoB,MAAxB,CAAgC,CAC9BlB,QAAQ,CAACC,IAAT,CAAckB,gBAAd,CAA+B,SAA/B,EAA0CC,OAA1C,CAAkD,SAACC,EAAD,CAAQ,CACxDA,EAAE,CAACd,SAAH,CAAaC,GAAb,CAAiB,MAAjB,EACD,CAFD,EAGD,CAJD,IAIO,CACLR,QAAQ,CAACC,IAAT,CAAckB,gBAAd,CAA+B,SAA/B,EAA0CC,OAA1C,CAAkD,SAACC,EAAD,CAAQ,CACxDA,EAAE,CAACd,SAAH,CAAae,MAAb,CAAoB,MAApB,EACD,CAFD,EAGD,CACF,CAEDlB,KAAK,CAACmB,WAAN,CAAoBZ,IAAI,CAACa,IAAL,CAAU,OAAV,CAApB,CACA,GAAIC,OAAM,CAAGd,IAAI,CAACa,IAAL,CAAU,QAAV,CAAb,CAEA,GAAIlB,SAAS,CAACoB,UAAV,CAAqBC,MAArB,GAAgC,CAApC,CAAuC,CACrCF,MAAM,CAACL,OAAP,CAAe,SAACQ,KAAD,CAAgBC,CAAhB,CAA8B,CAC3C,GAAIC,OAAM,CAAGxB,SAAS,CAACJ,WAAV,CAAsBF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAAtB,CAAb,CACA2B,MAAM,CAACvB,SAAP,CAAiBC,GAAjB,CAAqB,QAArB,EAEA,GAAIuB,IAAG,CAAGD,MAAM,CAAC5B,WAAP,CAAmBF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAAnB,CAAV,CACA4B,GAAG,CAACxB,SAAJ,CAAcC,GAAd,CAAkB,WAAlB,EACAuB,GAAG,CAACC,GAAJ,CAAUJ,KAAV,CAEA,GAAIC,CAAC,GAAK,CAAV,CAAa,CACXC,MAAM,CAACvB,SAAP,CAAiBC,GAAjB,CAAqB,UAArB,EACAuB,GAAG,CAACxB,SAAJ,CAAcC,GAAd,CAAkB,UAAlB,EACD,CAEDuB,GAAG,CAACE,OAAJ,CAAc,UAAY,CACxB3B,SAAS,CAACa,gBAAV,CAA2B,WAA3B,EAAwCC,OAAxC,CAAgD,SAACC,EAAD,CAAQ,CACtDA,EAAE,CAACd,SAAH,CAAae,MAAb,CAAoB,UAApB,EACD,CAFD,EAGAxB,SAAS,CAACoC,iBAAV,CAA4BL,CAA5B,EACAC,MAAM,CAACvB,SAAP,CAAiBC,GAAjB,CAAqB,UAArB,EACAuB,GAAG,CAACxB,SAAJ,CAAcC,GAAd,CAAkB,UAAlB,EACD,CAPD,CAQD,CArBD,EAsBD,CAED;AACA;AACA;AACA;AACAV,SAAS,CAACqC,cAAV,GACD,CAED;AACArC,SAAS,CAACsC,MAAV,CAAiBC,gBAAjB,CAAkCvC,SAAS,CAACwC,YAA5C,CAA0D7B,QAA1D,EAEA;AACA;AACAX,SAAS,CAACyC,iBAAV,GAEA;AACA;AACAzC,SAAS,CAACqC,cAAV"},"metadata":{},"sourceType":"module"}