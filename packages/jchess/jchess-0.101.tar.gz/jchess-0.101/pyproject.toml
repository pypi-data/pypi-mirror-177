[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "jchess"
# Version is '0.N' for N = commit count; Simple & allows different versioning later.
version = "0.101"
authors = [
    { name="j-hil", email="92876062+j-hil@users.noreply.github.com" },
]
description = "Chess in the command line."
readme = "README.md"
license = {text="GNU General Public License v3 (GPLv3)"}
keywords = ["chess", "terminal", "console"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta"
]
requires-python = ">=3.10"
dependencies = [
    "colorama>=0.4.5, <1",
]

[project.optional-dependencies]
dev = [
    # testing
    "pytest>=7.2.0, <8",
    "coverage[toml]>=6.5.0, < 7",
    # typing
    "mypy>=0.971, <1",
    "types-colorama>=0.4.15, <1",
    # autoformatting
    "black>=22.8.0, <23",
    "isort>=5.10.1, <6",
    "autoflake>=1.7.7, <2",
    "pydocstringformatter>=0.7.2, <1",
    # linting
    "pylint>=2.15.2, <3",
    "pydocstyle[toml]>=6.1.1, <7",
    "Flake8-pyproject>=1.2.0, <2",
    # other
    "ipykernel>=6.17.0, <7",
    "pre-commit>=2.20.0, <3",
]

[project.urls]
Homepage = "https://j-hil@github.com/j-hil/cli-chess.git"

[project.scripts]
jchess = "jchess.run:run"


[tool.hatch.build]
include = ["*.py", "py.typed"]
exclude = ["testutils.py"]

[tool.hatch.build.targets.wheel]
packages = ["src/jchess"]

[tool.mypy]
warn_redundant_casts = true
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true

show_error_codes = true
strict = true


[tool.pylint.basic]
# allows short names (which are to be used with due consideration):
argument-rgx = "(?#snake_case)^[a-z0-9]*(_[a-z0-9]+)*_?$"
variable-rgx = "(?#snake_case)^[a-z0-9]*(_[a-z0-9]+)*_?$"
attr-rgx = "(?#snake_case)^[a-z0-9]*(_[a-z0-9]+)*_?$"
const-rgx = "(?#CAPITAL_CASE)^[A-Z0-9]*(_[A-Z0-9]+)*_?|__[a-z]*__$"
class-rgx = "(?#PascalCase)^_?([A-Z][a-z]+)*[A-Z]?_?$"

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-attributes = 10  # (default = 7)
min-public-methods = 0  # (default = 2)
max-branches = 15  # (default = 12)
max-locals = 20  # (default = 15)

[tool.pylint.messages_control]
# I decide if something needs a docstring, not pylint or pydocstyle :|
disable = [
    "missing-function-docstring",
    "missing-class-docstring",
    "missing-module-docstring",
]

[tool.pylint.reports]
output-format = "colorized"


[tool.isort]
profile = "black"


[tool.pydocstyle]
ignore = [
    "D1",  # Missing docstrings
    "D213",  # Multi-line docstring summary should start at the second line
    "D203",  # 1 blank line required before class docstring
    "D202",  # No blank lines allowed after function docstring
]


[tool.coverage.run]
branch = true
source = ["./src/jchess"]
omit = ["*/dev_tools/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "__debug__",
]


[tool.flake8]
# pyproject.toml support from package Flake8-pyproject
ignore = [
    # code   # what; why
    "E741",  # ambiguous variable name 'l'; my font is unambigious
    "E402",  # module level import not at top of file; handled (better) by pylint
    "W503",  # line break before binary operator; flake8 is just wrong
]
max-line-length = 88


[tool.autoflake]
recursive = true
remove-all-unused-imports = true
remove-duplicate-keys = true
remove-unused-variables = true
in-place = true
