# coding: utf-8

"""
    IDX API

    Welcome to the IDX API.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@idx.us
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MemberCancelPutDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class cancellationReason(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DataBreachOffering": "DATA_BREACH_OFFERING",
                        "Deceased": "DECEASED",
                        "DeclinePaymentNotUpdated": "DECLINE_PAYMENT_NOT_UPDATED",
                        "DidNotWant": "DID_NOT_WANT",
                        "DidNotSeeValue": "DID_NOT_SEE_VALUE",
                        "DifferentProvider": "DIFFERENT_PROVIDER",
                        "DuplicatedOrConsolidatedMembership": "DUPLICATED_OR_CONSOLIDATED_MEMBERSHIP",
                        "FinancialReasons": "FINANCIAL_REASONS",
                        "FreeElsewhere": "FREE_ELSEWHERE",
                        "NoLongerCoveredByEmployerPlan": "NO_LONGER_COVERED_BY_EMPLOYER_PLAN",
                        "NoReasonGiven": "NO_REASON_GIVEN",
                        "PaymentNotUpdated": "PAYMENT_NOT_UPDATED",
                        "Zander": "ZANDER",
                    }
                
                @schemas.classproperty
                def DATA_BREACH_OFFERING(cls):
                    return cls("DataBreachOffering")
                
                @schemas.classproperty
                def DECEASED(cls):
                    return cls("Deceased")
                
                @schemas.classproperty
                def DECLINE_PAYMENT_NOT_UPDATED(cls):
                    return cls("DeclinePaymentNotUpdated")
                
                @schemas.classproperty
                def DID_NOT_WANT(cls):
                    return cls("DidNotWant")
                
                @schemas.classproperty
                def DID_NOT_SEE_VALUE(cls):
                    return cls("DidNotSeeValue")
                
                @schemas.classproperty
                def DIFFERENT_PROVIDER(cls):
                    return cls("DifferentProvider")
                
                @schemas.classproperty
                def DUPLICATED_OR_CONSOLIDATED_MEMBERSHIP(cls):
                    return cls("DuplicatedOrConsolidatedMembership")
                
                @schemas.classproperty
                def FINANCIAL_REASONS(cls):
                    return cls("FinancialReasons")
                
                @schemas.classproperty
                def FREE_ELSEWHERE(cls):
                    return cls("FreeElsewhere")
                
                @schemas.classproperty
                def NO_LONGER_COVERED_BY_EMPLOYER_PLAN(cls):
                    return cls("NoLongerCoveredByEmployerPlan")
                
                @schemas.classproperty
                def NO_REASON_GIVEN(cls):
                    return cls("NoReasonGiven")
                
                @schemas.classproperty
                def PAYMENT_NOT_UPDATED(cls):
                    return cls("PaymentNotUpdated")
                
                @schemas.classproperty
                def ZANDER(cls):
                    return cls("Zander")
            __annotations__ = {
                "cancellationReason": cancellationReason,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellationReason"]) -> MetaOapg.properties.cancellationReason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cancellationReason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellationReason"]) -> typing.Union[MetaOapg.properties.cancellationReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cancellationReason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cancellationReason: typing.Union[MetaOapg.properties.cancellationReason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MemberCancelPutDto':
        return super().__new__(
            cls,
            *args,
            cancellationReason=cancellationReason,
            _configuration=_configuration,
            **kwargs,
        )
