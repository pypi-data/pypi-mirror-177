# coding: utf-8

"""
    IDX API

    Welcome to the IDX API.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@idx.us
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CyberScanExposuresGetDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            totalSize = schemas.Int32Schema
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                memberId = schemas.StrSchema
                                hash = schemas.StrSchema
                                
                                
                                class dataType(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "Invalid": "INVALID",
                                            "BankAccount": "BANK_ACCOUNT",
                                            "CardAccount": "CARD_ACCOUNT",
                                            "DriverLicense": "DRIVER_LICENSE",
                                            "EmailAddress": "EMAIL_ADDRESS",
                                            "MedicalId": "MEDICAL_ID",
                                            "Passport": "PASSPORT",
                                            "PhoneNumber": "PHONE_NUMBER",
                                        }
                                    
                                    @schemas.classproperty
                                    def INVALID(cls):
                                        return cls("Invalid")
                                    
                                    @schemas.classproperty
                                    def BANK_ACCOUNT(cls):
                                        return cls("BankAccount")
                                    
                                    @schemas.classproperty
                                    def CARD_ACCOUNT(cls):
                                        return cls("CardAccount")
                                    
                                    @schemas.classproperty
                                    def DRIVER_LICENSE(cls):
                                        return cls("DriverLicense")
                                    
                                    @schemas.classproperty
                                    def EMAIL_ADDRESS(cls):
                                        return cls("EmailAddress")
                                    
                                    @schemas.classproperty
                                    def MEDICAL_ID(cls):
                                        return cls("MedicalId")
                                    
                                    @schemas.classproperty
                                    def PASSPORT(cls):
                                        return cls("Passport")
                                    
                                    @schemas.classproperty
                                    def PHONE_NUMBER(cls):
                                        return cls("PhoneNumber")
                                
                                
                                class sourceDetails(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            id = schemas.StrSchema
                                            type = schemas.StrSchema
                                            url = schemas.StrSchema
                                            name = schemas.StrSchema
                                            description = schemas.StrSchema
                                            date = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "id": id,
                                                "type": type,
                                                "url": url,
                                                "name": name,
                                                "description": description,
                                                "date": date,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "url", "name", "description", "date", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "url", "name", "description", "date", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                                        date: typing.Union[MetaOapg.properties.date, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'sourceDetails':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            id=id,
                                            type=type,
                                            url=url,
                                            name=name,
                                            description=description,
                                            date=date,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                creationDate = schemas.DateTimeSchema
                                updateDate = schemas.DateTimeSchema
                                version = schemas.IntSchema
                                
                                
                                class help(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'help':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "memberId": memberId,
                                    "hash": hash,
                                    "dataType": dataType,
                                    "sourceDetails": sourceDetails,
                                    "creationDate": creationDate,
                                    "updateDate": updateDate,
                                    "version": version,
                                    "help": help,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["memberId"]) -> MetaOapg.properties.memberId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sourceDetails"]) -> MetaOapg.properties.sourceDetails: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["help"]) -> MetaOapg.properties.help: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["memberId", "hash", "dataType", "sourceDetails", "creationDate", "updateDate", "version", "help", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["memberId"]) -> typing.Union[MetaOapg.properties.memberId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> typing.Union[MetaOapg.properties.hash, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dataType"]) -> typing.Union[MetaOapg.properties.dataType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sourceDetails"]) -> typing.Union[MetaOapg.properties.sourceDetails, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> typing.Union[MetaOapg.properties.updateDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["help"]) -> typing.Union[MetaOapg.properties.help, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["memberId", "hash", "dataType", "sourceDetails", "creationDate", "updateDate", "version", "help", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            memberId: typing.Union[MetaOapg.properties.memberId, str, schemas.Unset] = schemas.unset,
                            hash: typing.Union[MetaOapg.properties.hash, str, schemas.Unset] = schemas.unset,
                            dataType: typing.Union[MetaOapg.properties.dataType, str, schemas.Unset] = schemas.unset,
                            sourceDetails: typing.Union[MetaOapg.properties.sourceDetails, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
                            updateDate: typing.Union[MetaOapg.properties.updateDate, str, datetime, schemas.Unset] = schemas.unset,
                            version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            help: typing.Union[MetaOapg.properties.help, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                memberId=memberId,
                                hash=hash,
                                dataType=dataType,
                                sourceDetails=sourceDetails,
                                creationDate=creationDate,
                                updateDate=updateDate,
                                version=version,
                                help=help,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "totalSize": totalSize,
                "items": items,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalSize"]) -> MetaOapg.properties.totalSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalSize", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalSize"]) -> typing.Union[MetaOapg.properties.totalSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalSize", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        totalSize: typing.Union[MetaOapg.properties.totalSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CyberScanExposuresGetDto':
        return super().__new__(
            cls,
            *args,
            totalSize=totalSize,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )
