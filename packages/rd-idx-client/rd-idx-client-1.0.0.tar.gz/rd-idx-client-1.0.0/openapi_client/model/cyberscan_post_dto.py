# coding: utf-8

"""
    IDX API

    Welcome to the IDX API.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@idx.us
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CyberscanPostDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class dataType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Invalid": "INVALID",
                        "BankAccount": "BANK_ACCOUNT",
                        "CardAccount": "CARD_ACCOUNT",
                        "DriverLicense": "DRIVER_LICENSE",
                        "EmailAddress": "EMAIL_ADDRESS",
                        "MedicalId": "MEDICAL_ID",
                        "Passport": "PASSPORT",
                        "PhoneNumber": "PHONE_NUMBER",
                    }
                
                @schemas.classproperty
                def INVALID(cls):
                    return cls("Invalid")
                
                @schemas.classproperty
                def BANK_ACCOUNT(cls):
                    return cls("BankAccount")
                
                @schemas.classproperty
                def CARD_ACCOUNT(cls):
                    return cls("CardAccount")
                
                @schemas.classproperty
                def DRIVER_LICENSE(cls):
                    return cls("DriverLicense")
                
                @schemas.classproperty
                def EMAIL_ADDRESS(cls):
                    return cls("EmailAddress")
                
                @schemas.classproperty
                def MEDICAL_ID(cls):
                    return cls("MedicalId")
                
                @schemas.classproperty
                def PASSPORT(cls):
                    return cls("Passport")
                
                @schemas.classproperty
                def PHONE_NUMBER(cls):
                    return cls("PhoneNumber")
            memberId = schemas.StrSchema
            label = schemas.StrSchema
            value = schemas.StrSchema
            hash = schemas.StrSchema
            __annotations__ = {
                "dataType": dataType,
                "memberId": memberId,
                "label": label,
                "value": value,
                "hash": hash,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memberId"]) -> MetaOapg.properties.memberId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataType", "memberId", "label", "value", "hash", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataType"]) -> typing.Union[MetaOapg.properties.dataType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memberId"]) -> typing.Union[MetaOapg.properties.memberId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> typing.Union[MetaOapg.properties.hash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataType", "memberId", "label", "value", "hash", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataType: typing.Union[MetaOapg.properties.dataType, str, schemas.Unset] = schemas.unset,
        memberId: typing.Union[MetaOapg.properties.memberId, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        hash: typing.Union[MetaOapg.properties.hash, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CyberscanPostDto':
        return super().__new__(
            cls,
            *args,
            dataType=dataType,
            memberId=memberId,
            label=label,
            value=value,
            hash=hash,
            _configuration=_configuration,
            **kwargs,
        )
