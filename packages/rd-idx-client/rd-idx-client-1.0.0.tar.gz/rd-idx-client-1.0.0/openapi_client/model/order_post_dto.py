# coding: utf-8

"""
    IDX API

    Welcome to the IDX API.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@idx.us
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrderPostDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            memberId = schemas.StrSchema
            
            
            class purchaseDetails(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        couponId = schemas.StrSchema
                        discountCouponId = schemas.StrSchema
                        __annotations__ = {
                            "couponId": couponId,
                            "discountCouponId": discountCouponId,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["couponId"]) -> MetaOapg.properties.couponId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["discountCouponId"]) -> MetaOapg.properties.discountCouponId: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["couponId", "discountCouponId", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["couponId"]) -> typing.Union[MetaOapg.properties.couponId, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["discountCouponId"]) -> typing.Union[MetaOapg.properties.discountCouponId, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["couponId", "discountCouponId", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    couponId: typing.Union[MetaOapg.properties.couponId, str, schemas.Unset] = schemas.unset,
                    discountCouponId: typing.Union[MetaOapg.properties.discountCouponId, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'purchaseDetails':
                    return super().__new__(
                        cls,
                        *args,
                        couponId=couponId,
                        discountCouponId=discountCouponId,
                        _configuration=_configuration,
                        **kwargs,
                    )
            trackingId = schemas.StrSchema
            __annotations__ = {
                "memberId": memberId,
                "purchaseDetails": purchaseDetails,
                "trackingId": trackingId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memberId"]) -> MetaOapg.properties.memberId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseDetails"]) -> MetaOapg.properties.purchaseDetails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingId"]) -> MetaOapg.properties.trackingId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["memberId", "purchaseDetails", "trackingId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memberId"]) -> typing.Union[MetaOapg.properties.memberId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseDetails"]) -> typing.Union[MetaOapg.properties.purchaseDetails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingId"]) -> typing.Union[MetaOapg.properties.trackingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["memberId", "purchaseDetails", "trackingId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        memberId: typing.Union[MetaOapg.properties.memberId, str, schemas.Unset] = schemas.unset,
        purchaseDetails: typing.Union[MetaOapg.properties.purchaseDetails, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        trackingId: typing.Union[MetaOapg.properties.trackingId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderPostDto':
        return super().__new__(
            cls,
            *args,
            memberId=memberId,
            purchaseDetails=purchaseDetails,
            trackingId=trackingId,
            _configuration=_configuration,
            **kwargs,
        )
