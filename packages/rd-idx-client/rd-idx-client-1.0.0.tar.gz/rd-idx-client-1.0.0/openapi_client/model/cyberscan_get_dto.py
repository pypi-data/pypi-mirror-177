# coding: utf-8

"""
    IDX API

    Welcome to the IDX API.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@idx.us
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CyberscanGetDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def bankAccount() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
        
            @staticmethod
            def cardAccount() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
        
            @staticmethod
            def driverLicense() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
        
            @staticmethod
            def medicalId() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
        
            @staticmethod
            def passport() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
        
            @staticmethod
            def phoneNumber() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
        
            @staticmethod
            def ssn() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
        
            @staticmethod
            def emailAddress() -> typing.Type['CyberScanItemDto']:
                return CyberScanItemDto
            __annotations__ = {
                "bankAccount": bankAccount,
                "cardAccount": cardAccount,
                "driverLicense": driverLicense,
                "medicalId": medicalId,
                "passport": passport,
                "phoneNumber": phoneNumber,
                "ssn": ssn,
                "emailAddress": emailAddress,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccount"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardAccount"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["driverLicense"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medicalId"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passport"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddress"]) -> 'CyberScanItemDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bankAccount", "cardAccount", "driverLicense", "medicalId", "passport", "phoneNumber", "ssn", "emailAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccount"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardAccount"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["driverLicense"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medicalId"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passport"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddress"]) -> typing.Union['CyberScanItemDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bankAccount", "cardAccount", "driverLicense", "medicalId", "passport", "phoneNumber", "ssn", "emailAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bankAccount: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        cardAccount: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        driverLicense: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        medicalId: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        passport: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        phoneNumber: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        ssn: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        emailAddress: typing.Union['CyberScanItemDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CyberscanGetDto':
        return super().__new__(
            cls,
            *args,
            bankAccount=bankAccount,
            cardAccount=cardAccount,
            driverLicense=driverLicense,
            medicalId=medicalId,
            passport=passport,
            phoneNumber=phoneNumber,
            ssn=ssn,
            emailAddress=emailAddress,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.cyber_scan_item_dto import CyberScanItemDto
