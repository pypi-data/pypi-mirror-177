name: tests

on:
  push:
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      # This is spelt like this to do not ignore the docs/examples/ folder.
      - docs/*
      - docs/usage/*
      - CHANGELOG.rst
      - LICENSE
      - README.md
  workflow_dispatch:
    # Allow to run manually

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}-latest
    env:
      FORCE_COLOR: true
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        python:
          - 'pypy-3.8'
          - 'pypy-3.9'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up target Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install
        run: python -m pip --disable-pip-version-check install .[test]

      - name: Run tests
        run: >-
          python -m pytest --showlocals -vv --cov
          --cov-report=xml:coverage-${{ matrix.python }}.xml

      - name: Send coverage report
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
        env:
          PYTHON: ${{ matrix.python }}
        with:
          flags: tests
          env_vars: PYTHON
          name: ${{ matrix.python }}

  cygwin:
    runs-on: windows-latest
    env:
      FORCE_COLOR: true
    strategy:
      fail-fast: false
      matrix:
        python:
          - '3.9'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Cygwin
        uses: cygwin/cygwin-install-action@v2
        with:
          packages: >-
            python39
            python39-devel
            python39-pip
            python39-setuptools
            cmake
            gcc-core
            gcc-g++
            git
            make
            ninja

      - name: Fix git dubious ownership
        # This addresses the "fatal: detected dubious ownership in
        # repository" and "fatal: not in a git directory" errors
        # encountered when trying to run Cygwin git in a directory not
        # owned by the current user. This happens when the tests run
        # Cygwin git in a directory outside the Cygwin filesystem.
        run: git config --global --add safe.directory '*'
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}

      - name: Get pip cache path
        id: pip-cache-path
        run: echo "path=$(cygpath -w $(python -m pip cache dir))" >> $GITHUB_OUTPUT
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}

      - name: Restore cache
        # Cygwin Python cannot use binary wheels from PyPI. Building
        # some dependencies takes considerable time. Caching the built
        # wheels speeds up the CI job quite a bit.
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache-path.outputs.path }}
          key: cygwin-pip-${{ github.sha }}
          restore-keys: cygwin-pip-

      - name: Install
        # Cygwin patches Python's ensurepip module to look for the
        # wheels needed to initialize a new virtual environment in
        # /usr/share/python-wheels/ but nothing in Cygwin actually
        # puts the setuptools and pip wheels there. Fix this.
        run: |
          mkdir /usr/share/python-wheels/
          pushd /usr/share/python-wheels/
          python -m pip --disable-pip-version-check download setuptools pip
          popd
          python -m pip --disable-pip-version-check install .[test]
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}

      - name: Run tests
        run: >-
          python -m pytest --showlocals -vv --cov
          --cov-report=xml:coverage-${{ matrix.python }}.xml
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}

      - name: Send coverage report
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
        env:
          PYTHON: cygwin-${{ matrix.python }}
        with:
          flags: tests
          env_vars: PYTHON
          name: cygwin-${{ matrix.python }}

  pyston:
    runs-on: ubuntu-20.04
    env:
      FORCE_COLOR: true
    strategy:
      fail-fast: false
      matrix:
        python:
          - '3.8'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pyston
        run: |
          wget https://github.com/pyston/pyston/releases/download/pyston_2.3.5/pyston_2.3.5_20.04_amd64.deb
          sudo apt install $(pwd)/pyston_2.3.5_20.04_amd64.deb

      - name: Install
        run: pyston -m pip --disable-pip-version-check install .[test]

      - name: Run tests
        run: >-
          pyston -m pytest --showlocals -vv --cov
          --cov-report=xml:coverage-pyston.xml

      - name: Send coverage report
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
        env:
          PYTHON: pyston
        with:
          flags: tests
          env_vars: PYTHON
          name: pyston

  homebrew:
    runs-on: macos-latest
    env:
      FORCE_COLOR: true
    strategy:
      fail-fast: false
      matrix:
        python:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Homebrew Python
        run: |
          brew install --overwrite python@${{ matrix.python }}
          echo /usr/local/opt/python@${{ matrix.python }}/libexec/bin/ >> $GITHUB_PATH

      - name: Patch pip
        # Patch https://github.com/pypa/pip/issues/11539
        run: |
          cat >>/usr/local/lib/python${{ matrix.python }}/site-packages/pip/_internal/locations/_sysconfig.py <<EOF
          def get_prefixed_libs(prefix: str) -> typing.Tuple[str, str]:
              if "venv" in sysconfig.get_scheme_names():
                  paths = sysconfig.get_paths(vars={"base": prefix, "platbase": prefix}, scheme="venv")
              else:
                  paths = sysconfig.get_paths(vars={"base": prefix, "platbase": prefix})
              return (paths["purelib"], paths["platlib"])
          EOF

      - name: Install
        run: python -m pip --disable-pip-version-check install .[test]

      - name: Run tests
        run: >-
          python -m pytest --showlocals -vv --cov
          --cov-report=xml:coverage-homebrew-${{ matrix.python }}.xml

      - name: Send coverage report
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
        env:
          PYTHON: homebrew-${{ matrix.python }}
        with:
          flags: tests
          env_vars: PYTHON
          name: homebrew-${{ matrix.python }}

  mypy:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: true
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install mypy
        run: python -m pip --disable-pip-version-check install mypy==0.981

      - name: Run mypy
        run: mypy -p mesonpy

  tests-pass:
    needs: [test, cygwin, pyston, homebrew, mypy]
    runs-on: ubuntu-latest
    steps:
      - run: echo "All jobs passed"
