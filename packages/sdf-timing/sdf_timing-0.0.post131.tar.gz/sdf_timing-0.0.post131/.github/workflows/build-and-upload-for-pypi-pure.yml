# Copyright 2020-2022 F4PGA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/build-and-upload-for-pypi-pure.yml
# using the script from https://github.com/mithro/actions-includes@main

name: Build (pure python) packages and publish on PyPI
on:
  push:
  pull_request:
jobs:

  Source:
    name: Source
    runs-on: ubuntu-20.04
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/build-and-upload-for-pypi-pure.yml
    - uses: actions/checkout@v2
      with:
        # Always clone the full depth so git-describe works.
        fetch-depth: 0
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install latest pip
      run: |
        python -m pip install -U pip wheel virtualenv
    - name: Install packaging tooling
      run: |
        pip install twine wheel auditwheel build
    - name: Install development tools
      run: |
        pip install -r requirements.txt
    - name: üöß Build distribution üì¶
      run: |
        python -m build --sdist --no-isolation .
    - name: ‚úîÔ∏é Check source üì¶
      shell: bash
      run: |
        shopt -s nullglob
        for SRC in dist/*.zip; do
          echo
          echo "::group::Checking $SRC"
          echo
          python -m zipfile --test $SRC
          python -m zipfile --list $SRC
          echo
          twine check $SRC
          echo
          echo "::endgroup::"
        done
        for SRC in dist/*.t*gz; do
          echo
          echo "::group::Checking $SRC"
          echo
          python -m tarfile --list $SRC
          echo
          twine check $SRC
          echo
          echo "::endgroup::"
        done
    - name: üì§ Upload source üì¶
      uses: actions/upload-artifact@v2
      with:
        name: source
        path: dist
    - name: üì§ Publish source to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: ${{ github.ref == 'refs/heads/master' && env.TWINE_PASSWORD != null }}
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*
    - name: üì§ Publish source to PyPI
      if: ${{ github.ref == 'refs/heads/master' && startsWith(github.repository, 'chipsalliance') && github.event_name != 'pull_request' && env.TWINE_PASSWORD != null }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
  Wheels:
    strategy:
      matrix:
        python-version: [2.x, 3.x]
      fail-fast: false
    name: ${{ matrix.python-version }}
    runs-on: ubuntu-20.04
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/build-and-upload-for-pypi-pure.yml
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install latest pip
      run: |
        python -m pip install -U pip wheel virtualenv
    - name: Install packaging tooling
      run: |
        pip install twine wheel auditwheel build
    - name: üöß Build distribution üì¶
      run: |
        python -m build --wheel .
    - name: ‚úîÔ∏é Check wheels üì¶
      shell: bash
      run: |
        PYVER=$(python -c "import sys; print(sys.version[0])")
        for WHEEL in dist/*.whl; do
          echo
          echo "::group::Checking $WHEEL"
          echo
          python -m zipfile -t $WHEEL
          python -m zipfile -l $WHEEL
          echo
          if [ "$(uname)" = "Linux" -a $PYVER -eq 3 -a "${WHEEL: -8}" != "-any.whl" ]; then
            auditwheel show $WHEEL
          fi
          echo
          twine check $WHEEL
          echo
          echo "::endgroup::"
        done
    - name: üì§ Upload wheels üì¶
      uses: actions/upload-artifact@v2
      with:
        name: wheels-${{ runner.os }}
        path: dist
    - name: üì§ Publish wheels to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: ${{ github.ref == 'refs/heads/master' && env.TWINE_PASSWORD != null }}
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*
    - name: üì§ Publish wheels to PyPI
      if: ${{ github.ref == 'refs/heads/master' && startsWith(github.repository, 'chipsalliance') && github.event_name != 'pull_request' && env.TWINE_PASSWORD != null }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
