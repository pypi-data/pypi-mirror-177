{"version":3,"file":"static/js/613.b91a8905.chunk.js","mappings":"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","sources":["../../core/src/workspace/RepositoryRemoteLocationLink.tsx","../../core/src/workspace/RepositoryLocationsList.tsx","../../core/src/instance/CodeLocationsPage.tsx"],"sourcesContent":["import {Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const formatRepositoryUrl = (url: string): string => {\n  try {\n    const urlObj = new URL(url);\n    let org, repo, tag;\n    if (urlObj.host === 'github.com') {\n      [, org, repo, , tag] = urlObj.pathname.split('/', 7);\n    } else if (urlObj.host === 'gitlab.com') {\n      [, org, repo, , , tag] = urlObj.pathname.split('/', 8);\n    }\n    if (org && repo && tag) {\n      return `${org}/${repo}@${tag}`;\n    }\n  } catch (error) {\n    return url;\n  }\n  return url;\n};\n\nexport const RepositoryRemoteLocationLink: React.FC<{repositoryUrl: string}> = ({\n  repositoryUrl,\n}) => {\n  const formattedUrl = formatRepositoryUrl(repositoryUrl);\n\n  return (\n    <a href={repositoryUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Icon\n        color={Colors.Link}\n        name=\"link\"\n        style={{display: 'inline-block', verticalAlign: 'middle'}}\n      />{' '}\n      {formattedUrl}\n    </a>\n  );\n};\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  NonIdealState,\n  Spinner,\n  Table,\n  Tag,\n  Caption,\n  Tooltip,\n} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {ReloadRepositoryLocationButton} from '../nav/ReloadRepositoryLocationButton';\nimport {\n  buildReloadFnForLocation,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationNonBlockingErrorDialog} from './RepositoryLocationErrorDialog';\nimport {RepositoryRemoteLocationLink} from './RepositoryRemoteLocationLink';\nimport {WorkspaceContext, WorkspaceRepositoryLocationNode} from './WorkspaceContext';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: true};\n\nconst LocationStatus: React.FC<{\n  location: string;\n  locationOrError: WorkspaceRepositoryLocationNode;\n}> = (props) => {\n  const {location, locationOrError} = props;\n  const [showDialog, setShowDialog] = React.useState(false);\n\n  const reloadFn = React.useMemo(() => buildReloadFnForLocation(location), [location]);\n  const {reloading, tryReload} = useRepositoryLocationReload({\n    scope: 'location',\n    reloadFn,\n  });\n\n  if (locationOrError.loadStatus === 'LOADING') {\n    if (locationOrError.locationOrLoadError) {\n      return (\n        <Tag minimal intent=\"primary\">\n          Updating...\n        </Tag>\n      );\n    } else {\n      return (\n        <Tag minimal intent=\"primary\">\n          Loading...\n        </Tag>\n      );\n    }\n  }\n\n  if (locationOrError.locationOrLoadError?.__typename === 'PythonError') {\n    return (\n      <>\n        <Box flex={{alignItems: 'center', gap: 12}}>\n          <Tag minimal intent=\"danger\">\n            Failed\n          </Tag>\n          <ButtonLink onClick={() => setShowDialog(true)}>\n            <span style={{fontSize: '14px'}}>View error</span>\n          </ButtonLink>\n        </Box>\n        <RepositoryLocationNonBlockingErrorDialog\n          location={location}\n          isOpen={showDialog}\n          error={locationOrError.locationOrLoadError}\n          reloading={reloading}\n          onDismiss={() => setShowDialog(false)}\n          onTryReload={() => tryReload()}\n        />\n      </>\n    );\n  }\n\n  return (\n    <Tag minimal intent=\"success\">\n      Loaded\n    </Tag>\n  );\n};\n\nconst ReloadButton: React.FC<{\n  location: string;\n}> = (props) => {\n  const {location} = props;\n  const {canReloadRepositoryLocation} = usePermissions();\n\n  if (!canReloadRepositoryLocation.enabled) {\n    return (\n      <Tooltip content={canReloadRepositoryLocation.disabledReason}>\n        <ButtonLink color={Colors.Gray400}>Reload</ButtonLink>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <ReloadRepositoryLocationButton location={location}>\n      {({reloading, tryReload}) => (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n          <ButtonLink onClick={() => tryReload()}>Reload</ButtonLink>\n          {reloading ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n      )}\n    </ReloadRepositoryLocationButton>\n  );\n};\n\nexport const RepositoryLocationsList = () => {\n  const {locationEntries, loading} = React.useContext(WorkspaceContext);\n\n  if (loading && !locationEntries.length) {\n    return (\n      <Box flex={{gap: 8, alignItems: 'center'}} padding={{horizontal: 24}}>\n        <Spinner purpose=\"body-text\" />\n        <div>Loading...</div>\n      </Box>\n    );\n  }\n\n  if (!locationEntries.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"folder\"\n          title=\"No repository locations\"\n          description=\"When you add a repository location to this workspace, it will appear here.\"\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Repository location</th>\n          <th>Status</th>\n          <th colSpan={2}>Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {locationEntries.map((location) => (\n          <tr key={location.name}>\n            <td style={{maxWidth: '50%'}}>\n              <Group direction=\"column\" spacing={4}>\n                <strong>{location.name}</strong>\n                <div>\n                  {location.displayMetadata.map((metadata, idx) => {\n                    const name = metadata.key === 'url' ? 'source' : metadata.key;\n                    const display =\n                      metadata.key === 'url' ? (\n                        <RepositoryRemoteLocationLink repositoryUrl={metadata.value} />\n                      ) : (\n                        metadata.value\n                      );\n\n                    return (\n                      <div key={idx}>\n                        <Caption style={{wordBreak: 'break-word'}}>\n                          {`${name}: `}\n                          <span style={{color: Colors.Gray400}}>{display}</span>\n                        </Caption>\n                      </div>\n                    );\n                  })}\n                </div>\n              </Group>\n            </td>\n            <td>\n              <LocationStatus location={location.name} locationOrError={location} />\n            </td>\n            <td style={{whiteSpace: 'nowrap'}}>\n              <Timestamp timestamp={{unix: location.updatedTimestamp}} timeFormat={TIME_FORMAT} />\n            </td>\n            <td style={{width: '180px'}}>\n              <ReloadButton location={location.name} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","import {Box, Heading, PageHeader, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {RepositoryLocationsList} from '../workspace/RepositoryLocationsList';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\n\nexport const CodeLocationsPage = () => {\n  useTrackPageView();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const {locationEntries, loading} = React.useContext(WorkspaceContext);\n  const entryCount = locationEntries.length;\n\n  const subheadingText = () => {\n    if (loading || !entryCount) {\n      return 'Code locations';\n    }\n    return entryCount === 1 ? '1 code location' : `${entryCount} code locations`;\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"code-locations\" />}\n      />\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n        style={{height: '64px'}} // Preserve height whether \"Reload all\" is present or not\n      >\n        <Subheading id=\"repository-locations\">{subheadingText()}</Subheading>\n        {entryCount > 1 ? <ReloadAllButton /> : null}\n      </Box>\n      <RepositoryLocationsList />\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default CodeLocationsPage;\n"],"names":["RepositoryRemoteLocationLink","repositoryUrl","formattedUrl","url","org","repo","tag","urlObj","URL","host","pathname","split","error","formatRepositoryUrl","href","target","rel","Icon","color","Colors","name","style","display","verticalAlign","TIME_FORMAT","showSeconds","showTimezone","LocationStatus","props","location","locationOrError","React","showDialog","setShowDialog","reloadFn","buildReloadFnForLocation","useRepositoryLocationReload","scope","reloading","tryReload","loadStatus","locationOrLoadError","Tag","minimal","intent","__typename","Box","flex","alignItems","gap","ButtonLink","onClick","fontSize","isOpen","onDismiss","onTryReload","ReloadButton","canReloadRepositoryLocation","usePermissions","enabled","ReloadRepositoryLocationButton","direction","Spinner","purpose","Tooltip","content","disabledReason","RepositoryLocationsList","WorkspaceContext","locationEntries","loading","length","padding","horizontal","Table","colSpan","map","maxWidth","Group","spacing","displayMetadata","metadata","idx","key","value","wordBreak","whiteSpace","Timestamp","timestamp","unix","updatedTimestamp","timeFormat","width","vertical","NonIdealState","icon","title","description","CodeLocationsPage","useTrackPageView","pageTitle","InstancePageContext","entryCount","PageHeader","tabs","InstanceTabs","tab","justifyContent","height","id","ReloadAllButton"],"sourceRoot":""}