# Generated from src/queryparser/postgresql/PostgreSQLParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,218,1101,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,1,
        0,1,1,1,1,1,1,1,1,3,1,189,8,1,1,1,1,1,1,1,1,1,3,1,195,8,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,207,8,1,1,1,3,1,210,8,1,1,
        1,1,1,1,1,1,1,1,1,3,1,217,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,3,5,226,
        8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        3,15,255,8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,263,8,16,1,17,1,
        17,3,17,267,8,17,1,17,1,17,1,17,1,17,3,17,273,8,17,1,17,3,17,276,
        8,17,1,17,3,17,279,8,17,1,17,3,17,282,8,17,3,17,284,8,17,1,17,3,
        17,287,8,17,1,17,3,17,290,8,17,1,17,3,17,293,8,17,1,17,1,17,3,17,
        297,8,17,1,17,3,17,300,8,17,1,18,3,18,303,8,18,1,18,1,18,1,19,1,
        19,1,19,3,19,310,8,19,1,20,1,20,1,20,3,20,315,8,20,1,20,1,20,3,20,
        319,8,20,1,20,3,20,322,8,20,1,20,1,20,3,20,326,8,20,1,21,1,21,1,
        21,3,21,331,8,21,1,21,1,21,3,21,335,8,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,4,22,344,8,22,11,22,12,22,345,1,23,1,23,1,23,1,23,1,23,
        1,23,4,23,354,8,23,11,23,12,23,355,1,24,1,24,1,24,1,24,5,24,362,
        8,24,10,24,12,24,365,9,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,3,26,
        374,8,26,1,26,1,26,1,26,3,26,379,8,26,1,26,1,26,3,26,383,8,26,1,
        27,1,27,1,27,1,27,1,27,1,27,3,27,391,8,27,1,27,1,27,3,27,395,8,27,
        1,27,3,27,398,8,27,3,27,400,8,27,1,28,1,28,1,28,5,28,405,8,28,10,
        28,12,28,408,9,28,1,29,3,29,411,8,29,1,29,1,29,1,30,1,30,1,30,3,
        30,418,8,30,1,30,1,30,1,30,1,30,3,30,424,8,30,3,30,426,8,30,1,30,
        3,30,429,8,30,3,30,431,8,30,1,31,1,31,1,31,5,31,436,8,31,10,31,12,
        31,439,9,31,1,32,1,32,1,32,1,32,5,32,445,8,32,10,32,12,32,448,9,
        32,1,32,1,32,1,33,1,33,1,33,3,33,455,8,33,1,34,1,34,1,34,3,34,460,
        8,34,1,35,1,35,1,35,5,35,465,8,35,10,35,12,35,468,9,35,1,36,1,36,
        1,36,5,36,473,8,36,10,36,12,36,476,9,36,1,37,3,37,479,8,37,1,37,
        1,37,3,37,483,8,37,1,37,1,37,3,37,487,8,37,1,38,1,38,1,38,1,38,1,
        38,5,38,494,8,38,10,38,12,38,497,9,38,3,38,499,8,38,1,38,3,38,502,
        8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        3,38,529,8,38,1,38,1,38,3,38,533,8,38,3,38,535,8,38,1,38,1,38,3,
        38,539,8,38,1,39,1,39,1,39,1,39,1,39,5,39,546,8,39,10,39,12,39,549,
        9,39,1,39,1,39,3,39,553,8,39,1,40,1,40,1,40,3,40,558,8,40,1,40,3,
        40,561,8,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,570,8,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        3,42,586,8,42,1,43,1,43,1,43,5,43,591,8,43,10,43,12,43,594,9,43,
        1,44,1,44,1,45,1,45,1,45,5,45,601,8,45,10,45,12,45,604,9,45,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,613,8,46,3,46,615,8,46,1,47,1,
        47,1,47,1,48,1,48,1,48,1,48,3,48,624,8,48,1,49,1,49,1,49,1,49,3,
        49,630,8,49,1,49,1,49,1,49,1,49,1,49,3,49,637,8,49,1,50,1,50,1,51,
        1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,5,53,651,8,53,10,53,
        12,53,654,9,53,1,54,1,54,3,54,658,8,54,1,54,1,54,3,54,662,8,54,3,
        54,664,8,54,1,54,1,54,1,54,1,54,3,54,670,8,54,1,55,1,55,1,55,1,55,
        1,55,1,56,1,56,1,57,1,57,1,57,5,57,682,8,57,10,57,12,57,685,9,57,
        1,58,3,58,688,8,58,1,58,1,58,1,58,3,58,693,8,58,1,58,1,58,1,58,1,
        58,3,58,699,8,58,1,58,1,58,1,58,3,58,704,8,58,1,58,1,58,3,58,708,
        8,58,1,58,1,58,3,58,712,8,58,1,58,1,58,1,58,3,58,717,8,58,1,59,1,
        59,1,59,1,59,3,59,723,8,59,1,60,1,60,3,60,727,8,60,1,60,1,60,3,60,
        731,8,60,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,5,63,741,8,63,10,
        63,12,63,744,9,63,1,63,1,63,1,63,1,63,1,63,5,63,751,8,63,10,63,12,
        63,754,9,63,3,63,756,8,63,1,63,1,63,1,63,1,63,5,63,762,8,63,10,63,
        12,63,765,9,63,3,63,767,8,63,1,64,1,64,1,64,5,64,772,8,64,10,64,
        12,64,775,9,64,1,65,1,65,1,65,3,65,780,8,65,1,65,5,65,783,8,65,10,
        65,12,65,786,9,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,3,66,799,8,66,1,67,1,67,1,67,1,67,3,67,805,8,67,1,67,4,67,
        808,8,67,11,67,12,67,809,1,68,1,68,1,68,1,68,1,69,1,69,3,69,818,
        8,69,1,69,3,69,821,8,69,1,69,3,69,824,8,69,1,69,1,69,1,69,1,69,1,
        69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,842,
        8,69,1,70,1,70,1,71,1,71,3,71,848,8,71,1,71,1,71,1,71,3,71,853,8,
        71,5,71,855,8,71,10,71,12,71,858,9,71,1,72,1,72,1,72,1,72,1,72,3,
        72,865,8,72,3,72,867,8,72,1,73,1,73,1,73,3,73,872,8,73,1,73,1,73,
        1,73,1,73,5,73,878,8,73,10,73,12,73,881,9,73,1,74,1,74,1,74,1,74,
        3,74,887,8,74,3,74,889,8,74,1,74,1,74,3,74,893,8,74,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,3,75,902,8,75,3,75,904,8,75,1,76,1,76,1,76,
        5,76,909,8,76,10,76,12,76,912,9,76,1,77,1,77,1,77,3,77,917,8,77,
        1,77,1,77,1,78,1,78,1,78,1,78,5,78,925,8,78,10,78,12,78,928,9,78,
        1,79,1,79,1,79,1,80,1,80,1,81,1,81,3,81,937,8,81,1,81,1,81,3,81,
        941,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,3,81,960,8,81,1,81,1,81,1,81,3,81,
        965,8,81,1,81,1,81,1,81,1,81,3,81,971,8,81,1,81,1,81,1,81,1,81,1,
        81,3,81,978,8,81,1,81,1,81,1,81,1,81,3,81,984,8,81,1,81,1,81,1,81,
        1,81,3,81,990,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,999,8,
        81,1,81,3,81,1002,8,81,1,81,4,81,1005,8,81,11,81,12,81,1006,3,81,
        1009,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,3,84,1039,8,84,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1070,8,87,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1079,8,88,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,3,90,1099,8,90,1,90,0,0,91,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,0,24,2,0,176,179,197,198,2,0,51,51,138,138,1,
        0,191,192,2,0,210,210,213,213,9,0,15,15,25,28,73,74,79,81,110,113,
        117,118,131,131,143,143,157,157,9,0,10,10,14,14,16,16,32,32,82,82,
        85,85,127,129,132,132,150,152,20,0,1,2,6,6,8,9,21,23,30,31,39,39,
        41,41,49,49,54,54,77,78,86,86,101,101,103,104,106,107,115,115,122,
        122,124,124,126,126,134,134,139,139,2,0,45,45,83,83,6,0,34,35,91,
        91,119,119,136,137,146,148,156,156,2,0,58,58,100,100,2,0,3,3,42,
        42,2,0,62,62,75,75,2,0,68,68,90,90,1,0,180,181,3,0,170,171,186,186,
        196,196,3,0,13,13,174,175,191,193,3,0,3,3,42,42,186,186,2,0,5,5,
        40,40,2,0,63,63,71,71,2,0,52,52,72,72,1,0,197,198,4,0,33,33,64,64,
        73,73,113,113,2,0,73,73,113,113,3,0,173,174,193,193,199,205,1210,
        0,182,1,0,0,0,2,216,1,0,0,0,4,218,1,0,0,0,6,220,1,0,0,0,8,222,1,
        0,0,0,10,225,1,0,0,0,12,229,1,0,0,0,14,231,1,0,0,0,16,233,1,0,0,
        0,18,235,1,0,0,0,20,237,1,0,0,0,22,239,1,0,0,0,24,241,1,0,0,0,26,
        243,1,0,0,0,28,245,1,0,0,0,30,254,1,0,0,0,32,262,1,0,0,0,34,264,
        1,0,0,0,36,302,1,0,0,0,38,306,1,0,0,0,40,325,1,0,0,0,42,327,1,0,
        0,0,44,343,1,0,0,0,46,347,1,0,0,0,48,357,1,0,0,0,50,368,1,0,0,0,
        52,378,1,0,0,0,54,399,1,0,0,0,56,401,1,0,0,0,58,410,1,0,0,0,60,414,
        1,0,0,0,62,432,1,0,0,0,64,440,1,0,0,0,66,451,1,0,0,0,68,456,1,0,
        0,0,70,461,1,0,0,0,72,469,1,0,0,0,74,478,1,0,0,0,76,538,1,0,0,0,
        78,540,1,0,0,0,80,557,1,0,0,0,82,562,1,0,0,0,84,585,1,0,0,0,86,587,
        1,0,0,0,88,595,1,0,0,0,90,597,1,0,0,0,92,605,1,0,0,0,94,616,1,0,
        0,0,96,623,1,0,0,0,98,636,1,0,0,0,100,638,1,0,0,0,102,640,1,0,0,
        0,104,643,1,0,0,0,106,645,1,0,0,0,108,669,1,0,0,0,110,671,1,0,0,
        0,112,676,1,0,0,0,114,678,1,0,0,0,116,687,1,0,0,0,118,718,1,0,0,
        0,120,726,1,0,0,0,122,732,1,0,0,0,124,735,1,0,0,0,126,766,1,0,0,
        0,128,768,1,0,0,0,130,776,1,0,0,0,132,798,1,0,0,0,134,807,1,0,0,
        0,136,811,1,0,0,0,138,841,1,0,0,0,140,843,1,0,0,0,142,845,1,0,0,
        0,144,859,1,0,0,0,146,868,1,0,0,0,148,882,1,0,0,0,150,903,1,0,0,
        0,152,905,1,0,0,0,154,916,1,0,0,0,156,920,1,0,0,0,158,929,1,0,0,
        0,160,932,1,0,0,0,162,1008,1,0,0,0,164,1010,1,0,0,0,166,1017,1,0,
        0,0,168,1038,1,0,0,0,170,1040,1,0,0,0,172,1051,1,0,0,0,174,1069,
        1,0,0,0,176,1078,1,0,0,0,178,1080,1,0,0,0,180,1098,1,0,0,0,182,183,
        7,0,0,0,183,1,1,0,0,0,184,188,5,13,0,0,185,186,5,188,0,0,186,187,
        5,210,0,0,187,189,5,187,0,0,188,185,1,0,0,0,188,189,1,0,0,0,189,
        217,1,0,0,0,190,194,5,24,0,0,191,192,5,188,0,0,192,193,5,210,0,0,
        193,195,5,187,0,0,194,191,1,0,0,0,194,195,1,0,0,0,195,217,1,0,0,
        0,196,217,5,35,0,0,197,217,5,36,0,0,198,217,5,136,0,0,199,217,5,
        137,0,0,200,217,5,66,0,0,201,209,5,38,0,0,202,203,5,188,0,0,203,
        206,5,210,0,0,204,205,5,185,0,0,205,207,5,210,0,0,206,204,1,0,0,
        0,206,207,1,0,0,0,207,208,1,0,0,0,208,210,5,187,0,0,209,202,1,0,
        0,0,209,210,1,0,0,0,210,217,1,0,0,0,211,217,5,65,0,0,212,217,5,12,
        0,0,213,217,5,53,0,0,214,217,5,108,0,0,215,217,5,43,0,0,216,184,
        1,0,0,0,216,190,1,0,0,0,216,196,1,0,0,0,216,197,1,0,0,0,216,198,
        1,0,0,0,216,199,1,0,0,0,216,200,1,0,0,0,216,201,1,0,0,0,216,211,
        1,0,0,0,216,212,1,0,0,0,216,213,1,0,0,0,216,214,1,0,0,0,216,215,
        1,0,0,0,217,3,1,0,0,0,218,219,5,212,0,0,219,5,1,0,0,0,220,221,7,
        1,0,0,221,7,1,0,0,0,222,223,5,211,0,0,223,9,1,0,0,0,224,226,7,2,
        0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,7,3,
        0,0,228,11,1,0,0,0,229,230,5,215,0,0,230,13,1,0,0,0,231,232,7,4,
        0,0,232,15,1,0,0,0,233,234,7,5,0,0,234,17,1,0,0,0,235,236,7,6,0,
        0,236,19,1,0,0,0,237,238,7,7,0,0,238,21,1,0,0,0,239,240,7,8,0,0,
        240,23,1,0,0,0,241,242,5,169,0,0,242,25,1,0,0,0,243,244,7,9,0,0,
        244,27,1,0,0,0,245,246,5,168,0,0,246,29,1,0,0,0,247,255,3,18,9,0,
        248,255,3,14,7,0,249,255,3,22,11,0,250,255,3,20,10,0,251,255,3,28,
        14,0,252,255,3,24,12,0,253,255,3,26,13,0,254,247,1,0,0,0,254,248,
        1,0,0,0,254,249,1,0,0,0,254,250,1,0,0,0,254,251,1,0,0,0,254,252,
        1,0,0,0,254,253,1,0,0,0,255,31,1,0,0,0,256,263,3,12,6,0,257,263,
        3,10,5,0,258,263,3,8,4,0,259,263,3,6,3,0,260,263,3,4,2,0,261,263,
        5,92,0,0,262,256,1,0,0,0,262,257,1,0,0,0,262,258,1,0,0,0,262,259,
        1,0,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,33,1,0,0,0,264,266,5,
        120,0,0,265,267,7,10,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,
        1,0,0,0,268,283,3,126,63,0,269,270,5,57,0,0,270,272,3,152,76,0,271,
        273,3,110,55,0,272,271,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,
        276,3,158,79,0,275,274,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,
        279,3,78,39,0,278,277,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,
        282,3,82,41,0,281,280,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,
        269,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,287,3,106,53,0,286,
        285,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,290,3,98,49,0,289,
        288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,3,102,51,0,292,
        291,1,0,0,0,292,293,1,0,0,0,293,296,1,0,0,0,294,295,5,55,0,0,295,
        297,5,142,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,
        300,5,182,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,35,1,0,0,0,301,
        303,5,7,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,
        305,5,216,0,0,305,37,1,0,0,0,306,309,3,66,33,0,307,308,5,194,0,0,
        308,310,3,66,33,0,309,307,1,0,0,0,309,310,1,0,0,0,310,39,1,0,0,0,
        311,318,3,120,60,0,312,314,3,0,0,0,313,315,5,4,0,0,314,313,1,0,0,
        0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,3,120,60,0,317,319,1,0,
        0,0,318,312,1,0,0,0,318,319,1,0,0,0,319,326,1,0,0,0,320,322,5,89,
        0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,48,
        0,0,324,326,3,136,68,0,325,311,1,0,0,0,325,321,1,0,0,0,326,41,1,
        0,0,0,327,330,5,19,0,0,328,331,3,44,22,0,329,331,3,46,23,0,330,328,
        1,0,0,0,330,329,1,0,0,0,331,334,1,0,0,0,332,333,5,44,0,0,333,335,
        3,38,19,0,334,332,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,337,
        5,46,0,0,337,43,1,0,0,0,338,339,5,153,0,0,339,340,3,62,31,0,340,
        341,5,135,0,0,341,342,3,38,19,0,342,344,1,0,0,0,343,338,1,0,0,0,
        344,345,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,45,1,0,0,0,347,
        353,3,38,19,0,348,349,5,153,0,0,349,350,3,38,19,0,350,351,5,135,
        0,0,351,352,3,38,19,0,352,354,1,0,0,0,353,348,1,0,0,0,354,355,1,
        0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,47,1,0,0,0,357,358,5,188,
        0,0,358,363,3,52,26,0,359,360,5,185,0,0,360,362,3,52,26,0,361,359,
        1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,366,
        1,0,0,0,365,363,1,0,0,0,366,367,5,187,0,0,367,49,1,0,0,0,368,369,
        5,216,0,0,369,51,1,0,0,0,370,371,3,124,62,0,371,372,5,184,0,0,372,
        374,1,0,0,0,373,370,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,
        376,3,140,70,0,376,377,5,184,0,0,377,379,1,0,0,0,378,373,1,0,0,0,
        378,379,1,0,0,0,379,380,1,0,0,0,380,382,3,50,25,0,381,383,3,134,
        67,0,382,381,1,0,0,0,382,383,1,0,0,0,383,53,1,0,0,0,384,385,3,154,
        77,0,385,386,5,184,0,0,386,387,5,186,0,0,387,400,1,0,0,0,388,391,
        3,38,19,0,389,391,3,162,81,0,390,388,1,0,0,0,390,389,1,0,0,0,391,
        394,1,0,0,0,392,393,7,11,0,0,393,395,5,215,0,0,394,392,1,0,0,0,394,
        395,1,0,0,0,395,397,1,0,0,0,396,398,3,36,18,0,397,396,1,0,0,0,397,
        398,1,0,0,0,398,400,1,0,0,0,399,384,1,0,0,0,399,390,1,0,0,0,400,
        55,1,0,0,0,401,406,3,58,29,0,402,403,5,173,0,0,403,405,3,58,29,0,
        404,402,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,
        407,57,1,0,0,0,408,406,1,0,0,0,409,411,5,89,0,0,410,409,1,0,0,0,
        410,411,1,0,0,0,411,412,1,0,0,0,412,413,3,60,30,0,413,59,1,0,0,0,
        414,430,3,40,20,0,415,417,5,69,0,0,416,418,5,89,0,0,417,416,1,0,
        0,0,417,418,1,0,0,0,418,423,1,0,0,0,419,424,3,6,3,0,420,424,5,92,
        0,0,421,422,5,42,0,0,422,424,5,57,0,0,423,419,1,0,0,0,423,420,1,
        0,0,0,423,421,1,0,0,0,424,426,1,0,0,0,425,415,1,0,0,0,425,426,1,
        0,0,0,426,431,1,0,0,0,427,429,7,12,0,0,428,427,1,0,0,0,428,429,1,
        0,0,0,429,431,1,0,0,0,430,425,1,0,0,0,430,428,1,0,0,0,431,61,1,0,
        0,0,432,437,3,56,28,0,433,434,5,172,0,0,434,436,3,56,28,0,435,433,
        1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,63,1,
        0,0,0,439,437,1,0,0,0,440,441,5,188,0,0,441,446,3,62,31,0,442,443,
        5,185,0,0,443,445,3,62,31,0,444,442,1,0,0,0,445,448,1,0,0,0,446,
        444,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,
        450,5,187,0,0,450,65,1,0,0,0,451,454,3,68,34,0,452,453,5,195,0,0,
        453,455,3,68,34,0,454,452,1,0,0,0,454,455,1,0,0,0,455,67,1,0,0,0,
        456,459,3,70,35,0,457,458,7,13,0,0,458,460,3,70,35,0,459,457,1,0,
        0,0,459,460,1,0,0,0,460,69,1,0,0,0,461,466,3,72,36,0,462,463,7,2,
        0,0,463,465,3,72,36,0,464,462,1,0,0,0,465,468,1,0,0,0,466,464,1,
        0,0,0,466,467,1,0,0,0,467,71,1,0,0,0,468,466,1,0,0,0,469,474,3,74,
        37,0,470,471,7,14,0,0,471,473,3,74,37,0,472,470,1,0,0,0,473,476,
        1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,73,1,0,0,0,476,474,1,
        0,0,0,477,479,7,15,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,
        0,0,0,480,482,3,132,66,0,481,483,5,89,0,0,482,481,1,0,0,0,482,483,
        1,0,0,0,483,486,1,0,0,0,484,485,7,2,0,0,485,487,3,94,47,0,486,484,
        1,0,0,0,486,487,1,0,0,0,487,75,1,0,0,0,488,501,3,30,15,0,489,498,
        5,188,0,0,490,495,3,62,31,0,491,492,5,185,0,0,492,494,3,62,31,0,
        493,491,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,
        496,499,1,0,0,0,497,495,1,0,0,0,498,490,1,0,0,0,498,499,1,0,0,0,
        499,500,1,0,0,0,500,502,5,187,0,0,501,489,1,0,0,0,501,502,1,0,0,
        0,502,539,1,0,0,0,503,504,5,20,0,0,504,505,5,188,0,0,505,506,3,62,
        31,0,506,507,5,7,0,0,507,508,3,2,1,0,508,509,5,187,0,0,509,539,1,
        0,0,0,510,511,5,29,0,0,511,512,5,188,0,0,512,513,5,215,0,0,513,514,
        5,185,0,0,514,515,5,215,0,0,515,516,5,185,0,0,516,517,5,215,0,0,
        517,539,5,187,0,0,518,519,5,102,0,0,519,520,5,188,0,0,520,521,3,
        62,31,0,521,522,5,67,0,0,522,523,3,62,31,0,523,524,5,187,0,0,524,
        539,1,0,0,0,525,526,3,16,8,0,526,528,5,188,0,0,527,529,7,16,0,0,
        528,527,1,0,0,0,528,529,1,0,0,0,529,534,1,0,0,0,530,533,3,38,19,
        0,531,533,3,162,81,0,532,530,1,0,0,0,532,531,1,0,0,0,533,535,1,0,
        0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,537,5,187,
        0,0,537,539,1,0,0,0,538,488,1,0,0,0,538,503,1,0,0,0,538,510,1,0,
        0,0,538,518,1,0,0,0,538,525,1,0,0,0,539,77,1,0,0,0,540,541,5,59,
        0,0,541,542,5,18,0,0,542,547,3,80,40,0,543,544,5,185,0,0,544,546,
        3,80,40,0,545,543,1,0,0,0,546,549,1,0,0,0,547,545,1,0,0,0,547,548,
        1,0,0,0,548,552,1,0,0,0,549,547,1,0,0,0,550,551,5,155,0,0,551,553,
        5,114,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,79,1,0,0,0,554,558,
        3,52,26,0,555,558,5,210,0,0,556,558,3,38,19,0,557,554,1,0,0,0,557,
        555,1,0,0,0,557,556,1,0,0,0,558,560,1,0,0,0,559,561,7,17,0,0,560,
        559,1,0,0,0,560,561,1,0,0,0,561,81,1,0,0,0,562,563,5,60,0,0,563,
        564,3,62,31,0,564,83,1,0,0,0,565,566,5,144,0,0,566,567,3,92,46,0,
        567,569,5,188,0,0,568,570,3,90,45,0,569,568,1,0,0,0,569,570,1,0,
        0,0,570,571,1,0,0,0,571,572,5,187,0,0,572,586,1,0,0,0,573,574,5,
        61,0,0,574,575,3,92,46,0,575,576,5,188,0,0,576,577,3,90,45,0,577,
        578,5,187,0,0,578,586,1,0,0,0,579,580,5,56,0,0,580,581,3,92,46,0,
        581,582,5,188,0,0,582,583,3,90,45,0,583,584,5,187,0,0,584,586,1,
        0,0,0,585,565,1,0,0,0,585,573,1,0,0,0,585,579,1,0,0,0,586,85,1,0,
        0,0,587,592,3,84,42,0,588,589,5,185,0,0,589,591,3,84,42,0,590,588,
        1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,87,1,
        0,0,0,594,592,1,0,0,0,595,596,5,216,0,0,596,89,1,0,0,0,597,602,3,
        88,44,0,598,599,5,185,0,0,599,601,3,88,44,0,600,598,1,0,0,0,601,
        604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,91,1,0,0,0,604,602,
        1,0,0,0,605,614,7,18,0,0,606,612,5,55,0,0,607,613,5,70,0,0,608,609,
        5,97,0,0,609,613,5,18,0,0,610,611,5,59,0,0,611,613,5,18,0,0,612,
        607,1,0,0,0,612,608,1,0,0,0,612,610,1,0,0,0,613,615,1,0,0,0,614,
        606,1,0,0,0,614,615,1,0,0,0,615,93,1,0,0,0,616,617,5,66,0,0,617,
        618,3,12,6,0,618,95,1,0,0,0,619,620,5,96,0,0,620,624,3,62,31,0,621,
        622,5,145,0,0,622,624,3,48,24,0,623,619,1,0,0,0,623,621,1,0,0,0,
        624,97,1,0,0,0,625,626,5,76,0,0,626,629,3,104,52,0,627,628,5,94,
        0,0,628,630,3,100,50,0,629,627,1,0,0,0,629,630,1,0,0,0,630,637,1,
        0,0,0,631,632,5,94,0,0,632,633,3,100,50,0,633,634,5,76,0,0,634,635,
        3,104,52,0,635,637,1,0,0,0,636,625,1,0,0,0,636,631,1,0,0,0,637,99,
        1,0,0,0,638,639,5,210,0,0,639,101,1,0,0,0,640,641,5,94,0,0,641,642,
        3,100,50,0,642,103,1,0,0,0,643,644,5,210,0,0,644,105,1,0,0,0,645,
        646,5,97,0,0,646,647,5,18,0,0,647,652,3,108,54,0,648,649,5,185,0,
        0,649,651,3,108,54,0,650,648,1,0,0,0,651,654,1,0,0,0,652,650,1,0,
        0,0,652,653,1,0,0,0,653,107,1,0,0,0,654,652,1,0,0,0,655,663,3,80,
        40,0,656,658,7,17,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,664,1,
        0,0,0,659,660,5,93,0,0,660,662,7,19,0,0,661,659,1,0,0,0,661,662,
        1,0,0,0,662,664,1,0,0,0,663,657,1,0,0,0,663,661,1,0,0,0,664,670,
        1,0,0,0,665,666,3,80,40,0,666,667,5,145,0,0,667,668,7,20,0,0,668,
        670,1,0,0,0,669,655,1,0,0,0,669,665,1,0,0,0,670,109,1,0,0,0,671,
        672,5,99,0,0,672,673,5,188,0,0,673,674,3,114,57,0,674,675,5,187,
        0,0,675,111,1,0,0,0,676,677,5,216,0,0,677,113,1,0,0,0,678,683,3,
        112,56,0,679,680,5,185,0,0,680,682,3,112,56,0,681,679,1,0,0,0,682,
        685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,115,1,0,0,0,685,
        683,1,0,0,0,686,688,5,89,0,0,687,686,1,0,0,0,687,688,1,0,0,0,688,
        716,1,0,0,0,689,692,5,67,0,0,690,693,3,136,68,0,691,693,3,64,32,
        0,692,690,1,0,0,0,692,691,1,0,0,0,693,717,1,0,0,0,694,695,7,11,0,
        0,695,698,3,132,66,0,696,697,5,47,0,0,697,699,3,132,66,0,698,696,
        1,0,0,0,698,699,1,0,0,0,699,717,1,0,0,0,700,703,5,109,0,0,701,704,
        3,38,19,0,702,704,3,162,81,0,703,701,1,0,0,0,703,702,1,0,0,0,704,
        717,1,0,0,0,705,707,5,11,0,0,706,708,5,133,0,0,707,706,1,0,0,0,707,
        708,1,0,0,0,708,711,1,0,0,0,709,712,3,38,19,0,710,712,3,162,81,0,
        711,709,1,0,0,0,711,710,1,0,0,0,712,713,1,0,0,0,713,714,5,173,0,
        0,714,715,3,120,60,0,715,717,1,0,0,0,716,689,1,0,0,0,716,694,1,0,
        0,0,716,700,1,0,0,0,716,705,1,0,0,0,717,117,1,0,0,0,718,719,5,125,
        0,0,719,722,7,11,0,0,720,723,3,38,19,0,721,723,3,162,81,0,722,720,
        1,0,0,0,722,721,1,0,0,0,723,119,1,0,0,0,724,727,3,38,19,0,725,727,
        3,162,81,0,726,724,1,0,0,0,726,725,1,0,0,0,727,730,1,0,0,0,728,731,
        3,116,58,0,729,731,3,118,59,0,730,728,1,0,0,0,730,729,1,0,0,0,730,
        731,1,0,0,0,731,121,1,0,0,0,732,733,3,130,65,0,733,734,5,182,0,0,
        734,123,1,0,0,0,735,736,5,216,0,0,736,125,1,0,0,0,737,742,3,54,27,
        0,738,739,5,185,0,0,739,741,3,54,27,0,740,738,1,0,0,0,741,744,1,
        0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,767,1,0,0,0,744,742,1,
        0,0,0,745,755,5,186,0,0,746,747,5,185,0,0,747,752,3,54,27,0,748,
        749,5,185,0,0,749,751,3,54,27,0,750,748,1,0,0,0,751,754,1,0,0,0,
        752,750,1,0,0,0,752,753,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,
        755,746,1,0,0,0,755,756,1,0,0,0,756,767,1,0,0,0,757,758,5,96,0,0,
        758,763,3,128,64,0,759,760,5,185,0,0,760,762,3,54,27,0,761,759,1,
        0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,767,1,
        0,0,0,765,763,1,0,0,0,766,737,1,0,0,0,766,745,1,0,0,0,766,757,1,
        0,0,0,767,127,1,0,0,0,768,773,3,54,27,0,769,770,5,185,0,0,770,772,
        3,54,27,0,771,769,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,
        1,0,0,0,774,129,1,0,0,0,775,773,1,0,0,0,776,784,3,34,17,0,777,779,
        5,140,0,0,778,780,5,3,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,
        1,0,0,0,781,783,3,34,17,0,782,777,1,0,0,0,783,786,1,0,0,0,784,782,
        1,0,0,0,784,785,1,0,0,0,785,131,1,0,0,0,786,784,1,0,0,0,787,799,
        3,32,16,0,788,799,3,64,32,0,789,799,3,52,26,0,790,799,3,76,38,0,
        791,792,5,116,0,0,792,799,3,64,32,0,793,799,3,136,68,0,794,795,5,
        48,0,0,795,799,3,136,68,0,796,799,3,94,47,0,797,799,3,42,21,0,798,
        787,1,0,0,0,798,788,1,0,0,0,798,789,1,0,0,0,798,790,1,0,0,0,798,
        791,1,0,0,0,798,793,1,0,0,0,798,794,1,0,0,0,798,796,1,0,0,0,798,
        797,1,0,0,0,799,133,1,0,0,0,800,801,5,190,0,0,801,804,5,210,0,0,
        802,803,5,183,0,0,803,805,5,210,0,0,804,802,1,0,0,0,804,805,1,0,
        0,0,805,806,1,0,0,0,806,808,5,189,0,0,807,800,1,0,0,0,808,809,1,
        0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,135,1,0,0,0,811,812,5,
        188,0,0,812,813,3,130,65,0,813,814,5,187,0,0,814,137,1,0,0,0,815,
        817,3,154,77,0,816,818,3,110,55,0,817,816,1,0,0,0,817,818,1,0,0,
        0,818,820,1,0,0,0,819,821,3,36,18,0,820,819,1,0,0,0,820,821,1,0,
        0,0,821,823,1,0,0,0,822,824,3,86,43,0,823,822,1,0,0,0,823,824,1,
        0,0,0,824,842,1,0,0,0,825,826,3,136,68,0,826,827,3,36,18,0,827,842,
        1,0,0,0,828,829,5,188,0,0,829,830,3,152,76,0,830,831,5,187,0,0,831,
        842,1,0,0,0,832,833,5,95,0,0,833,834,3,150,75,0,834,835,5,73,0,0,
        835,836,5,98,0,0,836,837,5,70,0,0,837,838,3,150,75,0,838,839,5,96,
        0,0,839,840,3,62,31,0,840,842,1,0,0,0,841,815,1,0,0,0,841,825,1,
        0,0,0,841,828,1,0,0,0,841,832,1,0,0,0,842,139,1,0,0,0,843,844,5,
        216,0,0,844,141,1,0,0,0,845,856,3,144,72,0,846,848,7,21,0,0,847,
        846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,850,5,70,0,0,850,
        852,3,138,69,0,851,853,3,96,48,0,852,851,1,0,0,0,852,853,1,0,0,0,
        853,855,1,0,0,0,854,847,1,0,0,0,855,858,1,0,0,0,856,854,1,0,0,0,
        856,857,1,0,0,0,857,143,1,0,0,0,858,856,1,0,0,0,859,866,3,146,73,
        0,860,861,5,130,0,0,861,864,3,138,69,0,862,863,5,96,0,0,863,865,
        3,62,31,0,864,862,1,0,0,0,864,865,1,0,0,0,865,867,1,0,0,0,866,860,
        1,0,0,0,866,867,1,0,0,0,867,145,1,0,0,0,868,879,3,148,74,0,869,871,
        7,22,0,0,870,872,5,98,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,
        1,0,0,0,873,874,5,70,0,0,874,875,3,148,74,0,875,876,3,96,48,0,876,
        878,1,0,0,0,877,869,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,
        880,1,0,0,0,880,147,1,0,0,0,881,879,1,0,0,0,882,892,3,138,69,0,883,
        888,5,88,0,0,884,886,7,22,0,0,885,887,5,98,0,0,886,885,1,0,0,0,886,
        887,1,0,0,0,887,889,1,0,0,0,888,884,1,0,0,0,888,889,1,0,0,0,889,
        890,1,0,0,0,890,891,5,70,0,0,891,893,3,138,69,0,892,883,1,0,0,0,
        892,893,1,0,0,0,893,149,1,0,0,0,894,904,3,142,71,0,895,896,5,188,
        0,0,896,897,3,156,78,0,897,898,5,187,0,0,898,899,1,0,0,0,899,901,
        3,36,18,0,900,902,3,48,24,0,901,900,1,0,0,0,901,902,1,0,0,0,902,
        904,1,0,0,0,903,894,1,0,0,0,903,895,1,0,0,0,904,151,1,0,0,0,905,
        910,3,150,75,0,906,907,5,185,0,0,907,909,3,150,75,0,908,906,1,0,
        0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,153,1,0,
        0,0,912,910,1,0,0,0,913,914,3,124,62,0,914,915,5,184,0,0,915,917,
        1,0,0,0,916,913,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,919,
        3,140,70,0,919,155,1,0,0,0,920,921,5,149,0,0,921,926,3,64,32,0,922,
        923,5,185,0,0,923,925,3,64,32,0,924,922,1,0,0,0,925,928,1,0,0,0,
        926,924,1,0,0,0,926,927,1,0,0,0,927,157,1,0,0,0,928,926,1,0,0,0,
        929,930,5,154,0,0,930,931,3,62,31,0,931,159,1,0,0,0,932,933,7,23,
        0,0,933,161,1,0,0,0,934,937,3,180,90,0,935,937,3,164,82,0,936,934,
        1,0,0,0,936,935,1,0,0,0,937,1009,1,0,0,0,938,941,3,164,82,0,939,
        941,3,132,66,0,940,938,1,0,0,0,940,939,1,0,0,0,941,942,1,0,0,0,942,
        943,3,160,80,0,943,944,3,180,90,0,944,1009,1,0,0,0,945,946,3,180,
        90,0,946,947,5,176,0,0,947,948,3,180,90,0,948,1009,1,0,0,0,949,950,
        3,180,90,0,950,951,3,160,80,0,951,952,3,180,90,0,952,1009,1,0,0,
        0,953,960,3,168,84,0,954,955,3,132,66,0,955,956,5,206,0,0,956,957,
        3,168,84,0,957,960,1,0,0,0,958,960,3,132,66,0,959,953,1,0,0,0,959,
        954,1,0,0,0,959,958,1,0,0,0,960,1009,1,0,0,0,961,965,3,164,82,0,
        962,965,3,166,83,0,963,965,3,132,66,0,964,961,1,0,0,0,964,962,1,
        0,0,0,964,963,1,0,0,0,965,966,1,0,0,0,966,970,5,207,0,0,967,971,
        3,164,82,0,968,971,3,166,83,0,969,971,3,132,66,0,970,967,1,0,0,0,
        970,968,1,0,0,0,970,969,1,0,0,0,971,1009,1,0,0,0,972,977,5,208,0,
        0,973,978,3,166,83,0,974,978,3,172,86,0,975,978,3,174,87,0,976,978,
        3,132,66,0,977,973,1,0,0,0,977,974,1,0,0,0,977,975,1,0,0,0,977,976,
        1,0,0,0,978,1009,1,0,0,0,979,983,5,209,0,0,980,984,3,166,83,0,981,
        984,3,170,85,0,982,984,3,132,66,0,983,980,1,0,0,0,983,981,1,0,0,
        0,983,982,1,0,0,0,984,1009,1,0,0,0,985,989,5,192,0,0,986,990,3,168,
        84,0,987,990,3,176,88,0,988,990,3,132,66,0,989,986,1,0,0,0,989,987,
        1,0,0,0,989,988,1,0,0,0,990,1009,1,0,0,0,991,999,3,164,82,0,992,
        999,3,166,83,0,993,999,3,168,84,0,994,999,3,170,85,0,995,999,3,174,
        87,0,996,999,3,176,88,0,997,999,3,132,66,0,998,991,1,0,0,0,998,992,
        1,0,0,0,998,993,1,0,0,0,998,994,1,0,0,0,998,995,1,0,0,0,998,996,
        1,0,0,0,998,997,1,0,0,0,999,1004,1,0,0,0,1000,1002,7,2,0,0,1001,
        1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1005,3,178,
        89,0,1004,1001,1,0,0,0,1005,1006,1,0,0,0,1006,1004,1,0,0,0,1006,
        1007,1,0,0,0,1007,1009,1,0,0,0,1008,936,1,0,0,0,1008,940,1,0,0,0,
        1008,945,1,0,0,0,1008,949,1,0,0,0,1008,959,1,0,0,0,1008,964,1,0,
        0,0,1008,972,1,0,0,0,1008,979,1,0,0,0,1008,985,1,0,0,0,1008,998,
        1,0,0,0,1009,163,1,0,0,0,1010,1011,5,160,0,0,1011,1012,5,188,0,0,
        1012,1013,3,38,19,0,1013,1014,5,185,0,0,1014,1015,3,38,19,0,1015,
        1016,5,187,0,0,1016,165,1,0,0,0,1017,1018,5,161,0,0,1018,1019,5,
        188,0,0,1019,1020,3,164,82,0,1020,1021,5,185,0,0,1021,1022,3,38,
        19,0,1022,1023,5,187,0,0,1023,167,1,0,0,0,1024,1025,5,162,0,0,1025,
        1026,5,188,0,0,1026,1027,3,164,82,0,1027,1028,5,185,0,0,1028,1029,
        3,164,82,0,1029,1030,5,187,0,0,1030,1039,1,0,0,0,1031,1032,5,162,
        0,0,1032,1033,5,188,0,0,1033,1034,3,178,89,0,1034,1035,5,185,0,0,
        1035,1036,3,38,19,0,1036,1037,5,187,0,0,1037,1039,1,0,0,0,1038,1024,
        1,0,0,0,1038,1031,1,0,0,0,1039,169,1,0,0,0,1040,1041,5,163,0,0,1041,
        1042,5,188,0,0,1042,1043,3,164,82,0,1043,1044,5,185,0,0,1044,1045,
        3,38,19,0,1045,1046,5,185,0,0,1046,1047,3,38,19,0,1047,1048,5,185,
        0,0,1048,1049,3,38,19,0,1049,1050,5,187,0,0,1050,171,1,0,0,0,1051,
        1052,5,166,0,0,1052,1053,5,188,0,0,1053,1054,3,164,82,0,1054,1055,
        5,185,0,0,1055,1056,3,164,82,0,1056,1057,5,187,0,0,1057,173,1,0,
        0,0,1058,1059,5,164,0,0,1059,1070,5,215,0,0,1060,1061,5,164,0,0,
        1061,1062,5,188,0,0,1062,1063,3,52,26,0,1063,1064,5,187,0,0,1064,
        1070,1,0,0,0,1065,1066,5,164,0,0,1066,1067,5,188,0,0,1067,1068,5,
        215,0,0,1068,1070,5,187,0,0,1069,1058,1,0,0,0,1069,1060,1,0,0,0,
        1069,1065,1,0,0,0,1070,175,1,0,0,0,1071,1072,5,165,0,0,1072,1079,
        5,215,0,0,1073,1074,5,165,0,0,1074,1075,5,188,0,0,1075,1076,3,52,
        26,0,1076,1077,5,187,0,0,1077,1079,1,0,0,0,1078,1071,1,0,0,0,1078,
        1073,1,0,0,0,1079,177,1,0,0,0,1080,1081,5,167,0,0,1081,1082,5,188,
        0,0,1082,1083,3,38,19,0,1083,1084,5,185,0,0,1084,1085,3,38,19,0,
        1085,1086,5,185,0,0,1086,1087,3,38,19,0,1087,1088,5,185,0,0,1088,
        1089,5,214,0,0,1089,1090,5,187,0,0,1090,179,1,0,0,0,1091,1099,3,
        166,83,0,1092,1099,3,168,84,0,1093,1099,3,170,85,0,1094,1099,3,172,
        86,0,1095,1099,3,174,87,0,1096,1099,3,176,88,0,1097,1099,3,132,66,
        0,1098,1091,1,0,0,0,1098,1092,1,0,0,0,1098,1093,1,0,0,0,1098,1094,
        1,0,0,0,1098,1095,1,0,0,0,1098,1096,1,0,0,0,1098,1097,1,0,0,0,1099,
        181,1,0,0,0,135,188,194,206,209,216,225,254,262,266,272,275,278,
        281,283,286,289,292,296,299,302,309,314,318,321,325,330,334,345,
        355,363,373,378,382,390,394,397,399,406,410,417,423,425,428,430,
        437,446,454,459,466,474,478,482,486,495,498,501,528,532,534,538,
        547,552,557,560,569,585,592,602,612,614,623,629,636,652,657,661,
        663,669,683,687,692,698,703,707,711,716,722,726,730,742,752,755,
        763,766,773,779,784,798,804,809,817,820,823,841,847,852,856,864,
        866,871,879,886,888,892,901,903,910,916,926,936,940,959,964,970,
        977,983,989,998,1001,1006,1008,1038,1069,1078,1098
    ]

class PostgreSQLParser ( Parser ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'@'", "'!!'", "<INVALID>", 
                     "<INVALID>", "'<='", "'>='", "'<<'", "'>>'", "';'", 
                     "':'", "'.'", "','", "'*'", "')'", "'('", "']'", "'['", 
                     "'+'", "'-'", "'~'", "'|'", "'&'", "'^'", "'>'", "'<'", 
                     "'<@'", "'@>'", "'!@'", "'!<@'", "'!~'", "'!@>'", "'!&&'", 
                     "'#'", "'<->'", "'@-@'", "'@@'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "ALL", "ANY", "ASC", "ASIN", 
                      "AS_SYM", "ATAN", "ATAN2", "AVG", "BETWEEN", "BIGINT", 
                      "BINARY", "BIT_AND", "BIT_LENGTH", "BIT_OR", "BOOLEAN_SYM", 
                      "BY_SYM", "CASE_SYM", "CAST_SYM", "CBRT", "CEIL", 
                      "CEILING", "CHAR", "CHR", "CHAR_LENGTH", "CONCAT", 
                      "CONCAT_WS", "CONVERT_SYM", "COS", "COT", "COUNT", 
                      "CROSS", "DATE_PART", "DATE_SYM", "DATETIME", "DAY_SYM", 
                      "DECIMAL_SYM", "DEGREES", "DESC", "DIV", "DISTINCT", 
                      "DOUBLE_PRECISION_SYM", "ELSE_SYM", "ENCODE", "END_SYM", 
                      "ESCAPE_SYM", "EXISTS", "EXP", "EXPANSION_SYM", "FALSE_SYM", 
                      "FIRST_SYM", "FLOAT", "FLOOR", "FOR_SYM", "FORCE_SYM", 
                      "FROM", "GAIA_HEALPIX_INDEX", "GROUP_SYM", "HAVING", 
                      "IGNORE_SYM", "ILIKE_SYM", "INDEX_SYM", "INNER_SYM", 
                      "INTEGER_SYM", "INTERVAL_SYM", "IN_SYM", "ISNULL", 
                      "IS_SYM", "JOIN_SYM", "KEY_SYM", "LAST_SYM", "LEFT", 
                      "LENGTH", "LIKE_SYM", "LIMIT", "LN", "LOG", "LOWER", 
                      "LPAD", "LTRIM", "MAX_SYM", "MD5", "MINUTE", "MIN_SYM", 
                      "MOD", "MODE_SYM", "NATURAL", "NOT_SYM", "NOTNULL", 
                      "NOW", "NULL_SYM", "NULLS_SYM", "OFFSET_SYM", "OJ_SYM", 
                      "ON", "ORDER_SYM", "OUTER", "PARTITION_SYM", "PDIST", 
                      "PI", "POSITION_SYM", "POW", "POWER", "QUERY_SYM", 
                      "RADIANS", "RANDOM", "REAL", "REGEXP", "REPEAT", "REPLACE", 
                      "REVERSE", "RIGHT", "ROLLUP_SYM", "ROUND", "ROW_SYM", 
                      "RPAD", "RTRIM", "SECOND", "SELECT", "SHARE_SYM", 
                      "SIGN", "SIGNED_SYM", "SIN", "SOUNDS_SYM", "SQRT", 
                      "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STRAIGHT_JOIN", 
                      "SUBSTRING", "SUM", "SYMMETRIC", "TAN", "THEN_SYM", 
                      "TIME_SYM", "TIMESTAMP", "TRUE_SYM", "TRUNCATE", "UNION_SYM", 
                      "UNSIGNED_SYM", "UPDATE", "UPPER", "USE_SYM", "USING_SYM", 
                      "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUES", 
                      "VARIANCE", "VAR_POP", "VAR_SAMP", "WHEN_SYM", "WHERE", 
                      "WITH", "YEAR", "ASCII_SYM", "LATIN1", "UTF8", "SPOINT", 
                      "SCIRCLE", "SLINE", "SELLIPSE", "SPOLY", "SPATH", 
                      "SBOX", "STRANS", "AREA", "ARRAY_LENGTH", "DIVIDE", 
                      "MOD_SYM", "OR_SYM", "AND_SYM", "ABS_VAL_OR_SCONTAINS", 
                      "DFACTORIAL", "EQ", "NOT_EQ", "LET", "GET", "SHIFT_LEFT", 
                      "SHIFT_RIGHT", "SEMI", "COLON", "DOT", "COMMA", "ASTERISK", 
                      "RPAREN", "LPAREN", "RBRACK", "LBRACK", "PLUS", "MINUS", 
                      "NEGATION", "VERTBAR", "BITAND", "POWER_OP", "GTH", 
                      "LTH", "SCONTAINS2", "SLEFTCONTAINS2", "SNOTCONTAINS", 
                      "SNOTCONTAINS2", "SLEFTNOTCONTAINS", "SLEFTNOTCONTAINS2", 
                      "SNOTOVERLAP", "SCROSS", "SDISTANCE", "SLENGTH", "SCENTER", 
                      "INTEGER_NUM", "HEX_DIGIT", "BIT_NUM", "REAL_NUMBER", 
                      "TRANS", "TEXT_STRING", "ID", "COMMENT", "WS" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_bit_literal = 2
    RULE_boolean_literal = 3
    RULE_hex_literal = 4
    RULE_number_literal = 5
    RULE_string_literal = 6
    RULE_char_functions = 7
    RULE_group_functions = 8
    RULE_number_functions = 9
    RULE_other_functions = 10
    RULE_time_functions = 11
    RULE_array_functions = 12
    RULE_custom_functions = 13
    RULE_pg_sphere_functions = 14
    RULE_functionList = 15
    RULE_literal_value = 16
    RULE_select_expression = 17
    RULE_alias = 18
    RULE_bit_expr = 19
    RULE_bool_primary = 20
    RULE_case_when_statement = 21
    RULE_case_when_statement1 = 22
    RULE_case_when_statement2 = 23
    RULE_column_list = 24
    RULE_column_name = 25
    RULE_column_spec = 26
    RULE_displayed_column = 27
    RULE_exp_factor1 = 28
    RULE_exp_factor2 = 29
    RULE_exp_factor3 = 30
    RULE_expression = 31
    RULE_expression_list = 32
    RULE_factor1 = 33
    RULE_factor2 = 34
    RULE_factor3 = 35
    RULE_factor4 = 36
    RULE_factor5 = 37
    RULE_function_call = 38
    RULE_groupby_clause = 39
    RULE_groupby_item = 40
    RULE_having_clause = 41
    RULE_index_hint = 42
    RULE_index_hint_list = 43
    RULE_index_name = 44
    RULE_index_list = 45
    RULE_index_options = 46
    RULE_interval_expr = 47
    RULE_join_condition = 48
    RULE_limit_clause = 49
    RULE_offset = 50
    RULE_offset_clause = 51
    RULE_row_count = 52
    RULE_orderby_clause = 53
    RULE_orderby_item = 54
    RULE_partition_clause = 55
    RULE_partition_name = 56
    RULE_partition_names = 57
    RULE_bit_fac1 = 58
    RULE_bit_fac2 = 59
    RULE_predicate = 60
    RULE_query = 61
    RULE_schema_name = 62
    RULE_select_list = 63
    RULE_subselect_list = 64
    RULE_select_statement = 65
    RULE_simple_expr = 66
    RULE_slice_spec = 67
    RULE_subquery = 68
    RULE_table_atom = 69
    RULE_table_name = 70
    RULE_table_factor1 = 71
    RULE_table_factor2 = 72
    RULE_table_factor3 = 73
    RULE_table_factor4 = 74
    RULE_table_reference = 75
    RULE_table_references = 76
    RULE_table_spec = 77
    RULE_values_list = 78
    RULE_where_clause = 79
    RULE_pg_sphere_op = 80
    RULE_sbit_expr = 81
    RULE_spoint = 82
    RULE_scircle = 83
    RULE_sline = 84
    RULE_sellipse = 85
    RULE_sbox = 86
    RULE_spoly = 87
    RULE_spath = 88
    RULE_strans = 89
    RULE_pg_sphere_object = 90

    ruleNames =  [ "relational_op", "cast_data_type", "bit_literal", "boolean_literal", 
                   "hex_literal", "number_literal", "string_literal", "char_functions", 
                   "group_functions", "number_functions", "other_functions", 
                   "time_functions", "array_functions", "custom_functions", 
                   "pg_sphere_functions", "functionList", "literal_value", 
                   "select_expression", "alias", "bit_expr", "bool_primary", 
                   "case_when_statement", "case_when_statement1", "case_when_statement2", 
                   "column_list", "column_name", "column_spec", "displayed_column", 
                   "exp_factor1", "exp_factor2", "exp_factor3", "expression", 
                   "expression_list", "factor1", "factor2", "factor3", "factor4", 
                   "factor5", "function_call", "groupby_clause", "groupby_item", 
                   "having_clause", "index_hint", "index_hint_list", "index_name", 
                   "index_list", "index_options", "interval_expr", "join_condition", 
                   "limit_clause", "offset", "offset_clause", "row_count", 
                   "orderby_clause", "orderby_item", "partition_clause", 
                   "partition_name", "partition_names", "bit_fac1", "bit_fac2", 
                   "predicate", "query", "schema_name", "select_list", "subselect_list", 
                   "select_statement", "simple_expr", "slice_spec", "subquery", 
                   "table_atom", "table_name", "table_factor1", "table_factor2", 
                   "table_factor3", "table_factor4", "table_reference", 
                   "table_references", "table_spec", "values_list", "where_clause", 
                   "pg_sphere_op", "sbit_expr", "spoint", "scircle", "sline", 
                   "sellipse", "sbox", "spoly", "spath", "strans", "pg_sphere_object" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    ALL=3
    ANY=4
    ASC=5
    ASIN=6
    AS_SYM=7
    ATAN=8
    ATAN2=9
    AVG=10
    BETWEEN=11
    BIGINT=12
    BINARY=13
    BIT_AND=14
    BIT_LENGTH=15
    BIT_OR=16
    BOOLEAN_SYM=17
    BY_SYM=18
    CASE_SYM=19
    CAST_SYM=20
    CBRT=21
    CEIL=22
    CEILING=23
    CHAR=24
    CHR=25
    CHAR_LENGTH=26
    CONCAT=27
    CONCAT_WS=28
    CONVERT_SYM=29
    COS=30
    COT=31
    COUNT=32
    CROSS=33
    DATE_PART=34
    DATE_SYM=35
    DATETIME=36
    DAY_SYM=37
    DECIMAL_SYM=38
    DEGREES=39
    DESC=40
    DIV=41
    DISTINCT=42
    DOUBLE_PRECISION_SYM=43
    ELSE_SYM=44
    ENCODE=45
    END_SYM=46
    ESCAPE_SYM=47
    EXISTS=48
    EXP=49
    EXPANSION_SYM=50
    FALSE_SYM=51
    FIRST_SYM=52
    FLOAT=53
    FLOOR=54
    FOR_SYM=55
    FORCE_SYM=56
    FROM=57
    GAIA_HEALPIX_INDEX=58
    GROUP_SYM=59
    HAVING=60
    IGNORE_SYM=61
    ILIKE_SYM=62
    INDEX_SYM=63
    INNER_SYM=64
    INTEGER_SYM=65
    INTERVAL_SYM=66
    IN_SYM=67
    ISNULL=68
    IS_SYM=69
    JOIN_SYM=70
    KEY_SYM=71
    LAST_SYM=72
    LEFT=73
    LENGTH=74
    LIKE_SYM=75
    LIMIT=76
    LN=77
    LOG=78
    LOWER=79
    LPAD=80
    LTRIM=81
    MAX_SYM=82
    MD5=83
    MINUTE=84
    MIN_SYM=85
    MOD=86
    MODE_SYM=87
    NATURAL=88
    NOT_SYM=89
    NOTNULL=90
    NOW=91
    NULL_SYM=92
    NULLS_SYM=93
    OFFSET_SYM=94
    OJ_SYM=95
    ON=96
    ORDER_SYM=97
    OUTER=98
    PARTITION_SYM=99
    PDIST=100
    PI=101
    POSITION_SYM=102
    POW=103
    POWER=104
    QUERY_SYM=105
    RADIANS=106
    RANDOM=107
    REAL=108
    REGEXP=109
    REPEAT=110
    REPLACE=111
    REVERSE=112
    RIGHT=113
    ROLLUP_SYM=114
    ROUND=115
    ROW_SYM=116
    RPAD=117
    RTRIM=118
    SECOND=119
    SELECT=120
    SHARE_SYM=121
    SIGN=122
    SIGNED_SYM=123
    SIN=124
    SOUNDS_SYM=125
    SQRT=126
    STDDEV=127
    STDDEV_POP=128
    STDDEV_SAMP=129
    STRAIGHT_JOIN=130
    SUBSTRING=131
    SUM=132
    SYMMETRIC=133
    TAN=134
    THEN_SYM=135
    TIME_SYM=136
    TIMESTAMP=137
    TRUE_SYM=138
    TRUNCATE=139
    UNION_SYM=140
    UNSIGNED_SYM=141
    UPDATE=142
    UPPER=143
    USE_SYM=144
    USING_SYM=145
    UTC_DATE=146
    UTC_TIME=147
    UTC_TIMESTAMP=148
    VALUES=149
    VARIANCE=150
    VAR_POP=151
    VAR_SAMP=152
    WHEN_SYM=153
    WHERE=154
    WITH=155
    YEAR=156
    ASCII_SYM=157
    LATIN1=158
    UTF8=159
    SPOINT=160
    SCIRCLE=161
    SLINE=162
    SELLIPSE=163
    SPOLY=164
    SPATH=165
    SBOX=166
    STRANS=167
    AREA=168
    ARRAY_LENGTH=169
    DIVIDE=170
    MOD_SYM=171
    OR_SYM=172
    AND_SYM=173
    ABS_VAL_OR_SCONTAINS=174
    DFACTORIAL=175
    EQ=176
    NOT_EQ=177
    LET=178
    GET=179
    SHIFT_LEFT=180
    SHIFT_RIGHT=181
    SEMI=182
    COLON=183
    DOT=184
    COMMA=185
    ASTERISK=186
    RPAREN=187
    LPAREN=188
    RBRACK=189
    LBRACK=190
    PLUS=191
    MINUS=192
    NEGATION=193
    VERTBAR=194
    BITAND=195
    POWER_OP=196
    GTH=197
    LTH=198
    SCONTAINS2=199
    SLEFTCONTAINS2=200
    SNOTCONTAINS=201
    SNOTCONTAINS2=202
    SLEFTNOTCONTAINS=203
    SLEFTNOTCONTAINS2=204
    SNOTOVERLAP=205
    SCROSS=206
    SDISTANCE=207
    SLENGTH=208
    SCENTER=209
    INTEGER_NUM=210
    HEX_DIGIT=211
    BIT_NUM=212
    REAL_NUMBER=213
    TRANS=214
    TEXT_STRING=215
    ID=216
    COMMENT=217
    WS=218

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(PostgreSQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(PostgreSQLParser.LET, 0)

        def GET(self):
            return self.getToken(PostgreSQLParser.GET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = PostgreSQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            _la = self._input.LA(1)
            if not((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 6291471) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(PostgreSQLParser.DATETIME, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def DECIMAL_SYM(self):
            return self.getToken(PostgreSQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def INTEGER_SYM(self):
            return self.getToken(PostgreSQLParser.INTEGER_SYM, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def FLOAT(self):
            return self.getToken(PostgreSQLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def DOUBLE_PRECISION_SYM(self):
            return self.getToken(PostgreSQLParser.DOUBLE_PRECISION_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_data_type" ):
                listener.enterCast_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_data_type" ):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = PostgreSQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 184
                self.match(PostgreSQLParser.BINARY)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 185
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 186
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 187
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 190
                self.match(PostgreSQLParser.CHAR)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 191
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 192
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 193
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 196
                self.match(PostgreSQLParser.DATE_SYM)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 197
                self.match(PostgreSQLParser.DATETIME)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 5)
                self.state = 198
                self.match(PostgreSQLParser.TIME_SYM)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 6)
                self.state = 199
                self.match(PostgreSQLParser.TIMESTAMP)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 7)
                self.state = 200
                self.match(PostgreSQLParser.INTERVAL_SYM)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 201
                self.match(PostgreSQLParser.DECIMAL_SYM)
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 202
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 203
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==185:
                        self.state = 204
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 205
                        self.match(PostgreSQLParser.INTEGER_NUM)


                    self.state = 208
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 9)
                self.state = 211
                self.match(PostgreSQLParser.INTEGER_SYM)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 10)
                self.state = 212
                self.match(PostgreSQLParser.BIGINT)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 11)
                self.state = 213
                self.match(PostgreSQLParser.FLOAT)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 12)
                self.state = 214
                self.match(PostgreSQLParser.REAL)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 13)
                self.state = 215
                self.match(PostgreSQLParser.DOUBLE_PRECISION_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(PostgreSQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_literal" ):
                listener.enterBit_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_literal" ):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = PostgreSQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(PostgreSQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(PostgreSQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(PostgreSQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = PostgreSQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            _la = self._input.LA(1)
            if not(_la==51 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(PostgreSQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hex_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_literal" ):
                listener.enterHex_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_literal" ):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = PostgreSQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(PostgreSQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(PostgreSQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_literal" ):
                listener.enterNumber_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_literal" ):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = PostgreSQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==191 or _la==192:
                self.state = 224
                _la = self._input.LA(1)
                if not(_la==191 or _la==192):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 227
            _la = self._input.LA(1)
            if not(_la==210 or _la==213):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = PostgreSQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(PostgreSQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(PostgreSQLParser.ASCII_SYM, 0)

        def BIT_LENGTH(self):
            return self.getToken(PostgreSQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(PostgreSQLParser.CHAR_LENGTH, 0)

        def CHR(self):
            return self.getToken(PostgreSQLParser.CHR, 0)

        def CONCAT_WS(self):
            return self.getToken(PostgreSQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(PostgreSQLParser.CONCAT, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(PostgreSQLParser.LENGTH, 0)

        def LOWER(self):
            return self.getToken(PostgreSQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(PostgreSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(PostgreSQLParser.LTRIM, 0)

        def REPEAT(self):
            return self.getToken(PostgreSQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(PostgreSQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(PostgreSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(PostgreSQLParser.RTRIM, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def UPPER(self):
            return self.getToken(PostgreSQLParser.UPPER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_char_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_functions" ):
                listener.enterChar_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_functions" ):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = PostgreSQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 503349248) != 0 or (((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 288285214294147523) != 0 or _la==143 or _la==157):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PostgreSQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(PostgreSQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(PostgreSQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(PostgreSQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(PostgreSQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(PostgreSQLParser.BIT_OR, 0)

        def STDDEV(self):
            return self.getToken(PostgreSQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(PostgreSQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_functions" ):
                listener.enterGroup_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_functions" ):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = PostgreSQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4295050240) != 0 or (((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 1372190511464457) != 0 or (((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 7) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(PostgreSQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(PostgreSQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(PostgreSQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(PostgreSQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(PostgreSQLParser.ATAN, 0)

        def CBRT(self):
            return self.getToken(PostgreSQLParser.CBRT, 0)

        def CEIL(self):
            return self.getToken(PostgreSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(PostgreSQLParser.CEILING, 0)

        def COS(self):
            return self.getToken(PostgreSQLParser.COS, 0)

        def COT(self):
            return self.getToken(PostgreSQLParser.COT, 0)

        def DEGREES(self):
            return self.getToken(PostgreSQLParser.DEGREES, 0)

        def DIV(self):
            return self.getToken(PostgreSQLParser.DIV, 0)

        def EXP(self):
            return self.getToken(PostgreSQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(PostgreSQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(PostgreSQLParser.LN, 0)

        def LOG(self):
            return self.getToken(PostgreSQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(PostgreSQLParser.MOD, 0)

        def PI(self):
            return self.getToken(PostgreSQLParser.PI, 0)

        def POW(self):
            return self.getToken(PostgreSQLParser.POW, 0)

        def POWER(self):
            return self.getToken(PostgreSQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(PostgreSQLParser.RADIANS, 0)

        def RANDOM(self):
            return self.getToken(PostgreSQLParser.RANDOM, 0)

        def ROUND(self):
            return self.getToken(PostgreSQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(PostgreSQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(PostgreSQLParser.SIN, 0)

        def SQRT(self):
            return self.getToken(PostgreSQLParser.SQRT, 0)

        def TAN(self):
            return self.getToken(PostgreSQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_functions" ):
                listener.enterNumber_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_functions" ):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = PostgreSQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 18580100477879110) != 0 or (((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 4756540355023733251) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODE(self):
            return self.getToken(PostgreSQLParser.ENCODE, 0)

        def MD5(self):
            return self.getToken(PostgreSQLParser.MD5, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_other_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_functions" ):
                listener.enterOther_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_functions" ):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = PostgreSQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            _la = self._input.LA(1)
            if not(_la==45 or _la==83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_PART(self):
            return self.getToken(PostgreSQLParser.DATE_PART, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def NOW(self):
            return self.getToken(PostgreSQLParser.NOW, 0)

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(PostgreSQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(PostgreSQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UTC_TIMESTAMP, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_time_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_functions" ):
                listener.enterTime_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_functions" ):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = PostgreSQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            _la = self._input.LA(1)
            if not((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 144115188075855875) != 0 or (((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 138378870785) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_LENGTH(self):
            return self.getToken(PostgreSQLParser.ARRAY_LENGTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_functions" ):
                listener.enterArray_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_functions" ):
                listener.exitArray_functions(self)




    def array_functions(self):

        localctx = PostgreSQLParser.Array_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_array_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(PostgreSQLParser.ARRAY_LENGTH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Custom_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GAIA_HEALPIX_INDEX(self):
            return self.getToken(PostgreSQLParser.GAIA_HEALPIX_INDEX, 0)

        def PDIST(self):
            return self.getToken(PostgreSQLParser.PDIST, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_custom_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustom_functions" ):
                listener.enterCustom_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustom_functions" ):
                listener.exitCustom_functions(self)




    def custom_functions(self):

        localctx = PostgreSQLParser.Custom_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_custom_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            _la = self._input.LA(1)
            if not(_la==58 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(PostgreSQLParser.AREA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_functions" ):
                listener.enterPg_sphere_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_functions" ):
                listener.exitPg_sphere_functions(self)




    def pg_sphere_functions(self):

        localctx = PostgreSQLParser.Pg_sphere_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pg_sphere_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(PostgreSQLParser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Other_functionsContext,0)


        def pg_sphere_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_functionsContext,0)


        def array_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_functionsContext,0)


        def custom_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Custom_functionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = PostgreSQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionList)
        try:
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 21, 22, 23, 30, 31, 39, 41, 49, 54, 77, 78, 86, 101, 103, 104, 106, 107, 115, 122, 124, 126, 134, 139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self.number_functions()
                pass
            elif token in [15, 25, 26, 27, 28, 73, 74, 79, 80, 81, 110, 111, 112, 113, 117, 118, 131, 143, 157]:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.char_functions()
                pass
            elif token in [34, 35, 91, 119, 136, 137, 146, 147, 148, 156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 249
                self.time_functions()
                pass
            elif token in [45, 83]:
                self.enterOuterAlt(localctx, 4)
                self.state = 250
                self.other_functions()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 251
                self.pg_sphere_functions()
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 252
                self.array_functions()
                pass
            elif token in [58, 100]:
                self.enterOuterAlt(localctx, 7)
                self.state = 253
                self.custom_functions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = PostgreSQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_literal_value)
        try:
            self.state = 262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [215]:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.string_literal()
                pass
            elif token in [191, 192, 210, 213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.number_literal()
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 3)
                self.state = 258
                self.hex_literal()
                pass
            elif token in [51, 138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 259
                self.boolean_literal()
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 5)
                self.state = 260
                self.bit_literal()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 6)
                self.state = 261
                self.match(PostgreSQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Offset_clauseContext,0)


        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = PostgreSQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(PostgreSQLParser.SELECT)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==42:
                self.state = 265
                _la = self._input.LA(1)
                if not(_la==3 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 268
            self.select_list()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 269
                self.match(PostgreSQLParser.FROM)
                self.state = 270
                self.table_references()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 271
                    self.partition_clause()


                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==154:
                    self.state = 274
                    self.where_clause()


                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 277
                    self.groupby_clause()


                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 280
                    self.having_clause()




            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 285
                self.orderby_clause()


            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 288
                self.limit_clause()


            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 291
                self.offset_clause()


            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 294
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 295
                self.match(PostgreSQLParser.UPDATE)


            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 298
                self.match(PostgreSQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = PostgreSQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 301
                self.match(PostgreSQLParser.AS_SYM)


            self.state = 304
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor1Context,i)


        def VERTBAR(self):
            return self.getToken(PostgreSQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_expr" ):
                listener.enterBit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_expr" ):
                listener.exitBit_expr(self)




    def bit_expr(self):

        localctx = PostgreSQLParser.Bit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_bit_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.factor1()
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==194:
                self.state = 307
                self.match(PostgreSQLParser.VERTBAR)
                self.state = 308
                self.factor1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relational_opContext,0)


        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bool_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_primary" ):
                listener.enterBool_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_primary" ):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = PostgreSQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 311
                self.predicate()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 6291471) != 0:
                    self.state = 312
                    self.relational_op()
                    self.state = 314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4:
                        self.state = 313
                        self.match(PostgreSQLParser.ANY)


                    self.state = 316
                    self.predicate()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 320
                    self.match(PostgreSQLParser.NOT_SYM)


                self.state = 323
                self.match(PostgreSQLParser.EXISTS)
                self.state = 324
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(PostgreSQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(PostgreSQLParser.END_SYM, 0)

        def case_when_statement1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement2Context,0)


        def ELSE_SYM(self):
            return self.getToken(PostgreSQLParser.ELSE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement" ):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement" ):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = PostgreSQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_case_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(PostgreSQLParser.CASE_SYM)
            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [153]:
                self.state = 328
                self.case_when_statement1()
                pass
            elif token in [1, 2, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 174, 175, 188, 191, 192, 193, 210, 211, 212, 213, 215, 216]:
                self.state = 329
                self.case_when_statement2()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 332
                self.match(PostgreSQLParser.ELSE_SYM)
                self.state = 333
                self.bit_expr()


            self.state = 336
            self.match(PostgreSQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement1" ):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement1" ):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = PostgreSQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 338
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 339
                self.expression()
                self.state = 340
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 341
                self.bit_expr()
                self.state = 345 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==153):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement2" ):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement2" ):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = PostgreSQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.bit_expr()
            self.state = 353 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 348
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 349
                self.bit_expr()
                self.state = 350
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 351
                self.bit_expr()
                self.state = 355 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==153):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = PostgreSQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(PostgreSQLParser.LPAREN)
            self.state = 358
            self.column_spec()
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 359
                self.match(PostgreSQLParser.COMMA)
                self.state = 360
                self.column_spec()
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 366
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = PostgreSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def slice_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Slice_specContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = PostgreSQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_column_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 373
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 370
                    self.schema_name()
                    self.state = 371
                    self.match(PostgreSQLParser.DOT)


                self.state = 375
                self.table_name()
                self.state = 376
                self.match(PostgreSQLParser.DOT)


            self.state = 380
            self.column_name()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 381
                self.slice_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Displayed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column" ):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column" ):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = PostgreSQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_displayed_column)
        self._la = 0 # Token type
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 384
                self.table_spec()
                self.state = 385
                self.match(PostgreSQLParser.DOT)
                self.state = 386
                self.match(PostgreSQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 388
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 389
                    self.sbit_expr()
                    pass


                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62 or _la==75:
                    self.state = 392
                    _la = self._input.LA(1)
                    if not(_la==62 or _la==75):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 393
                    self.match(PostgreSQLParser.TEXT_STRING)


                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==216:
                    self.state = 396
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor2Context,i)


        def AND_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND_SYM)
            else:
                return self.getToken(PostgreSQLParser.AND_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor1" ):
                listener.enterExp_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor1" ):
                listener.exitExp_factor1(self)




    def exp_factor1(self):

        localctx = PostgreSQLParser.Exp_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_exp_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.exp_factor2()
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==173:
                self.state = 402
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 403
                self.exp_factor2()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Exp_factor3Context,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor2" ):
                listener.enterExp_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor2" ):
                listener.exitExp_factor2(self)




    def exp_factor2(self):

        localctx = PostgreSQLParser.Exp_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_exp_factor2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 409
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 412
            self.exp_factor3()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_primary(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(PostgreSQLParser.IS_SYM, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor3" ):
                listener.enterExp_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor3" ):
                listener.exitExp_factor3(self)




    def exp_factor3(self):

        localctx = PostgreSQLParser.Exp_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exp_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.bool_primary()
            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 415
                    self.match(PostgreSQLParser.IS_SYM)
                    self.state = 417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 416
                        self.match(PostgreSQLParser.NOT_SYM)


                    self.state = 423
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51, 138]:
                        self.state = 419
                        self.boolean_literal()
                        pass
                    elif token in [92]:
                        self.state = 420
                        self.match(PostgreSQLParser.NULL_SYM)
                        pass
                    elif token in [42]:
                        self.state = 421
                        self.match(PostgreSQLParser.DISTINCT)
                        self.state = 422
                        self.match(PostgreSQLParser.FROM)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==90:
                    self.state = 427
                    _la = self._input.LA(1)
                    if not(_la==68 or _la==90):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor1Context,i)


        def OR_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR_SYM)
            else:
                return self.getToken(PostgreSQLParser.OR_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = PostgreSQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.exp_factor1()
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==172:
                self.state = 433
                self.match(PostgreSQLParser.OR_SYM)
                self.state = 434
                self.exp_factor1()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = PostgreSQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(PostgreSQLParser.LPAREN)
            self.state = 441
            self.expression()
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 442
                self.match(PostgreSQLParser.COMMA)
                self.state = 443
                self.expression()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 449
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor2Context,i)


        def BITAND(self):
            return self.getToken(PostgreSQLParser.BITAND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor1" ):
                listener.enterFactor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor1" ):
                listener.exitFactor1(self)




    def factor1(self):

        localctx = PostgreSQLParser.Factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.factor2()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 452
                self.match(PostgreSQLParser.BITAND)
                self.state = 453
                self.factor2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor3Context,i)


        def SHIFT_LEFT(self):
            return self.getToken(PostgreSQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(PostgreSQLParser.SHIFT_RIGHT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor2" ):
                listener.enterFactor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor2" ):
                listener.exitFactor2(self)




    def factor2(self):

        localctx = PostgreSQLParser.Factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.factor3()
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==180 or _la==181:
                self.state = 457
                _la = self._input.LA(1)
                if not(_la==180 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 458
                self.factor3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor4Context,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor3" ):
                listener.enterFactor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor3" ):
                listener.exitFactor3(self)




    def factor3(self):

        localctx = PostgreSQLParser.Factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.factor4()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==191 or _la==192:
                self.state = 462
                _la = self._input.LA(1)
                if not(_la==191 or _la==192):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 463
                self.factor4()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor5Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor5Context,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ASTERISK)
            else:
                return self.getToken(PostgreSQLParser.ASTERISK, i)

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DIVIDE)
            else:
                return self.getToken(PostgreSQLParser.DIVIDE, i)

        def MOD_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MOD_SYM)
            else:
                return self.getToken(PostgreSQLParser.MOD_SYM, i)

        def POWER_OP(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.POWER_OP)
            else:
                return self.getToken(PostgreSQLParser.POWER_OP, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor4" ):
                listener.enterFactor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor4" ):
                listener.exitFactor4(self)




    def factor4(self):

        localctx = PostgreSQLParser.Factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.factor5()
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & 67174403) != 0:
                self.state = 470
                _la = self._input.LA(1)
                if not((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & 67174403) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 471
                self.factor5()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def DFACTORIAL(self):
            return self.getToken(PostgreSQLParser.DFACTORIAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor5" ):
                listener.enterFactor5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor5" ):
                listener.exitFactor5(self)




    def factor5(self):

        localctx = PostgreSQLParser.Factor5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 477
                _la = self._input.LA(1)
                if not(_la==13 or (((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 917507) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 480
            self.simple_expr()
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 481
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 484
                _la = self._input.LA(1)
                if not(_la==191 or _la==192):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 485
                self.interval_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def CAST_SYM(self):
            return self.getToken(PostgreSQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_data_typeContext,0)


        def CONVERT_SYM(self):
            return self.getToken(PostgreSQLParser.CONVERT_SYM, 0)

        def TEXT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TEXT_STRING)
            else:
                return self.getToken(PostgreSQLParser.TEXT_STRING, i)

        def POSITION_SYM(self):
            return self.getToken(PostgreSQLParser.POSITION_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def group_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_functionsContext,0)


        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = PostgreSQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 15, 21, 22, 23, 25, 26, 27, 28, 30, 31, 34, 35, 39, 41, 45, 49, 54, 58, 73, 74, 77, 78, 79, 80, 81, 83, 86, 91, 100, 101, 103, 104, 106, 107, 110, 111, 112, 113, 115, 117, 118, 119, 122, 124, 126, 131, 134, 136, 137, 139, 143, 146, 147, 148, 156, 157, 168, 169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                self.functionList()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 489
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 309378992668534598) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -774914371848767103) != 0 or (((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 8214592589206884843) != 0 or (((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 447) != 0:
                        self.state = 490
                        self.expression()
                        self.state = 495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==185:
                            self.state = 491
                            self.match(PostgreSQLParser.COMMA)
                            self.state = 492
                            self.expression()
                            self.state = 497
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 500
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.match(PostgreSQLParser.CAST_SYM)
                self.state = 504
                self.match(PostgreSQLParser.LPAREN)
                self.state = 505
                self.expression()
                self.state = 506
                self.match(PostgreSQLParser.AS_SYM)
                self.state = 507
                self.cast_data_type()
                self.state = 508
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 511
                self.match(PostgreSQLParser.LPAREN)
                self.state = 512
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 513
                self.match(PostgreSQLParser.COMMA)
                self.state = 514
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 515
                self.match(PostgreSQLParser.COMMA)
                self.state = 516
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 517
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 518
                self.match(PostgreSQLParser.POSITION_SYM)
                self.state = 519
                self.match(PostgreSQLParser.LPAREN)
                self.state = 520
                self.expression()
                self.state = 521
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 522
                self.expression()
                self.state = 523
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [10, 14, 16, 32, 82, 85, 127, 128, 129, 132, 150, 151, 152]:
                self.enterOuterAlt(localctx, 5)
                self.state = 525
                self.group_functions()
                self.state = 526
                self.match(PostgreSQLParser.LPAREN)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==42 or _la==186:
                    self.state = 527
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==42 or _la==186):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 309378992668534598) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -774914371857155711) != 0 or (((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 8214592589206884843) != 0 or (((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 447) != 0:
                    self.state = 532
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        self.state = 530
                        self.bit_expr()
                        pass

                    elif la_ == 2:
                        self.state = 531
                        self.sbit_expr()
                        pass




                self.state = 536
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def groupby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(PostgreSQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_clause" ):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_clause" ):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = PostgreSQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(PostgreSQLParser.GROUP_SYM)
            self.state = 541
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 542
            self.groupby_item()
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 543
                self.match(PostgreSQLParser.COMMA)
                self.state = 544
                self.groupby_item()
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 550
                self.match(PostgreSQLParser.WITH)
                self.state = 551
                self.match(PostgreSQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_item" ):
                listener.enterGroupby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_item" ):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = PostgreSQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_groupby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 554
                self.column_spec()
                pass

            elif la_ == 2:
                self.state = 555
                self.match(PostgreSQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.state = 556
                self.bit_expr()
                pass


            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 559
                _la = self._input.LA(1)
                if not(_la==5 or _la==40):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(PostgreSQLParser.HAVING)
            self.state = 563
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(PostgreSQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(PostgreSQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(PostgreSQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = PostgreSQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [144]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.match(PostgreSQLParser.USE_SYM)
                self.state = 566
                self.index_options()
                self.state = 567
                self.match(PostgreSQLParser.LPAREN)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==216:
                    self.state = 568
                    self.index_list()


                self.state = 571
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.match(PostgreSQLParser.IGNORE_SYM)
                self.state = 574
                self.index_options()
                self.state = 575
                self.match(PostgreSQLParser.LPAREN)
                self.state = 576
                self.index_list()
                self.state = 577
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.match(PostgreSQLParser.FORCE_SYM)
                self.state = 580
                self.index_options()
                self.state = 581
                self.match(PostgreSQLParser.LPAREN)
                self.state = 582
                self.index_list()
                self.state = 583
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hint_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint_list" ):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint_list" ):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = PostgreSQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.index_hint()
            self.state = 592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 588
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 589
                    self.index_hint() 
                self.state = 594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = PostgreSQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = PostgreSQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.index_name()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 598
                self.match(PostgreSQLParser.COMMA)
                self.state = 599
                self.index_name()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(PostgreSQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(PostgreSQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = PostgreSQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            _la = self._input.LA(1)
            if not(_la==63 or _la==71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 606
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [70]:
                    self.state = 607
                    self.match(PostgreSQLParser.JOIN_SYM)
                    pass
                elif token in [97]:
                    self.state = 608
                    self.match(PostgreSQLParser.ORDER_SYM)
                    self.state = 609
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                elif token in [59]:
                    self.state = 610
                    self.match(PostgreSQLParser.GROUP_SYM)
                    self.state = 611
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr" ):
                listener.enterInterval_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr" ):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = PostgreSQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(PostgreSQLParser.INTERVAL_SYM)
            self.state = 617
            self.string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = PostgreSQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_join_condition)
        try:
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.match(PostgreSQLParser.ON)
                self.state = 620
                self.expression()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 622
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_countContext,0)


        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_limit_clause)
        try:
            self.state = 636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.match(PostgreSQLParser.LIMIT)
                self.state = 626
                self.row_count()
                self.state = 629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.match(PostgreSQLParser.OFFSET_SYM)
                    self.state = 628
                    self.offset()


                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.match(PostgreSQLParser.OFFSET_SYM)
                self.state = 632
                self.offset()
                self.state = 633
                self.match(PostgreSQLParser.LIMIT)
                self.state = 634
                self.row_count()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = PostgreSQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)




    def offset_clause(self):

        localctx = PostgreSQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(PostgreSQLParser.OFFSET_SYM)
            self.state = 641
            self.offset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_countContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count" ):
                listener.enterRow_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count" ):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = PostgreSQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def orderby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Orderby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = PostgreSQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(PostgreSQLParser.ORDER_SYM)
            self.state = 646
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 647
            self.orderby_item()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 648
                self.match(PostgreSQLParser.COMMA)
                self.state = 649
                self.orderby_item()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,0)


        def NULLS_SYM(self):
            return self.getToken(PostgreSQLParser.NULLS_SYM, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def FIRST_SYM(self):
            return self.getToken(PostgreSQLParser.FIRST_SYM, 0)

        def LAST_SYM(self):
            return self.getToken(PostgreSQLParser.LAST_SYM, 0)

        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_item" ):
                listener.enterOrderby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_item" ):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = PostgreSQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.groupby_item()
                self.state = 663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5 or _la==40:
                        self.state = 656
                        _la = self._input.LA(1)
                        if not(_la==5 or _la==40):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 2:
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==93:
                        self.state = 659
                        self.match(PostgreSQLParser.NULLS_SYM)
                        self.state = 660
                        _la = self._input.LA(1)
                        if not(_la==52 or _la==72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.groupby_item()
                self.state = 666
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 667
                _la = self._input.LA(1)
                if not(_la==197 or _la==198):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(PostgreSQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause" ):
                listener.enterPartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause" ):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = PostgreSQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(PostgreSQLParser.PARTITION_SYM)
            self.state = 672
            self.match(PostgreSQLParser.LPAREN)
            self.state = 673
            self.partition_names()
            self.state = 674
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = PostgreSQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_names" ):
                listener.enterPartition_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_names" ):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = PostgreSQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.partition_name()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 679
                self.match(PostgreSQLParser.COMMA)
                self.state = 680
                self.partition_name()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def REGEXP(self):
            return self.getToken(PostgreSQLParser.REGEXP, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,0)


        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def ESCAPE_SYM(self):
            return self.getToken(PostgreSQLParser.ESCAPE_SYM, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac1" ):
                listener.enterBit_fac1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac1" ):
                listener.exitBit_fac1(self)




    def bit_fac1(self):

        localctx = PostgreSQLParser.Bit_fac1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_bit_fac1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 686
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 689
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 690
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 691
                    self.expression_list()
                    pass


                pass
            elif token in [62, 75]:
                self.state = 694
                _la = self._input.LA(1)
                if not(_la==62 or _la==75):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 695
                self.simple_expr()
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 696
                    self.match(PostgreSQLParser.ESCAPE_SYM)
                    self.state = 697
                    self.simple_expr()


                pass
            elif token in [109]:
                self.state = 700
                self.match(PostgreSQLParser.REGEXP)
                self.state = 703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 701
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 702
                    self.sbit_expr()
                    pass


                pass
            elif token in [11]:
                self.state = 705
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 706
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 709
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 710
                    self.sbit_expr()
                    pass


                self.state = 713
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 714
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOUNDS_SYM(self):
            return self.getToken(PostgreSQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac2" ):
                listener.enterBit_fac2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac2" ):
                listener.exitBit_fac2(self)




    def bit_fac2(self):

        localctx = PostgreSQLParser.Bit_fac2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_bit_fac2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(PostgreSQLParser.SOUNDS_SYM)
            self.state = 719
            _la = self._input.LA(1)
            if not(_la==62 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 720
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 721
                self.sbit_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def bit_fac1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac1Context,0)


        def bit_fac2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac2Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = PostgreSQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 724
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 725
                self.sbit_expr()
                pass


            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 728
                self.bit_fac1()

            elif la_ == 2:
                self.state = 729
                self.bit_fac2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = PostgreSQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.select_statement()
            self.state = 733
            self.match(PostgreSQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = PostgreSQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def subselect_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Subselect_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = PostgreSQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 160, 161, 162, 163, 164, 165, 166, 168, 169, 174, 175, 188, 191, 192, 193, 208, 209, 210, 211, 212, 213, 215, 216]:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.displayed_column()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185:
                    self.state = 738
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 739
                    self.displayed_column()
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.match(PostgreSQLParser.ASTERISK)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 746
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 747
                    self.displayed_column()
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==185:
                        self.state = 748
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 749
                        self.displayed_column()
                        self.state = 754
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 757
                self.match(PostgreSQLParser.ON)

                self.state = 758
                self.subselect_list()
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185:
                    self.state = 759
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 760
                    self.displayed_column()
                    self.state = 765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subselect_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subselect_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubselect_list" ):
                listener.enterSubselect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubselect_list" ):
                listener.exitSubselect_list(self)




    def subselect_list(self):

        localctx = PostgreSQLParser.Subselect_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_subselect_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.displayed_column()
            self.state = 773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 769
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 770
                    self.displayed_column() 
                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION_SYM)
            else:
                return self.getToken(PostgreSQLParser.UNION_SYM, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALL)
            else:
                return self.getToken(PostgreSQLParser.ALL, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = PostgreSQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.select_expression()
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==140:
                self.state = 777
                self.match(PostgreSQLParser.UNION_SYM)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 778
                    self.match(PostgreSQLParser.ALL)


                self.state = 781
                self.select_expression()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Literal_valueContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_callContext,0)


        def ROW_SYM(self):
            return self.getToken(PostgreSQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statementContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expr" ):
                listener.enterSimple_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expr" ):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = PostgreSQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_simple_expr)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.column_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 790
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 791
                self.match(PostgreSQLParser.ROW_SYM)
                self.state = 792
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 793
                self.subquery()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 794
                self.match(PostgreSQLParser.EXISTS)
                self.state = 795
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 796
                self.interval_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 797
                self.case_when_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LBRACK)
            else:
                return self.getToken(PostgreSQLParser.LBRACK, i)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RBRACK)
            else:
                return self.getToken(PostgreSQLParser.RBRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COLON)
            else:
                return self.getToken(PostgreSQLParser.COLON, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_spec" ):
                listener.enterSlice_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_spec" ):
                listener.exitSlice_spec(self)




    def slice_spec(self):

        localctx = PostgreSQLParser.Slice_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_slice_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 800
                self.match(PostgreSQLParser.LBRACK)
                self.state = 801
                self.match(PostgreSQLParser.INTEGER_NUM)
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 802
                    self.match(PostgreSQLParser.COLON)
                    self.state = 803
                    self.match(PostgreSQLParser.INTEGER_NUM)


                self.state = 806
                self.match(PostgreSQLParser.RBRACK)
                self.state = 809 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==190):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = PostgreSQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(PostgreSQLParser.LPAREN)
            self.state = 812
            self.select_statement()
            self.state = 813
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def OJ_SYM(self):
            return self.getToken(PostgreSQLParser.OJ_SYM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_atom" ):
                listener.enterTable_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_atom" ):
                listener.exitTable_atom(self)




    def table_atom(self):

        localctx = PostgreSQLParser.Table_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_table_atom)
        self._la = 0 # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.table_spec()
                self.state = 817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 816
                    self.partition_clause()


                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==216:
                    self.state = 819
                    self.alias()


                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56 or _la==61 or _la==144:
                    self.state = 822
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.subquery()
                self.state = 826
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.match(PostgreSQLParser.LPAREN)
                self.state = 829
                self.table_references()
                self.state = 830
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                self.match(PostgreSQLParser.OJ_SYM)
                self.state = 833
                self.table_reference()
                self.state = 834
                self.match(PostgreSQLParser.LEFT)
                self.state = 835
                self.match(PostgreSQLParser.OUTER)
                self.state = 836
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 837
                self.table_reference()
                self.state = 838
                self.match(PostgreSQLParser.ON)
                self.state = 839
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = PostgreSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor2Context,0)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def INNER_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INNER_SYM)
            else:
                return self.getToken(PostgreSQLParser.INNER_SYM, i)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor1" ):
                listener.enterTable_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor1" ):
                listener.exitTable_factor1(self)




    def table_factor1(self):

        localctx = PostgreSQLParser.Table_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.table_factor2()
            self.state = 856
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==33 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 562949953421825) != 0:
                        self.state = 846
                        _la = self._input.LA(1)
                        if not(_la==33 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 562949953421825) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 849
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 850
                    self.table_atom()
                    self.state = 852
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 851
                        self.join_condition()

             
                self.state = 858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor3Context,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def table_atom(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor2" ):
                listener.enterTable_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor2" ):
                listener.exitTable_factor2(self)




    def table_factor2(self):

        localctx = PostgreSQLParser.Table_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.table_factor3()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 860
                self.match(PostgreSQLParser.STRAIGHT_JOIN)
                self.state = 861
                self.table_atom()
                self.state = 864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 862
                    self.match(PostgreSQLParser.ON)
                    self.state = 863
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_factor4Context,i)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def OUTER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OUTER)
            else:
                return self.getToken(PostgreSQLParser.OUTER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor3" ):
                listener.enterTable_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor3" ):
                listener.exitTable_factor3(self)




    def table_factor3(self):

        localctx = PostgreSQLParser.Table_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.table_factor4()
            self.state = 879
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 869
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==113):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 870
                        self.match(PostgreSQLParser.OUTER)


                    self.state = 873
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 874
                    self.table_factor4()
                    self.state = 875
                    self.join_condition() 
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor4" ):
                listener.enterTable_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor4" ):
                listener.exitTable_factor4(self)




    def table_factor4(self):

        localctx = PostgreSQLParser.Table_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.table_atom()
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 883
                self.match(PostgreSQLParser.NATURAL)
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73 or _la==113:
                    self.state = 884
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==113):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 885
                        self.match(PostgreSQLParser.OUTER)




                self.state = 890
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 891
                self.table_atom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor1Context,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def values_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = PostgreSQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.table_factor1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.match(PostgreSQLParser.LPAREN)
                self.state = 896
                self.values_list()
                self.state = 897
                self.match(PostgreSQLParser.RPAREN)
                self.state = 899
                self.alias()
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 900
                    self.column_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_references" ):
                listener.enterTable_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_references" ):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = PostgreSQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.table_reference()
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 906
                self.match(PostgreSQLParser.COMMA)
                self.state = 907
                self.table_reference()
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = PostgreSQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 913
                self.schema_name()
                self.state = 914
                self.match(PostgreSQLParser.DOT)


            self.state = 918
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_list" ):
                listener.enterValues_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_list" ):
                listener.exitValues_list(self)




    def values_list(self):

        localctx = PostgreSQLParser.Values_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_values_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(PostgreSQLParser.VALUES)

            self.state = 921
            self.expression_list()
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185:
                self.state = 922
                self.match(PostgreSQLParser.COMMA)
                self.state = 923
                self.expression_list()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(PostgreSQLParser.WHERE)
            self.state = 930
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def SCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SCONTAINS2, 0)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def SLEFTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTCONTAINS2, 0)

        def SNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS, 0)

        def SNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS2, 0)

        def SLEFTNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS, 0)

        def SLEFTNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS2, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def SNOTOVERLAP(self):
            return self.getToken(PostgreSQLParser.SNOTOVERLAP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_op" ):
                listener.enterPg_sphere_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_op" ):
                listener.exitPg_sphere_op(self)




    def pg_sphere_op(self):

        localctx = PostgreSQLParser.Pg_sphere_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pg_sphere_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            _la = self._input.LA(1)
            if not((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 8523874307) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sbit_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pg_sphere_object(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Pg_sphere_objectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_objectContext,i)


        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def pg_sphere_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_opContext,0)


        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def SCROSS(self):
            return self.getToken(PostgreSQLParser.SCROSS, 0)

        def SDISTANCE(self):
            return self.getToken(PostgreSQLParser.SDISTANCE, 0)

        def scircle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ScircleContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,i)


        def SLENGTH(self):
            return self.getToken(PostgreSQLParser.SLENGTH, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def SCENTER(self):
            return self.getToken(PostgreSQLParser.SCENTER, 0)

        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def strans(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StransContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StransContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbit_expr" ):
                listener.enterSbit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbit_expr" ):
                listener.exitSbit_expr(self)




    def sbit_expr(self):

        localctx = PostgreSQLParser.Sbit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_sbit_expr)
        self._la = 0 # Token type
        try:
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 161, 162, 163, 164, 165, 166, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 934
                    self.pg_sphere_object()
                    pass
                elif token in [160]:
                    self.state = 935
                    self.spoint()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [160]:
                    self.state = 938
                    self.spoint()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 939
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 942
                self.pg_sphere_op()
                self.state = 943
                self.pg_sphere_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 945
                self.pg_sphere_object()
                self.state = 946
                self.match(PostgreSQLParser.EQ)
                self.state = 947
                self.pg_sphere_object()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 949
                self.pg_sphere_object()
                self.state = 950
                self.pg_sphere_op()
                self.state = 951
                self.pg_sphere_object()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 959
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 953
                    self.sline()
                    pass

                elif la_ == 2:
                    self.state = 954
                    self.simple_expr()
                    self.state = 955
                    self.match(PostgreSQLParser.SCROSS)
                    self.state = 956
                    self.sline()
                    pass

                elif la_ == 3:
                    self.state = 958
                    self.simple_expr()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 964
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [160]:
                    self.state = 961
                    self.spoint()
                    pass
                elif token in [161]:
                    self.state = 962
                    self.scircle()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 963
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 966
                self.match(PostgreSQLParser.SDISTANCE)
                self.state = 970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [160]:
                    self.state = 967
                    self.spoint()
                    pass
                elif token in [161]:
                    self.state = 968
                    self.scircle()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 969
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 972
                self.match(PostgreSQLParser.SLENGTH)
                self.state = 977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161]:
                    self.state = 973
                    self.scircle()
                    pass
                elif token in [166]:
                    self.state = 974
                    self.sbox()
                    pass
                elif token in [164]:
                    self.state = 975
                    self.spoly()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 976
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 979
                self.match(PostgreSQLParser.SCENTER)
                self.state = 983
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161]:
                    self.state = 980
                    self.scircle()
                    pass
                elif token in [163]:
                    self.state = 981
                    self.sellipse()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 982
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 985
                self.match(PostgreSQLParser.MINUS)
                self.state = 989
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [162]:
                    self.state = 986
                    self.sline()
                    pass
                elif token in [165]:
                    self.state = 987
                    self.spath()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 988
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 998
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [160]:
                    self.state = 991
                    self.spoint()
                    pass
                elif token in [161]:
                    self.state = 992
                    self.scircle()
                    pass
                elif token in [162]:
                    self.state = 993
                    self.sline()
                    pass
                elif token in [163]:
                    self.state = 994
                    self.sellipse()
                    pass
                elif token in [164]:
                    self.state = 995
                    self.spoly()
                    pass
                elif token in [165]:
                    self.state = 996
                    self.spath()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                    self.state = 997
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1004 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==191 or _la==192:
                        self.state = 1000
                        _la = self._input.LA(1)
                        if not(_la==191 or _la==192):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1003
                    self.strans()
                    self.state = 1006 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & 50331649) != 0):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT(self):
            return self.getToken(PostgreSQLParser.SPOINT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint" ):
                listener.enterSpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint" ):
                listener.exitSpoint(self)




    def spoint(self):

        localctx = PostgreSQLParser.SpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_spoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(PostgreSQLParser.SPOINT)
            self.state = 1011
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1012
            self.bit_expr()
            self.state = 1013
            self.match(PostgreSQLParser.COMMA)
            self.state = 1014
            self.bit_expr()
            self.state = 1015
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE(self):
            return self.getToken(PostgreSQLParser.SCIRCLE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle" ):
                listener.enterScircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle" ):
                listener.exitScircle(self)




    def scircle(self):

        localctx = PostgreSQLParser.ScircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_scircle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(PostgreSQLParser.SCIRCLE)
            self.state = 1018
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1019
            self.spoint()
            self.state = 1020
            self.match(PostgreSQLParser.COMMA)
            self.state = 1021
            self.bit_expr()
            self.state = 1022
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLINE(self):
            return self.getToken(PostgreSQLParser.SLINE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def strans(self):
            return self.getTypedRuleContext(PostgreSQLParser.StransContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSline" ):
                listener.enterSline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSline" ):
                listener.exitSline(self)




    def sline(self):

        localctx = PostgreSQLParser.SlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_sline)
        try:
            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.match(PostgreSQLParser.SLINE)
                self.state = 1025
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1026
                self.spoint()
                self.state = 1027
                self.match(PostgreSQLParser.COMMA)
                self.state = 1028
                self.spoint()
                self.state = 1029
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1031
                self.match(PostgreSQLParser.SLINE)
                self.state = 1032
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1033
                self.strans()
                self.state = 1034
                self.match(PostgreSQLParser.COMMA)
                self.state = 1035
                self.bit_expr()
                self.state = 1036
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SellipseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELLIPSE(self):
            return self.getToken(PostgreSQLParser.SELLIPSE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sellipse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSellipse" ):
                listener.enterSellipse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSellipse" ):
                listener.exitSellipse(self)




    def sellipse(self):

        localctx = PostgreSQLParser.SellipseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sellipse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(PostgreSQLParser.SELLIPSE)
            self.state = 1041
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1042
            self.spoint()
            self.state = 1043
            self.match(PostgreSQLParser.COMMA)
            self.state = 1044
            self.bit_expr()
            self.state = 1045
            self.match(PostgreSQLParser.COMMA)
            self.state = 1046
            self.bit_expr()
            self.state = 1047
            self.match(PostgreSQLParser.COMMA)
            self.state = 1048
            self.bit_expr()
            self.state = 1049
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SboxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX(self):
            return self.getToken(PostgreSQLParser.SBOX, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox" ):
                listener.enterSbox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox" ):
                listener.exitSbox(self)




    def sbox(self):

        localctx = PostgreSQLParser.SboxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_sbox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(PostgreSQLParser.SBOX)
            self.state = 1052
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1053
            self.spoint()
            self.state = 1054
            self.match(PostgreSQLParser.COMMA)
            self.state = 1055
            self.spoint()
            self.state = 1056
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpolyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY(self):
            return self.getToken(PostgreSQLParser.SPOLY, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly" ):
                listener.enterSpoly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly" ):
                listener.exitSpoly(self)




    def spoly(self):

        localctx = PostgreSQLParser.SpolyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_spoly)
        try:
            self.state = 1069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1059
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1061
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1062
                self.column_spec()
                self.state = 1063
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1066
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1067
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 1068
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATH(self):
            return self.getToken(PostgreSQLParser.SPATH, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpath" ):
                listener.enterSpath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpath" ):
                listener.exitSpath(self)




    def spath(self):

        localctx = PostgreSQLParser.SpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_spath)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.match(PostgreSQLParser.SPATH)
                self.state = 1072
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(PostgreSQLParser.SPATH)
                self.state = 1074
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1075
                self.column_spec()
                self.state = 1076
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StransContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRANS(self):
            return self.getToken(PostgreSQLParser.STRANS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def TRANS(self):
            return self.getToken(PostgreSQLParser.TRANS, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strans

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrans" ):
                listener.enterStrans(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrans" ):
                listener.exitStrans(self)




    def strans(self):

        localctx = PostgreSQLParser.StransContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_strans)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(PostgreSQLParser.STRANS)
            self.state = 1081
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1082
            self.bit_expr()
            self.state = 1083
            self.match(PostgreSQLParser.COMMA)
            self.state = 1084
            self.bit_expr()
            self.state = 1085
            self.match(PostgreSQLParser.COMMA)
            self.state = 1086
            self.bit_expr()
            self.state = 1087
            self.match(PostgreSQLParser.COMMA)
            self.state = 1088
            self.match(PostgreSQLParser.TRANS)
            self.state = 1089
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_object" ):
                listener.enterPg_sphere_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_object" ):
                listener.exitPg_sphere_object(self)




    def pg_sphere_object(self):

        localctx = PostgreSQLParser.Pg_sphere_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_pg_sphere_object)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.scircle()
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.sline()
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1093
                self.sellipse()
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1094
                self.sbox()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1095
                self.spoly()
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1096
                self.spath()
                pass
            elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 156, 157, 168, 169, 188, 191, 192, 210, 211, 212, 213, 215, 216]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1097
                self.simple_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





