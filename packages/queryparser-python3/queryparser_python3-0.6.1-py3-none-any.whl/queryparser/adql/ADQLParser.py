# Generated from src/queryparser/adql/ADQLParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,305,1212,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,2,3,2,269,8,2,1,2,1,2,1,3,1,3,3,3,275,8,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,3,8,291,8,8,1,8,
        1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,303,8,10,1,11,1,11,
        1,11,1,11,1,11,1,11,5,11,311,8,11,10,11,12,11,314,9,11,1,12,1,12,
        3,12,318,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,18,1,18,1,18,3,18,348,8,18,1,18,1,18,1,18,1,18,3,18,
        354,8,18,5,18,356,8,18,10,18,12,18,359,9,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,5,21,375,8,21,
        10,21,12,21,378,9,21,1,22,1,22,1,22,3,22,383,8,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,28,1,28,1,28,3,28,407,8,28,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,
        1,33,1,34,1,34,1,35,3,35,430,8,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,37,1,37,3,37,440,8,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,458,8,39,1,39,1,39,
        1,40,1,40,1,40,3,40,465,8,40,3,40,467,8,40,1,40,1,40,3,40,471,8,
        40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,3,43,482,8,43,1,
        43,1,43,1,44,1,44,1,44,1,44,5,44,490,8,44,10,44,12,44,493,9,44,1,
        45,1,45,1,46,1,46,1,46,3,46,500,8,46,1,46,1,46,1,46,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,3,47,512,8,47,1,48,1,48,1,48,1,48,1,49,1,
        49,1,50,1,50,1,50,5,50,523,8,50,10,50,12,50,526,9,50,1,51,1,51,1,
        51,1,52,1,52,3,52,533,8,52,1,53,1,53,3,53,537,8,53,1,53,1,53,1,53,
        1,54,1,54,1,54,1,54,1,54,3,54,547,8,54,1,55,1,55,1,55,5,55,552,8,
        55,10,55,12,55,555,9,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,
        1,57,1,58,1,58,1,58,1,59,1,59,3,59,571,8,59,1,60,1,60,1,60,3,60,
        576,8,60,3,60,578,8,60,1,61,1,61,3,61,582,8,61,1,61,3,61,585,8,61,
        1,61,1,61,1,61,3,61,590,8,61,1,61,1,61,1,61,1,61,3,61,596,8,61,1,
        62,1,62,3,62,600,8,62,1,62,1,62,1,62,1,62,1,62,3,62,607,8,62,1,62,
        1,62,1,62,3,62,612,8,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,676,8,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,684,8,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
        64,698,8,64,1,64,1,64,3,64,702,8,64,1,65,1,65,1,65,1,65,1,65,1,66,
        1,66,1,66,1,66,3,66,713,8,66,1,66,1,66,1,66,1,66,1,66,3,66,720,8,
        66,1,66,1,66,3,66,724,8,66,1,67,1,67,1,67,1,67,1,67,3,67,731,8,67,
        1,68,1,68,1,68,1,68,3,68,737,8,68,1,68,1,68,3,68,741,8,68,1,69,1,
        69,1,69,1,69,3,69,747,8,69,1,70,1,70,1,70,3,70,752,8,70,1,70,1,70,
        1,71,1,71,3,71,758,8,71,1,72,3,72,761,8,72,1,72,1,72,3,72,765,8,
        72,1,73,1,73,1,73,1,73,1,73,3,73,772,8,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,5,73,792,8,73,10,73,12,73,795,9,73,1,74,1,74,1,74,1,74,3,74,801,
        8,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,78,1,78,1,79,
        1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,4,81,832,8,81,11,81,12,81,833,1,81,1,81,1,82,
        1,82,1,82,1,82,1,82,1,82,3,82,844,8,82,1,83,1,83,3,83,848,8,83,1,
        84,1,84,1,84,3,84,853,8,84,1,85,1,85,1,85,3,85,858,8,85,1,85,1,85,
        1,85,3,85,863,8,85,1,85,1,85,1,85,1,85,3,85,869,8,85,1,85,5,85,872,
        8,85,10,85,12,85,875,9,85,1,86,1,86,1,87,1,87,1,87,1,88,1,88,3,88,
        884,8,88,1,88,1,88,1,89,1,89,1,89,3,89,891,8,89,1,89,1,89,1,89,3,
        89,896,8,89,1,89,5,89,899,8,89,10,89,12,89,902,9,89,1,90,1,90,1,
        91,1,91,1,91,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,94,1,94,1,
        94,1,94,5,94,921,8,94,10,94,12,94,924,9,94,1,95,1,95,1,95,5,95,929,
        8,95,10,95,12,95,932,9,95,1,95,1,95,1,95,1,95,1,95,5,95,939,8,95,
        10,95,12,95,942,9,95,3,95,944,8,95,3,95,946,8,95,1,96,1,96,3,96,
        950,8,96,1,96,3,96,953,8,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,
        97,3,97,963,8,97,1,98,1,98,1,98,1,98,1,98,3,98,970,8,98,1,99,1,99,
        1,100,1,100,1,100,1,101,1,101,1,102,1,102,1,103,3,103,982,8,103,
        1,103,1,103,1,104,1,104,1,104,3,104,989,8,104,1,105,1,105,3,105,
        993,8,105,1,106,1,106,1,106,5,106,998,8,106,10,106,12,106,1001,9,
        106,1,107,1,107,1,108,1,108,1,109,1,109,1,109,3,109,1010,8,109,1,
        110,1,110,1,110,1,110,1,111,1,111,3,111,1018,8,111,1,111,3,111,1021,
        8,111,1,111,3,111,1024,8,111,1,111,3,111,1027,8,111,1,111,3,111,
        1030,8,111,1,112,1,112,1,112,3,112,1035,8,112,1,112,1,112,1,113,
        1,113,1,113,3,113,1042,8,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,3,113,1051,8,113,1,113,1,113,3,113,1055,8,113,1,113,3,113,
        1058,8,113,1,113,1,113,1,113,3,113,1063,8,113,5,113,1065,8,113,10,
        113,12,113,1068,9,113,1,114,1,114,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,5,115,1084,8,115,10,115,
        12,115,1087,9,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1136,8,116,1,117,1,117,
        1,118,1,118,1,119,1,119,1,120,1,120,3,120,1146,8,120,1,121,1,121,
        1,121,3,121,1151,8,121,1,122,1,122,1,123,1,123,1,123,1,123,1,123,
        5,123,1160,8,123,10,123,12,123,1163,9,123,3,123,1165,8,123,1,123,
        1,123,1,124,1,124,1,125,1,125,1,126,1,126,1,126,1,126,3,126,1177,
        8,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1186,8,127,
        1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,5,129,1196,8,129,
        10,129,12,129,1199,9,129,1,129,1,129,3,129,1203,8,129,1,129,1,129,
        1,129,3,129,1208,8,129,1,129,1,129,1,129,0,8,22,36,146,170,178,188,
        226,230,130,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,0,7,2,0,127,127,249,249,2,0,289,291,297,
        299,2,0,54,54,106,106,3,0,135,135,165,165,214,214,4,0,58,58,88,88,
        171,172,234,234,2,0,47,47,111,111,2,0,283,283,285,285,1237,0,260,
        1,0,0,0,2,262,1,0,0,0,4,268,1,0,0,0,6,272,1,0,0,0,8,281,1,0,0,0,
        10,283,1,0,0,0,12,285,1,0,0,0,14,287,1,0,0,0,16,290,1,0,0,0,18,294,
        1,0,0,0,20,302,1,0,0,0,22,304,1,0,0,0,24,317,1,0,0,0,26,319,1,0,
        0,0,28,330,1,0,0,0,30,332,1,0,0,0,32,337,1,0,0,0,34,342,1,0,0,0,
        36,347,1,0,0,0,38,360,1,0,0,0,40,369,1,0,0,0,42,371,1,0,0,0,44,382,
        1,0,0,0,46,386,1,0,0,0,48,388,1,0,0,0,50,392,1,0,0,0,52,394,1,0,
        0,0,54,401,1,0,0,0,56,406,1,0,0,0,58,408,1,0,0,0,60,413,1,0,0,0,
        62,418,1,0,0,0,64,420,1,0,0,0,66,422,1,0,0,0,68,426,1,0,0,0,70,429,
        1,0,0,0,72,433,1,0,0,0,74,437,1,0,0,0,76,441,1,0,0,0,78,443,1,0,
        0,0,80,470,1,0,0,0,82,472,1,0,0,0,84,475,1,0,0,0,86,481,1,0,0,0,
        88,485,1,0,0,0,90,494,1,0,0,0,92,496,1,0,0,0,94,511,1,0,0,0,96,513,
        1,0,0,0,98,517,1,0,0,0,100,519,1,0,0,0,102,527,1,0,0,0,104,532,1,
        0,0,0,106,534,1,0,0,0,108,546,1,0,0,0,110,548,1,0,0,0,112,556,1,
        0,0,0,114,563,1,0,0,0,116,565,1,0,0,0,118,570,1,0,0,0,120,577,1,
        0,0,0,122,595,1,0,0,0,124,611,1,0,0,0,126,613,1,0,0,0,128,701,1,
        0,0,0,130,703,1,0,0,0,132,723,1,0,0,0,134,730,1,0,0,0,136,740,1,
        0,0,0,138,746,1,0,0,0,140,748,1,0,0,0,142,757,1,0,0,0,144,764,1,
        0,0,0,146,771,1,0,0,0,148,800,1,0,0,0,150,802,1,0,0,0,152,805,1,
        0,0,0,154,809,1,0,0,0,156,811,1,0,0,0,158,813,1,0,0,0,160,815,1,
        0,0,0,162,822,1,0,0,0,164,843,1,0,0,0,166,847,1,0,0,0,168,852,1,
        0,0,0,170,857,1,0,0,0,172,876,1,0,0,0,174,878,1,0,0,0,176,883,1,
        0,0,0,178,890,1,0,0,0,180,903,1,0,0,0,182,905,1,0,0,0,184,910,1,
        0,0,0,186,912,1,0,0,0,188,914,1,0,0,0,190,945,1,0,0,0,192,947,1,
        0,0,0,194,962,1,0,0,0,196,969,1,0,0,0,198,971,1,0,0,0,200,973,1,
        0,0,0,202,976,1,0,0,0,204,978,1,0,0,0,206,981,1,0,0,0,208,988,1,
        0,0,0,210,990,1,0,0,0,212,994,1,0,0,0,214,1002,1,0,0,0,216,1004,
        1,0,0,0,218,1009,1,0,0,0,220,1011,1,0,0,0,222,1015,1,0,0,0,224,1034,
        1,0,0,0,226,1050,1,0,0,0,228,1069,1,0,0,0,230,1071,1,0,0,0,232,1135,
        1,0,0,0,234,1137,1,0,0,0,236,1139,1,0,0,0,238,1141,1,0,0,0,240,1145,
        1,0,0,0,242,1150,1,0,0,0,244,1152,1,0,0,0,246,1154,1,0,0,0,248,1168,
        1,0,0,0,250,1170,1,0,0,0,252,1176,1,0,0,0,254,1185,1,0,0,0,256,1187,
        1,0,0,0,258,1190,1,0,0,0,260,261,5,273,0,0,261,1,1,0,0,0,262,263,
        5,3,0,0,263,264,5,280,0,0,264,265,3,94,47,0,265,266,5,281,0,0,266,
        3,1,0,0,0,267,269,5,53,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,270,
        1,0,0,0,270,271,3,40,20,0,271,5,1,0,0,0,272,274,3,252,126,0,273,
        275,5,182,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,
        277,5,60,0,0,277,278,3,252,126,0,278,279,5,50,0,0,279,280,3,252,
        126,0,280,7,1,0,0,0,281,282,5,277,0,0,282,9,1,0,0,0,283,284,5,278,
        0,0,284,11,1,0,0,0,285,286,5,293,0,0,286,13,1,0,0,0,287,288,5,279,
        0,0,288,15,1,0,0,0,289,291,5,182,0,0,290,289,1,0,0,0,290,291,1,0,
        0,0,291,292,1,0,0,0,292,293,3,20,10,0,293,17,1,0,0,0,294,295,7,0,
        0,0,295,19,1,0,0,0,296,297,5,280,0,0,297,298,3,188,94,0,298,299,
        5,281,0,0,299,303,1,0,0,0,300,303,3,164,82,0,301,303,3,24,12,0,302,
        296,1,0,0,0,302,300,1,0,0,0,302,301,1,0,0,0,303,21,1,0,0,0,304,305,
        6,11,-1,0,305,306,3,16,8,0,306,312,1,0,0,0,307,308,10,1,0,0,308,
        309,5,50,0,0,309,311,3,16,8,0,310,307,1,0,0,0,311,314,1,0,0,0,312,
        310,1,0,0,0,312,313,1,0,0,0,313,23,1,0,0,0,314,312,1,0,0,0,315,318,
        3,18,9,0,316,318,3,246,123,0,317,315,1,0,0,0,317,316,1,0,0,0,318,
        25,1,0,0,0,319,320,5,11,0,0,320,321,5,280,0,0,321,322,3,54,27,0,
        322,323,5,284,0,0,323,324,3,66,33,0,324,325,5,284,0,0,325,326,3,
        146,73,0,326,327,5,284,0,0,327,328,3,146,73,0,328,329,5,281,0,0,
        329,27,1,0,0,0,330,331,5,276,0,0,331,29,1,0,0,0,332,333,5,13,0,0,
        333,334,5,280,0,0,334,335,3,94,47,0,335,336,5,281,0,0,336,31,1,0,
        0,0,337,338,5,169,0,0,338,339,5,280,0,0,339,340,3,34,17,0,340,341,
        5,281,0,0,341,33,1,0,0,0,342,343,5,275,0,0,343,35,1,0,0,0,344,345,
        6,18,-1,0,345,348,3,254,127,0,346,348,3,218,109,0,347,344,1,0,0,
        0,347,346,1,0,0,0,348,357,1,0,0,0,349,350,10,3,0,0,350,353,3,50,
        25,0,351,354,3,254,127,0,352,354,3,218,109,0,353,351,1,0,0,0,353,
        352,1,0,0,0,354,356,1,0,0,0,355,349,1,0,0,0,356,359,1,0,0,0,357,
        355,1,0,0,0,357,358,1,0,0,0,358,37,1,0,0,0,359,357,1,0,0,0,360,361,
        5,14,0,0,361,362,5,280,0,0,362,363,3,54,27,0,363,364,5,284,0,0,364,
        365,3,66,33,0,365,366,5,284,0,0,366,367,3,180,90,0,367,368,5,281,
        0,0,368,39,1,0,0,0,369,370,3,104,52,0,370,41,1,0,0,0,371,376,3,40,
        20,0,372,373,5,284,0,0,373,375,3,40,20,0,374,372,1,0,0,0,375,378,
        1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,43,1,0,0,0,378,376,1,
        0,0,0,379,380,3,168,84,0,380,381,5,286,0,0,381,383,1,0,0,0,382,379,
        1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,3,40,20,0,385,45,
        1,0,0,0,386,387,7,1,0,0,387,47,1,0,0,0,388,389,3,252,126,0,389,390,
        3,46,23,0,390,391,3,252,126,0,391,49,1,0,0,0,392,393,5,296,0,0,393,
        51,1,0,0,0,394,395,5,15,0,0,395,396,5,280,0,0,396,397,3,94,47,0,
        397,398,5,284,0,0,398,399,3,94,47,0,399,400,5,281,0,0,400,53,1,0,
        0,0,401,402,3,216,108,0,402,55,1,0,0,0,403,407,3,160,80,0,404,407,
        3,44,22,0,405,407,3,30,15,0,406,403,1,0,0,0,406,404,1,0,0,0,406,
        405,1,0,0,0,407,57,1,0,0,0,408,409,5,16,0,0,409,410,5,280,0,0,410,
        411,3,56,28,0,411,412,5,281,0,0,412,59,1,0,0,0,413,414,5,17,0,0,
        414,415,5,280,0,0,415,416,3,56,28,0,416,417,5,281,0,0,417,61,1,0,
        0,0,418,419,3,146,73,0,419,63,1,0,0,0,420,421,3,146,73,0,421,65,
        1,0,0,0,422,423,3,62,31,0,423,424,5,284,0,0,424,425,3,64,32,0,425,
        67,1,0,0,0,426,427,3,104,52,0,427,69,1,0,0,0,428,430,5,53,0,0,429,
        428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,3,68,34,0,432,
        71,1,0,0,0,433,434,5,300,0,0,434,435,5,276,0,0,435,436,5,300,0,0,
        436,73,1,0,0,0,437,439,3,252,126,0,438,440,3,4,2,0,439,438,1,0,0,
        0,439,440,1,0,0,0,440,75,1,0,0,0,441,442,3,228,114,0,442,77,1,0,
        0,0,443,444,5,22,0,0,444,457,5,280,0,0,445,446,3,56,28,0,446,447,
        5,284,0,0,447,448,3,56,28,0,448,458,1,0,0,0,449,450,3,146,73,0,450,
        451,5,284,0,0,451,452,3,146,73,0,452,453,5,284,0,0,453,454,3,146,
        73,0,454,455,5,284,0,0,455,456,3,146,73,0,456,458,1,0,0,0,457,445,
        1,0,0,0,457,449,1,0,0,0,458,459,1,0,0,0,459,460,5,281,0,0,460,79,
        1,0,0,0,461,466,3,236,118,0,462,464,5,286,0,0,463,465,3,236,118,
        0,464,463,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,462,1,0,0,
        0,466,467,1,0,0,0,467,471,1,0,0,0,468,469,5,286,0,0,469,471,3,236,
        118,0,470,461,1,0,0,0,470,468,1,0,0,0,471,81,1,0,0,0,472,473,5,124,
        0,0,473,474,3,228,114,0,474,83,1,0,0,0,475,476,5,18,0,0,476,477,
        5,280,0,0,477,478,3,94,47,0,478,479,5,281,0,0,479,85,1,0,0,0,480,
        482,3,204,102,0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,
        483,484,3,144,72,0,484,87,1,0,0,0,485,486,5,134,0,0,486,491,3,226,
        113,0,487,488,5,284,0,0,488,490,3,226,113,0,489,487,1,0,0,0,490,
        493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,89,1,0,0,0,493,491,
        1,0,0,0,494,495,3,34,17,0,495,91,1,0,0,0,496,497,3,198,99,0,497,
        499,5,280,0,0,498,500,3,202,101,0,499,498,1,0,0,0,499,500,1,0,0,
        0,500,501,1,0,0,0,501,502,3,252,126,0,502,503,5,281,0,0,503,93,1,
        0,0,0,504,512,3,26,13,0,505,512,3,30,15,0,506,512,3,38,19,0,507,
        512,3,160,80,0,508,512,3,162,81,0,509,512,3,182,91,0,510,512,3,246,
        123,0,511,504,1,0,0,0,511,505,1,0,0,0,511,506,1,0,0,0,511,507,1,
        0,0,0,511,508,1,0,0,0,511,509,1,0,0,0,511,510,1,0,0,0,512,95,1,0,
        0,0,513,514,5,141,0,0,514,515,5,64,0,0,515,516,3,100,50,0,516,97,
        1,0,0,0,517,518,3,44,22,0,518,99,1,0,0,0,519,524,3,98,49,0,520,521,
        5,284,0,0,521,523,3,98,49,0,522,520,1,0,0,0,523,526,1,0,0,0,524,
        522,1,0,0,0,524,525,1,0,0,0,525,101,1,0,0,0,526,524,1,0,0,0,527,
        528,5,142,0,0,528,529,3,188,94,0,529,103,1,0,0,0,530,533,3,184,92,
        0,531,533,3,72,36,0,532,530,1,0,0,0,532,531,1,0,0,0,533,105,1,0,
        0,0,534,536,3,252,126,0,535,537,5,182,0,0,536,535,1,0,0,0,536,537,
        1,0,0,0,537,538,1,0,0,0,538,539,5,146,0,0,539,540,3,108,54,0,540,
        107,1,0,0,0,541,547,3,228,114,0,542,543,5,280,0,0,543,544,3,110,
        55,0,544,545,5,281,0,0,545,547,1,0,0,0,546,541,1,0,0,0,546,542,1,
        0,0,0,547,109,1,0,0,0,548,553,3,252,126,0,549,550,5,284,0,0,550,
        552,3,252,126,0,551,549,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,
        553,554,1,0,0,0,554,111,1,0,0,0,555,553,1,0,0,0,556,557,5,26,0,0,
        557,558,5,280,0,0,558,559,3,94,47,0,559,560,5,284,0,0,560,561,3,
        94,47,0,561,562,5,281,0,0,562,113,1,0,0,0,563,564,3,42,21,0,564,
        115,1,0,0,0,565,566,5,189,0,0,566,567,3,188,94,0,567,117,1,0,0,0,
        568,571,3,116,58,0,569,571,3,130,65,0,570,568,1,0,0,0,570,569,1,
        0,0,0,571,119,1,0,0,0,572,578,5,149,0,0,573,575,3,156,78,0,574,576,
        5,195,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,572,
        1,0,0,0,577,573,1,0,0,0,578,121,1,0,0,0,579,581,3,226,113,0,580,
        582,5,178,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,
        585,3,120,60,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,
        587,5,160,0,0,587,589,3,226,113,0,588,590,3,118,59,0,589,588,1,0,
        0,0,589,590,1,0,0,0,590,596,1,0,0,0,591,592,5,280,0,0,592,593,3,
        122,61,0,593,594,5,281,0,0,594,596,1,0,0,0,595,579,1,0,0,0,595,591,
        1,0,0,0,596,123,1,0,0,0,597,599,3,126,63,0,598,600,5,182,0,0,599,
        598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,602,5,167,0,0,602,
        603,3,158,79,0,603,612,1,0,0,0,604,606,3,126,63,0,605,607,5,182,
        0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,25,
        0,0,609,610,3,158,79,0,610,612,1,0,0,0,611,597,1,0,0,0,611,604,1,
        0,0,0,612,125,1,0,0,0,613,614,3,36,18,0,614,127,1,0,0,0,615,616,
        5,1,0,0,616,617,5,280,0,0,617,618,3,146,73,0,618,619,5,281,0,0,619,
        702,1,0,0,0,620,621,5,12,0,0,621,622,5,280,0,0,622,623,3,146,73,
        0,623,624,5,281,0,0,624,702,1,0,0,0,625,626,5,21,0,0,626,627,5,280,
        0,0,627,628,3,146,73,0,628,629,5,281,0,0,629,702,1,0,0,0,630,631,
        5,23,0,0,631,632,5,280,0,0,632,633,3,146,73,0,633,634,5,281,0,0,
        634,702,1,0,0,0,635,636,5,24,0,0,636,637,5,280,0,0,637,638,3,146,
        73,0,638,639,5,281,0,0,639,702,1,0,0,0,640,641,5,28,0,0,641,642,
        5,280,0,0,642,643,3,146,73,0,643,644,5,281,0,0,644,702,1,0,0,0,645,
        646,5,29,0,0,646,647,5,280,0,0,647,648,3,146,73,0,648,649,5,281,
        0,0,649,702,1,0,0,0,650,651,5,30,0,0,651,652,5,280,0,0,652,653,3,
        146,73,0,653,654,5,284,0,0,654,655,3,146,73,0,655,656,5,281,0,0,
        656,702,1,0,0,0,657,658,5,31,0,0,658,659,5,280,0,0,659,702,5,281,
        0,0,660,661,5,34,0,0,661,662,5,280,0,0,662,663,3,146,73,0,663,664,
        5,284,0,0,664,665,3,146,73,0,665,666,5,281,0,0,666,702,1,0,0,0,667,
        668,5,35,0,0,668,669,5,280,0,0,669,670,3,146,73,0,670,671,5,281,
        0,0,671,702,1,0,0,0,672,673,5,36,0,0,673,675,5,280,0,0,674,676,3,
        236,118,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,702,
        5,281,0,0,678,679,5,38,0,0,679,680,5,280,0,0,680,683,3,146,73,0,
        681,682,5,284,0,0,682,684,3,206,103,0,683,681,1,0,0,0,683,684,1,
        0,0,0,684,685,1,0,0,0,685,686,5,281,0,0,686,702,1,0,0,0,687,688,
        5,40,0,0,688,689,5,280,0,0,689,690,3,146,73,0,690,691,5,281,0,0,
        691,702,1,0,0,0,692,693,5,43,0,0,693,694,5,280,0,0,694,697,3,146,
        73,0,695,696,5,284,0,0,696,698,3,206,103,0,697,695,1,0,0,0,697,698,
        1,0,0,0,698,699,1,0,0,0,699,700,5,281,0,0,700,702,1,0,0,0,701,615,
        1,0,0,0,701,620,1,0,0,0,701,625,1,0,0,0,701,630,1,0,0,0,701,635,
        1,0,0,0,701,640,1,0,0,0,701,645,1,0,0,0,701,650,1,0,0,0,701,657,
        1,0,0,0,701,660,1,0,0,0,701,667,1,0,0,0,701,672,1,0,0,0,701,678,
        1,0,0,0,701,687,1,0,0,0,701,692,1,0,0,0,702,129,1,0,0,0,703,704,
        5,257,0,0,704,705,5,280,0,0,705,706,3,114,57,0,706,707,5,281,0,0,
        707,131,1,0,0,0,708,724,3,136,68,0,709,710,3,170,85,0,710,712,5,
        250,0,0,711,713,5,47,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,714,
        1,0,0,0,714,715,3,178,89,0,715,724,1,0,0,0,716,717,3,170,85,0,717,
        719,5,120,0,0,718,720,5,47,0,0,719,718,1,0,0,0,719,720,1,0,0,0,720,
        721,1,0,0,0,721,722,3,178,89,0,722,724,1,0,0,0,723,708,1,0,0,0,723,
        709,1,0,0,0,723,716,1,0,0,0,724,133,1,0,0,0,725,731,3,176,88,0,726,
        727,5,280,0,0,727,728,3,132,66,0,728,729,5,281,0,0,729,731,1,0,0,
        0,730,725,1,0,0,0,730,726,1,0,0,0,731,135,1,0,0,0,732,741,3,134,
        67,0,733,734,3,178,89,0,734,736,5,155,0,0,735,737,5,47,0,0,736,735,
        1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,739,3,170,85,0,739,741,
        1,0,0,0,740,732,1,0,0,0,740,733,1,0,0,0,741,137,1,0,0,0,742,747,
        3,2,1,0,743,747,3,58,29,0,744,747,3,60,30,0,745,747,3,78,39,0,746,
        742,1,0,0,0,746,743,1,0,0,0,746,744,1,0,0,0,746,745,1,0,0,0,747,
        139,1,0,0,0,748,749,3,44,22,0,749,751,5,158,0,0,750,752,5,182,0,
        0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,754,5,183,
        0,0,754,141,1,0,0,0,755,758,3,166,83,0,756,758,3,138,69,0,757,755,
        1,0,0,0,757,756,1,0,0,0,758,143,1,0,0,0,759,761,3,204,102,0,760,
        759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,765,3,254,127,0,
        763,765,3,148,74,0,764,760,1,0,0,0,764,763,1,0,0,0,765,145,1,0,0,
        0,766,767,6,73,-1,0,767,772,3,230,115,0,768,769,3,10,5,0,769,770,
        3,146,73,6,770,772,1,0,0,0,771,766,1,0,0,0,771,768,1,0,0,0,772,793,
        1,0,0,0,773,774,10,5,0,0,774,775,3,8,4,0,775,776,3,146,73,6,776,
        792,1,0,0,0,777,778,10,4,0,0,778,779,3,12,6,0,779,780,3,146,73,5,
        780,792,1,0,0,0,781,782,10,3,0,0,782,783,3,14,7,0,783,784,3,146,
        73,4,784,792,1,0,0,0,785,786,10,2,0,0,786,787,5,283,0,0,787,792,
        3,230,115,0,788,789,10,1,0,0,789,790,5,285,0,0,790,792,3,230,115,
        0,791,773,1,0,0,0,791,777,1,0,0,0,791,781,1,0,0,0,791,785,1,0,0,
        0,791,788,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,
        0,794,147,1,0,0,0,795,793,1,0,0,0,796,801,3,232,116,0,797,801,3,
        128,64,0,798,801,3,142,71,0,799,801,3,246,123,0,800,796,1,0,0,0,
        800,797,1,0,0,0,800,798,1,0,0,0,800,799,1,0,0,0,801,149,1,0,0,0,
        802,803,5,188,0,0,803,804,3,236,118,0,804,151,1,0,0,0,805,806,5,
        194,0,0,806,807,5,64,0,0,807,808,3,212,106,0,808,153,1,0,0,0,809,
        810,7,2,0,0,810,155,1,0,0,0,811,812,7,3,0,0,812,157,1,0,0,0,813,
        814,3,36,18,0,814,159,1,0,0,0,815,816,5,32,0,0,816,817,5,280,0,0,
        817,818,3,54,27,0,818,819,5,284,0,0,819,820,3,66,33,0,820,821,5,
        281,0,0,821,161,1,0,0,0,822,823,5,33,0,0,823,824,5,280,0,0,824,825,
        3,54,27,0,825,826,5,284,0,0,826,827,3,66,33,0,827,828,5,284,0,0,
        828,831,3,66,33,0,829,830,5,284,0,0,830,832,3,66,33,0,831,829,1,
        0,0,0,832,833,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,835,1,
        0,0,0,835,836,5,281,0,0,836,163,1,0,0,0,837,844,3,48,24,0,838,844,
        3,6,3,0,839,844,3,106,53,0,840,844,3,124,62,0,841,844,3,140,70,0,
        842,844,3,82,41,0,843,837,1,0,0,0,843,838,1,0,0,0,843,839,1,0,0,
        0,843,840,1,0,0,0,843,841,1,0,0,0,843,842,1,0,0,0,844,165,1,0,0,
        0,845,848,3,52,26,0,846,848,3,112,56,0,847,845,1,0,0,0,847,846,1,
        0,0,0,848,167,1,0,0,0,849,853,3,40,20,0,850,853,3,224,112,0,851,
        853,3,68,34,0,852,849,1,0,0,0,852,850,1,0,0,0,852,851,1,0,0,0,853,
        169,1,0,0,0,854,855,6,85,-1,0,855,858,3,136,68,0,856,858,3,122,61,
        0,857,854,1,0,0,0,857,856,1,0,0,0,858,873,1,0,0,0,859,860,10,3,0,
        0,860,862,5,250,0,0,861,863,5,47,0,0,862,861,1,0,0,0,862,863,1,0,
        0,0,863,864,1,0,0,0,864,872,3,178,89,0,865,866,10,2,0,0,866,868,
        5,120,0,0,867,869,5,47,0,0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,
        1,0,0,0,870,872,3,178,89,0,871,859,1,0,0,0,871,865,1,0,0,0,872,875,
        1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,171,1,0,0,0,875,873,
        1,0,0,0,876,877,5,276,0,0,877,173,1,0,0,0,878,879,3,170,85,0,879,
        880,5,288,0,0,880,175,1,0,0,0,881,882,5,266,0,0,882,884,3,258,129,
        0,883,881,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,886,3,192,
        96,0,886,177,1,0,0,0,887,888,6,89,-1,0,888,891,3,134,67,0,889,891,
        3,122,61,0,890,887,1,0,0,0,890,889,1,0,0,0,891,900,1,0,0,0,892,893,
        10,2,0,0,893,895,5,155,0,0,894,896,5,47,0,0,895,894,1,0,0,0,895,
        896,1,0,0,0,896,897,1,0,0,0,897,899,3,170,85,0,898,892,1,0,0,0,899,
        902,1,0,0,0,900,898,1,0,0,0,900,901,1,0,0,0,901,179,1,0,0,0,902,
        900,1,0,0,0,903,904,3,146,73,0,904,181,1,0,0,0,905,906,5,37,0,0,
        906,907,5,280,0,0,907,908,3,216,108,0,908,909,5,281,0,0,909,183,
        1,0,0,0,910,911,5,276,0,0,911,185,1,0,0,0,912,913,5,276,0,0,913,
        187,1,0,0,0,914,915,6,94,-1,0,915,916,3,22,11,0,916,922,1,0,0,0,
        917,918,10,1,0,0,918,919,5,193,0,0,919,921,3,22,11,0,920,917,1,0,
        0,0,921,924,1,0,0,0,922,920,1,0,0,0,922,923,1,0,0,0,923,189,1,0,
        0,0,924,922,1,0,0,0,925,930,3,194,97,0,926,927,5,284,0,0,927,929,
        3,194,97,0,928,926,1,0,0,0,929,932,1,0,0,0,930,928,1,0,0,0,930,931,
        1,0,0,0,931,946,1,0,0,0,932,930,1,0,0,0,933,943,5,282,0,0,934,935,
        5,284,0,0,935,940,3,194,97,0,936,937,5,284,0,0,937,939,3,194,97,
        0,938,936,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,
        0,941,944,1,0,0,0,942,940,1,0,0,0,943,934,1,0,0,0,943,944,1,0,0,
        0,944,946,1,0,0,0,945,925,1,0,0,0,945,933,1,0,0,0,946,191,1,0,0,
        0,947,949,5,221,0,0,948,950,3,202,101,0,949,948,1,0,0,0,949,950,
        1,0,0,0,950,952,1,0,0,0,951,953,3,200,100,0,952,951,1,0,0,0,952,
        953,1,0,0,0,953,954,1,0,0,0,954,955,3,190,95,0,955,956,3,222,111,
        0,956,193,1,0,0,0,957,963,3,74,37,0,958,959,3,168,84,0,959,960,5,
        286,0,0,960,961,5,282,0,0,961,963,1,0,0,0,962,957,1,0,0,0,962,958,
        1,0,0,0,963,195,1,0,0,0,964,965,5,88,0,0,965,966,5,280,0,0,966,967,
        5,282,0,0,967,970,5,281,0,0,968,970,3,92,46,0,969,964,1,0,0,0,969,
        968,1,0,0,0,970,197,1,0,0,0,971,972,7,4,0,0,972,199,1,0,0,0,973,
        974,5,42,0,0,974,975,3,236,118,0,975,201,1,0,0,0,976,977,7,5,0,0,
        977,203,1,0,0,0,978,979,7,6,0,0,979,205,1,0,0,0,980,982,3,204,102,
        0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,3,236,
        118,0,984,207,1,0,0,0,985,989,3,252,126,0,986,989,3,44,22,0,987,
        989,3,236,118,0,988,985,1,0,0,0,988,986,1,0,0,0,988,987,1,0,0,0,
        989,209,1,0,0,0,990,992,3,208,104,0,991,993,3,154,77,0,992,991,1,
        0,0,0,992,993,1,0,0,0,993,211,1,0,0,0,994,999,3,210,105,0,995,996,
        5,284,0,0,996,998,3,210,105,0,997,995,1,0,0,0,998,1001,1,0,0,0,999,
        997,1,0,0,0,999,1000,1,0,0,0,1000,213,1,0,0,0,1001,999,1,0,0,0,1002,
        1003,3,84,42,0,1003,215,1,0,0,0,1004,1005,3,36,18,0,1005,217,1,0,
        0,0,1006,1010,3,214,107,0,1007,1010,3,246,123,0,1008,1010,3,32,16,
        0,1009,1006,1,0,0,0,1009,1007,1,0,0,0,1009,1008,1,0,0,0,1010,219,
        1,0,0,0,1011,1012,5,280,0,0,1012,1013,3,170,85,0,1013,1014,5,281,
        0,0,1014,221,1,0,0,0,1015,1017,3,88,44,0,1016,1018,3,256,128,0,1017,
        1016,1,0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,1021,3,96,
        48,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1023,1,0,0,0,1022,
        1024,3,102,51,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1026,1,
        0,0,0,1025,1027,3,152,76,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,
        1029,1,0,0,0,1028,1030,3,150,75,0,1029,1028,1,0,0,0,1029,1030,1,
        0,0,0,1030,223,1,0,0,0,1031,1032,3,186,93,0,1032,1033,5,286,0,0,
        1033,1035,1,0,0,0,1034,1031,1,0,0,0,1034,1035,1,0,0,0,1035,1036,
        1,0,0,0,1036,1037,3,104,52,0,1037,225,1,0,0,0,1038,1039,6,113,-1,
        0,1039,1041,3,224,112,0,1040,1042,3,70,35,0,1041,1040,1,0,0,0,1041,
        1042,1,0,0,0,1042,1051,1,0,0,0,1043,1044,3,76,38,0,1044,1045,3,70,
        35,0,1045,1051,1,0,0,0,1046,1047,5,280,0,0,1047,1048,3,122,61,0,
        1048,1049,5,281,0,0,1049,1051,1,0,0,0,1050,1038,1,0,0,0,1050,1043,
        1,0,0,0,1050,1046,1,0,0,0,1051,1066,1,0,0,0,1052,1054,10,2,0,0,1053,
        1055,5,178,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1057,1,0,
        0,0,1056,1058,3,120,60,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,
        1059,1,0,0,0,1059,1060,5,160,0,0,1060,1062,3,226,113,0,1061,1063,
        3,118,59,0,1062,1061,1,0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,
        1064,1052,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,
        1,0,0,0,1067,227,1,0,0,0,1068,1066,1,0,0,0,1069,1070,3,220,110,0,
        1070,229,1,0,0,0,1071,1072,6,115,-1,0,1072,1073,3,86,43,0,1073,1085,
        1,0,0,0,1074,1075,10,3,0,0,1075,1076,5,282,0,0,1076,1084,3,86,43,
        0,1077,1078,10,2,0,0,1078,1079,5,295,0,0,1079,1084,3,86,43,0,1080,
        1081,10,1,0,0,1081,1082,5,302,0,0,1082,1084,3,86,43,0,1083,1074,
        1,0,0,0,1083,1077,1,0,0,0,1083,1080,1,0,0,0,1084,1087,1,0,0,0,1085,
        1083,1,0,0,0,1085,1086,1,0,0,0,1086,231,1,0,0,0,1087,1085,1,0,0,
        0,1088,1089,5,2,0,0,1089,1090,5,280,0,0,1090,1091,3,146,73,0,1091,
        1092,5,281,0,0,1092,1136,1,0,0,0,1093,1094,5,2,0,0,1094,1095,5,280,
        0,0,1095,1096,3,146,73,0,1096,1097,5,281,0,0,1097,1136,1,0,0,0,1098,
        1099,5,4,0,0,1099,1100,5,280,0,0,1100,1101,3,146,73,0,1101,1102,
        5,281,0,0,1102,1136,1,0,0,0,1103,1104,5,5,0,0,1104,1105,5,280,0,
        0,1105,1106,3,146,73,0,1106,1107,5,281,0,0,1107,1136,1,0,0,0,1108,
        1109,5,6,0,0,1109,1110,5,280,0,0,1110,1111,3,146,73,0,1111,1112,
        5,284,0,0,1112,1113,3,146,73,0,1113,1114,5,281,0,0,1114,1136,1,0,
        0,0,1115,1116,5,19,0,0,1116,1117,5,280,0,0,1117,1118,3,146,73,0,
        1118,1119,5,281,0,0,1119,1136,1,0,0,0,1120,1121,5,20,0,0,1121,1122,
        5,280,0,0,1122,1123,3,146,73,0,1123,1124,5,281,0,0,1124,1136,1,0,
        0,0,1125,1126,5,39,0,0,1126,1127,5,280,0,0,1127,1128,3,146,73,0,
        1128,1129,5,281,0,0,1129,1136,1,0,0,0,1130,1131,5,41,0,0,1131,1132,
        5,280,0,0,1132,1133,3,146,73,0,1133,1134,5,281,0,0,1134,1136,1,0,
        0,0,1135,1088,1,0,0,0,1135,1093,1,0,0,0,1135,1098,1,0,0,0,1135,1103,
        1,0,0,0,1135,1108,1,0,0,0,1135,1115,1,0,0,0,1135,1120,1,0,0,0,1135,
        1125,1,0,0,0,1135,1130,1,0,0,0,1136,233,1,0,0,0,1137,1138,5,276,
        0,0,1138,235,1,0,0,0,1139,1140,5,271,0,0,1140,237,1,0,0,0,1141,1142,
        5,274,0,0,1142,239,1,0,0,0,1143,1146,3,242,121,0,1144,1146,3,90,
        45,0,1145,1143,1,0,0,0,1145,1144,1,0,0,0,1146,241,1,0,0,0,1147,1151,
        3,80,40,0,1148,1151,3,0,0,0,1149,1151,3,238,119,0,1150,1147,1,0,
        0,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,243,1,0,0,0,1152,1153,
        3,240,120,0,1153,245,1,0,0,0,1154,1155,3,248,124,0,1155,1164,5,280,
        0,0,1156,1161,3,250,125,0,1157,1158,5,284,0,0,1158,1160,3,250,125,
        0,1159,1157,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,
        1,0,0,0,1162,1165,1,0,0,0,1163,1161,1,0,0,0,1164,1156,1,0,0,0,1164,
        1165,1,0,0,0,1165,1166,1,0,0,0,1166,1167,5,281,0,0,1167,247,1,0,
        0,0,1168,1169,3,184,92,0,1169,249,1,0,0,0,1170,1171,3,252,126,0,
        1171,251,1,0,0,0,1172,1177,3,146,73,0,1173,1177,3,216,108,0,1174,
        1177,3,24,12,0,1175,1177,3,94,47,0,1176,1172,1,0,0,0,1176,1173,1,
        0,0,0,1176,1174,1,0,0,0,1176,1175,1,0,0,0,1177,253,1,0,0,0,1178,
        1186,3,244,122,0,1179,1186,3,44,22,0,1180,1186,3,196,98,0,1181,1182,
        5,280,0,0,1182,1183,3,252,126,0,1183,1184,5,281,0,0,1184,1186,1,
        0,0,0,1185,1178,1,0,0,0,1185,1179,1,0,0,0,1185,1180,1,0,0,0,1185,
        1181,1,0,0,0,1186,255,1,0,0,0,1187,1188,5,265,0,0,1188,1189,3,188,
        94,0,1189,257,1,0,0,0,1190,1202,3,172,86,0,1191,1192,5,280,0,0,1192,
        1197,3,40,20,0,1193,1194,5,284,0,0,1194,1196,3,40,20,0,1195,1193,
        1,0,0,0,1196,1199,1,0,0,0,1197,1195,1,0,0,0,1197,1198,1,0,0,0,1198,
        1200,1,0,0,0,1199,1197,1,0,0,0,1200,1201,5,281,0,0,1201,1203,1,0,
        0,0,1202,1191,1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1205,
        5,53,0,0,1205,1207,5,280,0,0,1206,1208,3,176,88,0,1207,1206,1,0,
        0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1210,5,281,0,0,1210,
        259,1,0,0,0,107,268,274,290,302,312,317,347,353,357,376,382,406,
        429,439,457,464,466,470,481,491,499,511,524,532,536,546,553,570,
        575,577,581,584,589,595,599,606,611,675,683,697,701,712,719,723,
        730,736,740,746,751,757,760,764,771,791,793,800,833,843,847,852,
        857,862,868,871,873,883,890,895,900,922,930,940,943,945,949,952,
        962,969,981,988,992,999,1009,1017,1020,1023,1026,1029,1034,1041,
        1050,1054,1057,1062,1066,1083,1085,1135,1145,1150,1161,1164,1176,
        1185,1197,1202,1207
    ]

class ADQLParser ( Parser ):

    grammarFileName = "ADQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'&'", "'~'", "'^'", "'('", "')'", "'*'", 
                     "'+'", "','", "'-'", "'.'", "':'", "';'", "'<'", "'='", 
                     "'>'", "'?'", "'|'", "'_'", "'/'", "'||'", "'<='", 
                     "'>='", "<INVALID>", "'\"'", "'''", "'%'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "AREA", "ASIN", "ATAN", 
                      "ATAN2", "BIT_AND", "BIT_NOT", "BIT_OR", "BIT_XOR", 
                      "BOX", "CEILING", "CENTROID", "CIRCLE", "CONTAINS", 
                      "COORD1", "COORD2", "COORDSYS", "COS", "COT", "DEGREES", 
                      "DISTANCE", "EXP", "FLOOR", "ILIKE", "INTERSECTS", 
                      "IN_UNIT", "LOG", "LOG10", "MOD", "PI", "POINT", "POLYGON", 
                      "POWER", "RADIANS", "RAND", "REGION", "ROUND", "SIN", 
                      "SQRT", "TAN", "TOP", "TRUNCATE", "ABSOLUTE", "ACTION", 
                      "ADD", "ALL", "ALLOCATE", "ALTER", "AND", "ANY", "ARE", 
                      "AS", "ASC", "ASSERTION", "AT", "AUTHORIZATION", "AVG", 
                      "BEGIN", "BETWEEN", "BIT", "BIT_LENGTH", "BOTH", "BY", 
                      "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", 
                      "CHAR", "CHARACTER", "CHAR_LENGTH", "CHARACTER_LENGTH", 
                      "CHECK", "CLOSE", "COALESCE", "COLLATE", "COLLATION", 
                      "COLUMN", "COMMIT", "CONNECT", "CONNECTION", "CONSTRAINT", 
                      "CONSTRAINTS", "CONTINUE", "CONVERT", "CORRESPONDING", 
                      "COUNT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "DATE", "DAY", "DEALLOCATE", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", 
                      "DESC", "DESCRIBE", "DESCRIPTOR", "DIAGNOSTICS", "DISCONNECT", 
                      "DISTINCT", "DOMAIN", "DOUBLE", "DROP", "E_SYM", "ELSE", 
                      "END", "ENDEXEC_SYM", "ESCAPE", "EXCEPT", "EXCEPTION", 
                      "EXEC", "EXECUTE", "EXISTS", "EXTERNAL", "EXTRACT", 
                      "FALSE", "FETCH", "FIRST", "FLOAT", "FOR", "FOREIGN", 
                      "FOUND", "FROM", "FULL", "GET", "GLOBAL", "GO", "GOTO", 
                      "GRANT", "GROUP", "HAVING", "HOUR", "IDENTITY", "IMMEDIATE", 
                      "IN", "INDICATOR", "INITIALLY", "INNER", "INPUT", 
                      "INSENSITIVE", "INSERT", "INT_SYM", "INTEGER", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ISOLATION", "JOIN", "KEY", 
                      "LANGUAGE", "LAST", "LEADING", "LEFT", "LEVEL", "LIKE", 
                      "LOCAL", "LOWER", "MATCH", "MAX", "MIN", "MINUTE", 
                      "MODULE", "MONTH", "NAMES", "NATIONAL", "NATURAL", 
                      "NCHAR", "NEXT", "NO", "NOT", "NULL", "NULLIF", "NUMERIC", 
                      "OCTET_LENGTH", "OF", "OFFSET", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "OUTER", "OUTPUT", "OVERLAPS", 
                      "PAD", "PARTIAL", "POSITION", "PRECISION", "PREPARE", 
                      "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURE", 
                      "READ", "REAL_SYM", "REFERENCES", "RELATIVE", "RESTRICT", 
                      "REVOKE", "RIGHT", "ROLLBACK", "ROWS", "SCHEMA", "SCROLL", 
                      "SECOND", "SECTION", "SELECT", "SESSION", "SESSION_USER", 
                      "SET", "SIZE", "SMALLINT", "SOME", "SPACE", "SQL", 
                      "SQLCODE", "SQLERROR", "SQLSTATE", "SUBSTRING", "SUM", 
                      "SYSTEM_USER", "TABLE", "TEMPORARY", "THEN", "TIME", 
                      "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", 
                      "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", 
                      "TRIM", "TRUE", "UNION", "UNIQUE", "UNKNOWN", "UPDATE", 
                      "UPPER", "USAGE", "USER", "USING", "VALUE", "VALUES", 
                      "VARCHAR", "VARYING", "VIEW", "WHEN", "WHENEVER", 
                      "WHERE", "WITH", "WORK", "WRITE", "YEAR", "ZONE", 
                      "INT", "EXPONENT", "REAL", "HEX_DIGIT", "CSL", "ID", 
                      "AMPERSAND", "TILDE", "CIRCUMFLEX", "LPAREN", "RPAREN", 
                      "ASTERISK", "PLUS", "COMMA", "MINUS", "DOT", "COLON", 
                      "SEMI", "LTH", "EQ", "GTH", "QUESTION", "VERTBAR", 
                      "UNDERSCORE", "SOLIDUS", "CONCAT", "LEET", "GRET", 
                      "NOT_EQ", "DQ", "SQ", "MOD_SYM", "DQ_SYM", "WS", "COMMENT" ]

    RULE_approximate_numeric_literal = 0
    RULE_area = 1
    RULE_as_clause = 2
    RULE_between_predicate = 3
    RULE_bitwise_and = 4
    RULE_bitwise_not = 5
    RULE_bitwise_or = 6
    RULE_bitwise_xor = 7
    RULE_boolean_factor = 8
    RULE_boolean_literal = 9
    RULE_boolean_primary = 10
    RULE_boolean_term = 11
    RULE_boolean_value_expression = 12
    RULE_box = 13
    RULE_catalog_name = 14
    RULE_centroid = 15
    RULE_char_function = 16
    RULE_character_string_literal = 17
    RULE_character_value_expression = 18
    RULE_circle = 19
    RULE_column_name = 20
    RULE_column_name_list = 21
    RULE_column_reference = 22
    RULE_comp_op = 23
    RULE_comparison_predicate = 24
    RULE_concatenation_operator = 25
    RULE_contains = 26
    RULE_coord_sys = 27
    RULE_coord_value = 28
    RULE_coord1 = 29
    RULE_coord2 = 30
    RULE_coordinate1 = 31
    RULE_coordinate2 = 32
    RULE_coordinates = 33
    RULE_correlation_name = 34
    RULE_correlation_specification = 35
    RULE_delimited_identifier = 36
    RULE_derived_column = 37
    RULE_derived_table = 38
    RULE_distance = 39
    RULE_exact_numeric_literal = 40
    RULE_exists_predicate = 41
    RULE_extract_coordsys = 42
    RULE_factor = 43
    RULE_from_clause = 44
    RULE_general_literal = 45
    RULE_general_set_function = 46
    RULE_geometry_value_expression = 47
    RULE_group_by_clause = 48
    RULE_grouping_column_reference = 49
    RULE_grouping_column_reference_list = 50
    RULE_having_clause = 51
    RULE_identifier = 52
    RULE_in_predicate = 53
    RULE_in_predicate_value = 54
    RULE_in_value_list = 55
    RULE_intersects = 56
    RULE_join_column_list = 57
    RULE_join_condition = 58
    RULE_join_specification = 59
    RULE_join_type = 60
    RULE_joined_table = 61
    RULE_like_predicate = 62
    RULE_match_value = 63
    RULE_math_function = 64
    RULE_named_columns_join = 65
    RULE_non_join_query_expression = 66
    RULE_non_join_query_primary = 67
    RULE_non_join_query_term = 68
    RULE_non_predicate_geometry_function = 69
    RULE_null_predicate = 70
    RULE_numeric_geometry_function = 71
    RULE_numeric_primary = 72
    RULE_numeric_value_expression = 73
    RULE_numeric_value_function = 74
    RULE_offset_clause = 75
    RULE_order_by_clause = 76
    RULE_ordering_specification = 77
    RULE_outer_join_type = 78
    RULE_pattern = 79
    RULE_point = 80
    RULE_polygon = 81
    RULE_predicate = 82
    RULE_predicate_geometry_function = 83
    RULE_qualifier = 84
    RULE_query_expression = 85
    RULE_query_name = 86
    RULE_query = 87
    RULE_query_specification = 88
    RULE_query_term = 89
    RULE_radius = 90
    RULE_region = 91
    RULE_regular_identifier = 92
    RULE_schema_name = 93
    RULE_search_condition = 94
    RULE_select_list = 95
    RULE_select_query = 96
    RULE_select_sublist = 97
    RULE_set_function_specification = 98
    RULE_set_function_type = 99
    RULE_set_limit = 100
    RULE_set_quantifier = 101
    RULE_sign = 102
    RULE_signed_integer = 103
    RULE_sort_key = 104
    RULE_sort_specification = 105
    RULE_sort_specification_list = 106
    RULE_string_geometry_function = 107
    RULE_string_value_expression = 108
    RULE_string_value_function = 109
    RULE_subquery = 110
    RULE_table_expression = 111
    RULE_table_name = 112
    RULE_table_reference = 113
    RULE_table_subquery = 114
    RULE_term = 115
    RULE_trig_function = 116
    RULE_unqualified_schema_name = 117
    RULE_unsigned_decimal = 118
    RULE_unsigned_hexadecimal = 119
    RULE_unsigned_literal = 120
    RULE_unsigned_numeric_literal = 121
    RULE_unsigned_value_specification = 122
    RULE_user_defined_function = 123
    RULE_user_defined_function_name = 124
    RULE_user_defined_function_param = 125
    RULE_value_expression = 126
    RULE_value_expression_primary = 127
    RULE_where_clause = 128
    RULE_with_query = 129

    ruleNames =  [ "approximate_numeric_literal", "area", "as_clause", "between_predicate", 
                   "bitwise_and", "bitwise_not", "bitwise_or", "bitwise_xor", 
                   "boolean_factor", "boolean_literal", "boolean_primary", 
                   "boolean_term", "boolean_value_expression", "box", "catalog_name", 
                   "centroid", "char_function", "character_string_literal", 
                   "character_value_expression", "circle", "column_name", 
                   "column_name_list", "column_reference", "comp_op", "comparison_predicate", 
                   "concatenation_operator", "contains", "coord_sys", "coord_value", 
                   "coord1", "coord2", "coordinate1", "coordinate2", "coordinates", 
                   "correlation_name", "correlation_specification", "delimited_identifier", 
                   "derived_column", "derived_table", "distance", "exact_numeric_literal", 
                   "exists_predicate", "extract_coordsys", "factor", "from_clause", 
                   "general_literal", "general_set_function", "geometry_value_expression", 
                   "group_by_clause", "grouping_column_reference", "grouping_column_reference_list", 
                   "having_clause", "identifier", "in_predicate", "in_predicate_value", 
                   "in_value_list", "intersects", "join_column_list", "join_condition", 
                   "join_specification", "join_type", "joined_table", "like_predicate", 
                   "match_value", "math_function", "named_columns_join", 
                   "non_join_query_expression", "non_join_query_primary", 
                   "non_join_query_term", "non_predicate_geometry_function", 
                   "null_predicate", "numeric_geometry_function", "numeric_primary", 
                   "numeric_value_expression", "numeric_value_function", 
                   "offset_clause", "order_by_clause", "ordering_specification", 
                   "outer_join_type", "pattern", "point", "polygon", "predicate", 
                   "predicate_geometry_function", "qualifier", "query_expression", 
                   "query_name", "query", "query_specification", "query_term", 
                   "radius", "region", "regular_identifier", "schema_name", 
                   "search_condition", "select_list", "select_query", "select_sublist", 
                   "set_function_specification", "set_function_type", "set_limit", 
                   "set_quantifier", "sign", "signed_integer", "sort_key", 
                   "sort_specification", "sort_specification_list", "string_geometry_function", 
                   "string_value_expression", "string_value_function", "subquery", 
                   "table_expression", "table_name", "table_reference", 
                   "table_subquery", "term", "trig_function", "unqualified_schema_name", 
                   "unsigned_decimal", "unsigned_hexadecimal", "unsigned_literal", 
                   "unsigned_numeric_literal", "unsigned_value_specification", 
                   "user_defined_function", "user_defined_function_name", 
                   "user_defined_function_param", "value_expression", "value_expression_primary", 
                   "where_clause", "with_query" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    AREA=3
    ASIN=4
    ATAN=5
    ATAN2=6
    BIT_AND=7
    BIT_NOT=8
    BIT_OR=9
    BIT_XOR=10
    BOX=11
    CEILING=12
    CENTROID=13
    CIRCLE=14
    CONTAINS=15
    COORD1=16
    COORD2=17
    COORDSYS=18
    COS=19
    COT=20
    DEGREES=21
    DISTANCE=22
    EXP=23
    FLOOR=24
    ILIKE=25
    INTERSECTS=26
    IN_UNIT=27
    LOG=28
    LOG10=29
    MOD=30
    PI=31
    POINT=32
    POLYGON=33
    POWER=34
    RADIANS=35
    RAND=36
    REGION=37
    ROUND=38
    SIN=39
    SQRT=40
    TAN=41
    TOP=42
    TRUNCATE=43
    ABSOLUTE=44
    ACTION=45
    ADD=46
    ALL=47
    ALLOCATE=48
    ALTER=49
    AND=50
    ANY=51
    ARE=52
    AS=53
    ASC=54
    ASSERTION=55
    AT=56
    AUTHORIZATION=57
    AVG=58
    BEGIN=59
    BETWEEN=60
    BIT=61
    BIT_LENGTH=62
    BOTH=63
    BY=64
    CASCADE=65
    CASCADED=66
    CASE=67
    CAST=68
    CATALOG=69
    CHAR=70
    CHARACTER=71
    CHAR_LENGTH=72
    CHARACTER_LENGTH=73
    CHECK=74
    CLOSE=75
    COALESCE=76
    COLLATE=77
    COLLATION=78
    COLUMN=79
    COMMIT=80
    CONNECT=81
    CONNECTION=82
    CONSTRAINT=83
    CONSTRAINTS=84
    CONTINUE=85
    CONVERT=86
    CORRESPONDING=87
    COUNT=88
    CREATE=89
    CROSS=90
    CURRENT=91
    CURRENT_DATE=92
    CURRENT_TIME=93
    CURRENT_TIMESTAMP=94
    CURRENT_USER=95
    CURSOR=96
    DATE=97
    DAY=98
    DEALLOCATE=99
    DECIMAL=100
    DECLARE=101
    DEFAULT=102
    DEFERRABLE=103
    DEFERRED=104
    DELETE=105
    DESC=106
    DESCRIBE=107
    DESCRIPTOR=108
    DIAGNOSTICS=109
    DISCONNECT=110
    DISTINCT=111
    DOMAIN=112
    DOUBLE=113
    DROP=114
    E_SYM=115
    ELSE=116
    END=117
    ENDEXEC_SYM=118
    ESCAPE=119
    EXCEPT=120
    EXCEPTION=121
    EXEC=122
    EXECUTE=123
    EXISTS=124
    EXTERNAL=125
    EXTRACT=126
    FALSE=127
    FETCH=128
    FIRST=129
    FLOAT=130
    FOR=131
    FOREIGN=132
    FOUND=133
    FROM=134
    FULL=135
    GET=136
    GLOBAL=137
    GO=138
    GOTO=139
    GRANT=140
    GROUP=141
    HAVING=142
    HOUR=143
    IDENTITY=144
    IMMEDIATE=145
    IN=146
    INDICATOR=147
    INITIALLY=148
    INNER=149
    INPUT=150
    INSENSITIVE=151
    INSERT=152
    INT_SYM=153
    INTEGER=154
    INTERSECT=155
    INTERVAL=156
    INTO=157
    IS=158
    ISOLATION=159
    JOIN=160
    KEY=161
    LANGUAGE=162
    LAST=163
    LEADING=164
    LEFT=165
    LEVEL=166
    LIKE=167
    LOCAL=168
    LOWER=169
    MATCH=170
    MAX=171
    MIN=172
    MINUTE=173
    MODULE=174
    MONTH=175
    NAMES=176
    NATIONAL=177
    NATURAL=178
    NCHAR=179
    NEXT=180
    NO=181
    NOT=182
    NULL=183
    NULLIF=184
    NUMERIC=185
    OCTET_LENGTH=186
    OF=187
    OFFSET=188
    ON=189
    ONLY=190
    OPEN=191
    OPTION=192
    OR=193
    ORDER=194
    OUTER=195
    OUTPUT=196
    OVERLAPS=197
    PAD=198
    PARTIAL=199
    POSITION=200
    PRECISION=201
    PREPARE=202
    PRESERVE=203
    PRIMARY=204
    PRIOR=205
    PRIVILEGES=206
    PROCEDURE=207
    READ=208
    REAL_SYM=209
    REFERENCES=210
    RELATIVE=211
    RESTRICT=212
    REVOKE=213
    RIGHT=214
    ROLLBACK=215
    ROWS=216
    SCHEMA=217
    SCROLL=218
    SECOND=219
    SECTION=220
    SELECT=221
    SESSION=222
    SESSION_USER=223
    SET=224
    SIZE=225
    SMALLINT=226
    SOME=227
    SPACE=228
    SQL=229
    SQLCODE=230
    SQLERROR=231
    SQLSTATE=232
    SUBSTRING=233
    SUM=234
    SYSTEM_USER=235
    TABLE=236
    TEMPORARY=237
    THEN=238
    TIME=239
    TIMESTAMP=240
    TIMEZONE_HOUR=241
    TIMEZONE_MINUTE=242
    TO=243
    TRAILING=244
    TRANSACTION=245
    TRANSLATE=246
    TRANSLATION=247
    TRIM=248
    TRUE=249
    UNION=250
    UNIQUE=251
    UNKNOWN=252
    UPDATE=253
    UPPER=254
    USAGE=255
    USER=256
    USING=257
    VALUE=258
    VALUES=259
    VARCHAR=260
    VARYING=261
    VIEW=262
    WHEN=263
    WHENEVER=264
    WHERE=265
    WITH=266
    WORK=267
    WRITE=268
    YEAR=269
    ZONE=270
    INT=271
    EXPONENT=272
    REAL=273
    HEX_DIGIT=274
    CSL=275
    ID=276
    AMPERSAND=277
    TILDE=278
    CIRCUMFLEX=279
    LPAREN=280
    RPAREN=281
    ASTERISK=282
    PLUS=283
    COMMA=284
    MINUS=285
    DOT=286
    COLON=287
    SEMI=288
    LTH=289
    EQ=290
    GTH=291
    QUESTION=292
    VERTBAR=293
    UNDERSCORE=294
    SOLIDUS=295
    CONCAT=296
    LEET=297
    GRET=298
    NOT_EQ=299
    DQ=300
    SQ=301
    MOD_SYM=302
    DQ_SYM=303
    WS=304
    COMMENT=305

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Approximate_numeric_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REAL(self):
            return self.getToken(ADQLParser.REAL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_approximate_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApproximate_numeric_literal" ):
                listener.enterApproximate_numeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApproximate_numeric_literal" ):
                listener.exitApproximate_numeric_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApproximate_numeric_literal" ):
                return visitor.visitApproximate_numeric_literal(self)
            else:
                return visitor.visitChildren(self)




    def approximate_numeric_literal(self):

        localctx = ADQLParser.Approximate_numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_approximate_numeric_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(ADQLParser.REAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(ADQLParser.AREA, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_area

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea" ):
                listener.enterArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea" ):
                listener.exitArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea" ):
                return visitor.visitArea(self)
            else:
                return visitor.visitChildren(self)




    def area(self):

        localctx = ADQLParser.AreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_area)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(ADQLParser.AREA)
            self.state = 263
            self.match(ADQLParser.LPAREN)
            self.state = 264
            self.geometry_value_expression()
            self.state = 265
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ADQLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(ADQLParser.AS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_as_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_clause" ):
                listener.enterAs_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_clause" ):
                listener.exitAs_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_clause" ):
                return visitor.visitAs_clause(self)
            else:
                return visitor.visitChildren(self)




    def as_clause(self):

        localctx = ADQLParser.As_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_as_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 267
                self.match(ADQLParser.AS)


            self.state = 270
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Value_expressionContext,i)


        def BETWEEN(self):
            return self.getToken(ADQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(ADQLParser.AND, 0)

        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_between_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_predicate" ):
                listener.enterBetween_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_predicate" ):
                listener.exitBetween_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_predicate" ):
                return visitor.visitBetween_predicate(self)
            else:
                return visitor.visitChildren(self)




    def between_predicate(self):

        localctx = ADQLParser.Between_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_between_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.value_expression()
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 273
                self.match(ADQLParser.NOT)


            self.state = 276
            self.match(ADQLParser.BETWEEN)
            self.state = 277
            self.value_expression()
            self.state = 278
            self.match(ADQLParser.AND)
            self.state = 279
            self.value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(ADQLParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_and" ):
                listener.enterBitwise_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_and" ):
                listener.exitBitwise_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_and" ):
                return visitor.visitBitwise_and(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_and(self):

        localctx = ADQLParser.Bitwise_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_bitwise_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(ADQLParser.AMPERSAND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(ADQLParser.TILDE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_not" ):
                listener.enterBitwise_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_not" ):
                listener.exitBitwise_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_not" ):
                return visitor.visitBitwise_not(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_not(self):

        localctx = ADQLParser.Bitwise_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_bitwise_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(ADQLParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERTBAR(self):
            return self.getToken(ADQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_or" ):
                listener.enterBitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_or" ):
                listener.exitBitwise_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_or" ):
                return visitor.visitBitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_or(self):

        localctx = ADQLParser.Bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(ADQLParser.VERTBAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CIRCUMFLEX(self):
            return self.getToken(ADQLParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_xor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_xor" ):
                listener.enterBitwise_xor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_xor" ):
                listener.exitBitwise_xor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_xor" ):
                return visitor.visitBitwise_xor(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_xor(self):

        localctx = ADQLParser.Bitwise_xorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_bitwise_xor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(ADQLParser.CIRCUMFLEX)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_factorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_primary(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_primaryContext,0)


        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_factor" ):
                listener.enterBoolean_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_factor" ):
                listener.exitBoolean_factor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_factor" ):
                return visitor.visitBoolean_factor(self)
            else:
                return visitor.visitChildren(self)




    def boolean_factor(self):

        localctx = ADQLParser.Boolean_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_boolean_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 289
                self.match(ADQLParser.NOT)


            self.state = 292
            self.boolean_primary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(ADQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(ADQLParser.FALSE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_literal" ):
                return visitor.visitBoolean_literal(self)
            else:
                return visitor.visitChildren(self)




    def boolean_literal(self):

        localctx = ADQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            _la = self._input.LA(1)
            if not(_la==127 or _la==249):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def predicate(self):
            return self.getTypedRuleContext(ADQLParser.PredicateContext,0)


        def boolean_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_primary" ):
                listener.enterBoolean_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_primary" ):
                listener.exitBoolean_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_primary" ):
                return visitor.visitBoolean_primary(self)
            else:
                return visitor.visitChildren(self)




    def boolean_primary(self):

        localctx = ADQLParser.Boolean_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_boolean_primary)
        try:
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.match(ADQLParser.LPAREN)
                self.state = 297
                self.search_condition(0)
                self.state = 298
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.predicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 301
                self.boolean_value_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_factor(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_factorContext,0)


        def boolean_term(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_termContext,0)


        def AND(self):
            return self.getToken(ADQLParser.AND, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_term" ):
                listener.enterBoolean_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_term" ):
                listener.exitBoolean_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_term" ):
                return visitor.visitBoolean_term(self)
            else:
                return visitor.visitChildren(self)



    def boolean_term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Boolean_termContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_boolean_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.boolean_factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 312
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Boolean_termContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_boolean_term)
                    self.state = 307
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 308
                    self.match(ADQLParser.AND)
                    self.state = 309
                    self.boolean_factor() 
                self.state = 314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Boolean_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_literalContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_value_expression" ):
                listener.enterBoolean_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_value_expression" ):
                listener.exitBoolean_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_value_expression" ):
                return visitor.visitBoolean_value_expression(self)
            else:
                return visitor.visitChildren(self)




    def boolean_value_expression(self):

        localctx = ADQLParser.Boolean_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_boolean_value_expression)
        try:
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127, 249]:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.boolean_literal()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self.user_defined_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOX(self):
            return self.getToken(ADQLParser.BOX, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def coordinates(self):
            return self.getTypedRuleContext(ADQLParser.CoordinatesContext,0)


        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_box

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBox" ):
                listener.enterBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBox" ):
                listener.exitBox(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBox" ):
                return visitor.visitBox(self)
            else:
                return visitor.visitChildren(self)




    def box(self):

        localctx = ADQLParser.BoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_box)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(ADQLParser.BOX)
            self.state = 320
            self.match(ADQLParser.LPAREN)
            self.state = 321
            self.coord_sys()
            self.state = 322
            self.match(ADQLParser.COMMA)
            self.state = 323
            self.coordinates()
            self.state = 324
            self.match(ADQLParser.COMMA)
            self.state = 325
            self.numeric_value_expression(0)
            self.state = 326
            self.match(ADQLParser.COMMA)
            self.state = 327
            self.numeric_value_expression(0)
            self.state = 328
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_catalog_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_name" ):
                listener.enterCatalog_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_name" ):
                listener.exitCatalog_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_name" ):
                return visitor.visitCatalog_name(self)
            else:
                return visitor.visitChildren(self)




    def catalog_name(self):

        localctx = ADQLParser.Catalog_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_catalog_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CentroidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CENTROID(self):
            return self.getToken(ADQLParser.CENTROID, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_centroid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCentroid" ):
                listener.enterCentroid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCentroid" ):
                listener.exitCentroid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCentroid" ):
                return visitor.visitCentroid(self)
            else:
                return visitor.visitChildren(self)




    def centroid(self):

        localctx = ADQLParser.CentroidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_centroid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(ADQLParser.CENTROID)
            self.state = 333
            self.match(ADQLParser.LPAREN)
            self.state = 334
            self.geometry_value_expression()
            self.state = 335
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(ADQLParser.LOWER, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def character_string_literal(self):
            return self.getTypedRuleContext(ADQLParser.Character_string_literalContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_char_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_function" ):
                listener.enterChar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_function" ):
                listener.exitChar_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChar_function" ):
                return visitor.visitChar_function(self)
            else:
                return visitor.visitChildren(self)




    def char_function(self):

        localctx = ADQLParser.Char_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_char_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(ADQLParser.LOWER)
            self.state = 338
            self.match(ADQLParser.LPAREN)
            self.state = 339
            self.character_string_literal()
            self.state = 340
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CSL(self):
            return self.getToken(ADQLParser.CSL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_character_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_string_literal" ):
                listener.enterCharacter_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_string_literal" ):
                listener.exitCharacter_string_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_string_literal" ):
                return visitor.visitCharacter_string_literal(self)
            else:
                return visitor.visitChildren(self)




    def character_string_literal(self):

        localctx = ADQLParser.Character_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_character_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(ADQLParser.CSL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression_primary(self):
            return self.getTypedRuleContext(ADQLParser.Value_expression_primaryContext,0)


        def string_value_function(self):
            return self.getTypedRuleContext(ADQLParser.String_value_functionContext,0)


        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def concatenation_operator(self):
            return self.getTypedRuleContext(ADQLParser.Concatenation_operatorContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_character_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_value_expression" ):
                listener.enterCharacter_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_value_expression" ):
                listener.exitCharacter_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_value_expression" ):
                return visitor.visitCharacter_value_expression(self)
            else:
                return visitor.visitChildren(self)



    def character_value_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Character_value_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_character_value_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 345
                self.value_expression_primary()
                pass

            elif la_ == 2:
                self.state = 346
                self.string_value_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Character_value_expressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_character_value_expression)
                    self.state = 349
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 350
                    self.concatenation_operator()
                    self.state = 353
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        self.state = 351
                        self.value_expression_primary()
                        pass

                    elif la_ == 2:
                        self.state = 352
                        self.string_value_function()
                        pass

             
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CIRCLE(self):
            return self.getToken(ADQLParser.CIRCLE, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def coordinates(self):
            return self.getTypedRuleContext(ADQLParser.CoordinatesContext,0)


        def radius(self):
            return self.getTypedRuleContext(ADQLParser.RadiusContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = ADQLParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_circle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(ADQLParser.CIRCLE)
            self.state = 361
            self.match(ADQLParser.LPAREN)
            self.state = 362
            self.coord_sys()
            self.state = 363
            self.match(ADQLParser.COMMA)
            self.state = 364
            self.coordinates()
            self.state = 365
            self.match(ADQLParser.COMMA)
            self.state = 366
            self.radius()
            self.state = 367
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ADQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = ADQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = ADQLParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.column_name()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==284:
                self.state = 372
                self.match(ADQLParser.COMMA)
                self.state = 373
                self.column_name()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ADQLParser.Column_nameContext,0)


        def qualifier(self):
            return self.getTypedRuleContext(ADQLParser.QualifierContext,0)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_column_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_reference" ):
                listener.enterColumn_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_reference" ):
                listener.exitColumn_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_reference" ):
                return visitor.visitColumn_reference(self)
            else:
                return visitor.visitChildren(self)




    def column_reference(self):

        localctx = ADQLParser.Column_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_column_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 379
                self.qualifier()
                self.state = 380
                self.match(ADQLParser.DOT)


            self.state = 384
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ADQLParser.EQ, 0)

        def NOT_EQ(self):
            return self.getToken(ADQLParser.NOT_EQ, 0)

        def LTH(self):
            return self.getToken(ADQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(ADQLParser.GTH, 0)

        def GRET(self):
            return self.getToken(ADQLParser.GRET, 0)

        def LEET(self):
            return self.getToken(ADQLParser.LEET, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = ADQLParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_comp_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            _la = self._input.LA(1)
            if not((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & 1799) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Value_expressionContext,i)


        def comp_op(self):
            return self.getTypedRuleContext(ADQLParser.Comp_opContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_comparison_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_predicate" ):
                listener.enterComparison_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_predicate" ):
                listener.exitComparison_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_predicate" ):
                return visitor.visitComparison_predicate(self)
            else:
                return visitor.visitChildren(self)




    def comparison_predicate(self):

        localctx = ADQLParser.Comparison_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_comparison_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.value_expression()
            self.state = 389
            self.comp_op()
            self.state = 390
            self.value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concatenation_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCAT(self):
            return self.getToken(ADQLParser.CONCAT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_concatenation_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_operator" ):
                listener.enterConcatenation_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_operator" ):
                listener.exitConcatenation_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_operator" ):
                return visitor.visitConcatenation_operator(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_operator(self):

        localctx = ADQLParser.Concatenation_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_concatenation_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(ADQLParser.CONCAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(ADQLParser.CONTAINS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Geometry_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,i)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_contains

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContains" ):
                listener.enterContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContains" ):
                listener.exitContains(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContains" ):
                return visitor.visitContains(self)
            else:
                return visitor.visitChildren(self)




    def contains(self):

        localctx = ADQLParser.ContainsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_contains)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(ADQLParser.CONTAINS)
            self.state = 395
            self.match(ADQLParser.LPAREN)
            self.state = 396
            self.geometry_value_expression()
            self.state = 397
            self.match(ADQLParser.COMMA)
            self.state = 398
            self.geometry_value_expression()
            self.state = 399
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coord_sysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.String_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coord_sys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_sys" ):
                listener.enterCoord_sys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_sys" ):
                listener.exitCoord_sys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_sys" ):
                return visitor.visitCoord_sys(self)
            else:
                return visitor.visitChildren(self)




    def coord_sys(self):

        localctx = ADQLParser.Coord_sysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_coord_sys)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.string_value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coord_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(ADQLParser.PointContext,0)


        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def centroid(self):
            return self.getTypedRuleContext(ADQLParser.CentroidContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coord_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_value" ):
                listener.enterCoord_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_value" ):
                listener.exitCoord_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_value" ):
                return visitor.visitCoord_value(self)
            else:
                return visitor.visitChildren(self)




    def coord_value(self):

        localctx = ADQLParser.Coord_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_coord_value)
        try:
            self.state = 406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.point()
                pass
            elif token in [276, 300]:
                self.enterOuterAlt(localctx, 2)
                self.state = 404
                self.column_reference()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 405
                self.centroid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coord1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORD1(self):
            return self.getToken(ADQLParser.COORD1, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coord_value(self):
            return self.getTypedRuleContext(ADQLParser.Coord_valueContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_coord1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord1" ):
                listener.enterCoord1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord1" ):
                listener.exitCoord1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord1" ):
                return visitor.visitCoord1(self)
            else:
                return visitor.visitChildren(self)




    def coord1(self):

        localctx = ADQLParser.Coord1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_coord1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(ADQLParser.COORD1)
            self.state = 409
            self.match(ADQLParser.LPAREN)
            self.state = 410
            self.coord_value()
            self.state = 411
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coord2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORD2(self):
            return self.getToken(ADQLParser.COORD2, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coord_value(self):
            return self.getTypedRuleContext(ADQLParser.Coord_valueContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_coord2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord2" ):
                listener.enterCoord2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord2" ):
                listener.exitCoord2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord2" ):
                return visitor.visitCoord2(self)
            else:
                return visitor.visitChildren(self)




    def coord2(self):

        localctx = ADQLParser.Coord2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_coord2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(ADQLParser.COORD2)
            self.state = 414
            self.match(ADQLParser.LPAREN)
            self.state = 415
            self.coord_value()
            self.state = 416
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coordinate1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate1" ):
                listener.enterCoordinate1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate1" ):
                listener.exitCoordinate1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoordinate1" ):
                return visitor.visitCoordinate1(self)
            else:
                return visitor.visitChildren(self)




    def coordinate1(self):

        localctx = ADQLParser.Coordinate1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_coordinate1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.numeric_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coordinate2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate2" ):
                listener.enterCoordinate2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate2" ):
                listener.exitCoordinate2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoordinate2" ):
                return visitor.visitCoordinate2(self)
            else:
                return visitor.visitChildren(self)




    def coordinate2(self):

        localctx = ADQLParser.Coordinate2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_coordinate2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.numeric_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoordinatesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coordinate1(self):
            return self.getTypedRuleContext(ADQLParser.Coordinate1Context,0)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def coordinate2(self):
            return self.getTypedRuleContext(ADQLParser.Coordinate2Context,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coordinates

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinates" ):
                listener.enterCoordinates(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinates" ):
                listener.exitCoordinates(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoordinates" ):
                return visitor.visitCoordinates(self)
            else:
                return visitor.visitChildren(self)




    def coordinates(self):

        localctx = ADQLParser.CoordinatesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_coordinates)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.coordinate1()
            self.state = 423
            self.match(ADQLParser.COMMA)
            self.state = 424
            self.coordinate2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Correlation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ADQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_correlation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrelation_name" ):
                listener.enterCorrelation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrelation_name" ):
                listener.exitCorrelation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCorrelation_name" ):
                return visitor.visitCorrelation_name(self)
            else:
                return visitor.visitChildren(self)




    def correlation_name(self):

        localctx = ADQLParser.Correlation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_correlation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Correlation_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def correlation_name(self):
            return self.getTypedRuleContext(ADQLParser.Correlation_nameContext,0)


        def AS(self):
            return self.getToken(ADQLParser.AS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_correlation_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrelation_specification" ):
                listener.enterCorrelation_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrelation_specification" ):
                listener.exitCorrelation_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCorrelation_specification" ):
                return visitor.visitCorrelation_specification(self)
            else:
                return visitor.visitChildren(self)




    def correlation_specification(self):

        localctx = ADQLParser.Correlation_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_correlation_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 428
                self.match(ADQLParser.AS)


            self.state = 431
            self.correlation_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delimited_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DQ(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.DQ)
            else:
                return self.getToken(ADQLParser.DQ, i)

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_delimited_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelimited_identifier" ):
                listener.enterDelimited_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelimited_identifier" ):
                listener.exitDelimited_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelimited_identifier" ):
                return visitor.visitDelimited_identifier(self)
            else:
                return visitor.visitChildren(self)




    def delimited_identifier(self):

        localctx = ADQLParser.Delimited_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_delimited_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(ADQLParser.DQ)
            self.state = 434
            self.match(ADQLParser.ID)
            self.state = 435
            self.match(ADQLParser.DQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def as_clause(self):
            return self.getTypedRuleContext(ADQLParser.As_clauseContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_derived_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_column" ):
                listener.enterDerived_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_column" ):
                listener.exitDerived_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_column" ):
                return visitor.visitDerived_column(self)
            else:
                return visitor.visitChildren(self)




    def derived_column(self):

        localctx = ADQLParser.Derived_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_derived_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.value_expression()
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53 or _la==276 or _la==300:
                self.state = 438
                self.as_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_subquery(self):
            return self.getTypedRuleContext(ADQLParser.Table_subqueryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_table" ):
                return visitor.visitDerived_table(self)
            else:
                return visitor.visitChildren(self)




    def derived_table(self):

        localctx = ADQLParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_derived_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.table_subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTANCE(self):
            return self.getToken(ADQLParser.DISTANCE, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def coord_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Coord_valueContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Coord_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def getRuleIndex(self):
            return ADQLParser.RULE_distance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance" ):
                listener.enterDistance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance" ):
                listener.exitDistance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistance" ):
                return visitor.visitDistance(self)
            else:
                return visitor.visitChildren(self)




    def distance(self):

        localctx = ADQLParser.DistanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_distance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(ADQLParser.DISTANCE)
            self.state = 444
            self.match(ADQLParser.LPAREN)
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 445
                self.coord_value()
                self.state = 446
                self.match(ADQLParser.COMMA)
                self.state = 447
                self.coord_value()
                pass

            elif la_ == 2:
                self.state = 449
                self.numeric_value_expression(0)
                self.state = 450
                self.match(ADQLParser.COMMA)
                self.state = 451
                self.numeric_value_expression(0)
                self.state = 452
                self.match(ADQLParser.COMMA)
                self.state = 453
                self.numeric_value_expression(0)
                self.state = 454
                self.match(ADQLParser.COMMA)
                self.state = 455
                self.numeric_value_expression(0)
                pass


            self.state = 459
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exact_numeric_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_decimal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Unsigned_decimalContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,i)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_exact_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExact_numeric_literal" ):
                listener.enterExact_numeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExact_numeric_literal" ):
                listener.exitExact_numeric_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExact_numeric_literal" ):
                return visitor.visitExact_numeric_literal(self)
            else:
                return visitor.visitChildren(self)




    def exact_numeric_literal(self):

        localctx = ADQLParser.Exact_numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_exact_numeric_literal)
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271]:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.unsigned_decimal()
                self.state = 466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 462
                    self.match(ADQLParser.DOT)
                    self.state = 464
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                    if la_ == 1:
                        self.state = 463
                        self.unsigned_decimal()




                pass
            elif token in [286]:
                self.enterOuterAlt(localctx, 2)
                self.state = 468
                self.match(ADQLParser.DOT)
                self.state = 469
                self.unsigned_decimal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exists_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(ADQLParser.EXISTS, 0)

        def table_subquery(self):
            return self.getTypedRuleContext(ADQLParser.Table_subqueryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_exists_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists_predicate" ):
                listener.enterExists_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists_predicate" ):
                listener.exitExists_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists_predicate" ):
                return visitor.visitExists_predicate(self)
            else:
                return visitor.visitChildren(self)




    def exists_predicate(self):

        localctx = ADQLParser.Exists_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_exists_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(ADQLParser.EXISTS)
            self.state = 473
            self.table_subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extract_coordsysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDSYS(self):
            return self.getToken(ADQLParser.COORDSYS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_extract_coordsys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract_coordsys" ):
                listener.enterExtract_coordsys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract_coordsys" ):
                listener.exitExtract_coordsys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract_coordsys" ):
                return visitor.visitExtract_coordsys(self)
            else:
                return visitor.visitChildren(self)




    def extract_coordsys(self):

        localctx = ADQLParser.Extract_coordsysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_extract_coordsys)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(ADQLParser.COORDSYS)
            self.state = 476
            self.match(ADQLParser.LPAREN)
            self.state = 477
            self.geometry_value_expression()
            self.state = 478
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_primary(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_primaryContext,0)


        def sign(self):
            return self.getTypedRuleContext(ADQLParser.SignContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = ADQLParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_factor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 480
                self.sign()


            self.state = 483
            self.numeric_primary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(ADQLParser.FROM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_clause" ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = ADQLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(ADQLParser.FROM)
            self.state = 486
            self.table_reference(0)
            self.state = 491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.match(ADQLParser.COMMA)
                    self.state = 488
                    self.table_reference(0) 
                self.state = 493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_string_literal(self):
            return self.getTypedRuleContext(ADQLParser.Character_string_literalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_general_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_literal" ):
                listener.enterGeneral_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_literal" ):
                listener.exitGeneral_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_literal" ):
                return visitor.visitGeneral_literal(self)
            else:
                return visitor.visitChildren(self)




    def general_literal(self):

        localctx = ADQLParser.General_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_general_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.character_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_set_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_function_type(self):
            return self.getTypedRuleContext(ADQLParser.Set_function_typeContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def set_quantifier(self):
            return self.getTypedRuleContext(ADQLParser.Set_quantifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_general_set_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_set_function" ):
                listener.enterGeneral_set_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_set_function" ):
                listener.exitGeneral_set_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_set_function" ):
                return visitor.visitGeneral_set_function(self)
            else:
                return visitor.visitChildren(self)




    def general_set_function(self):

        localctx = ADQLParser.General_set_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_general_set_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.set_function_type()
            self.state = 497
            self.match(ADQLParser.LPAREN)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47 or _la==111:
                self.state = 498
                self.set_quantifier()


            self.state = 501
            self.value_expression()
            self.state = 502
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Geometry_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def box(self):
            return self.getTypedRuleContext(ADQLParser.BoxContext,0)


        def centroid(self):
            return self.getTypedRuleContext(ADQLParser.CentroidContext,0)


        def circle(self):
            return self.getTypedRuleContext(ADQLParser.CircleContext,0)


        def point(self):
            return self.getTypedRuleContext(ADQLParser.PointContext,0)


        def polygon(self):
            return self.getTypedRuleContext(ADQLParser.PolygonContext,0)


        def region(self):
            return self.getTypedRuleContext(ADQLParser.RegionContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_geometry_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeometry_value_expression" ):
                listener.enterGeometry_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeometry_value_expression" ):
                listener.exitGeometry_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeometry_value_expression" ):
                return visitor.visitGeometry_value_expression(self)
            else:
                return visitor.visitChildren(self)




    def geometry_value_expression(self):

        localctx = ADQLParser.Geometry_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_geometry_value_expression)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.box()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.centroid()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 506
                self.circle()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 507
                self.point()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 5)
                self.state = 508
                self.polygon()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 509
                self.region()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 7)
                self.state = 510
                self.user_defined_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ADQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(ADQLParser.BY, 0)

        def grouping_column_reference_list(self):
            return self.getTypedRuleContext(ADQLParser.Grouping_column_reference_listContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = ADQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(ADQLParser.GROUP)
            self.state = 514
            self.match(ADQLParser.BY)
            self.state = 515
            self.grouping_column_reference_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_column_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_grouping_column_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_column_reference" ):
                listener.enterGrouping_column_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_column_reference" ):
                listener.exitGrouping_column_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_column_reference" ):
                return visitor.visitGrouping_column_reference(self)
            else:
                return visitor.visitChildren(self)




    def grouping_column_reference(self):

        localctx = ADQLParser.Grouping_column_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_grouping_column_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.column_reference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_column_reference_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_column_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Grouping_column_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Grouping_column_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_grouping_column_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_column_reference_list" ):
                listener.enterGrouping_column_reference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_column_reference_list" ):
                listener.exitGrouping_column_reference_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_column_reference_list" ):
                return visitor.visitGrouping_column_reference_list(self)
            else:
                return visitor.visitChildren(self)




    def grouping_column_reference_list(self):

        localctx = ADQLParser.Grouping_column_reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_grouping_column_reference_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.grouping_column_reference()
            self.state = 524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 520
                    self.match(ADQLParser.COMMA)
                    self.state = 521
                    self.grouping_column_reference() 
                self.state = 526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(ADQLParser.HAVING, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = ADQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(ADQLParser.HAVING)
            self.state = 528
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_identifier(self):
            return self.getTypedRuleContext(ADQLParser.Regular_identifierContext,0)


        def delimited_identifier(self):
            return self.getTypedRuleContext(ADQLParser.Delimited_identifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = ADQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_identifier)
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [276]:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.regular_identifier()
                pass
            elif token in [300]:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.delimited_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def IN(self):
            return self.getToken(ADQLParser.IN, 0)

        def in_predicate_value(self):
            return self.getTypedRuleContext(ADQLParser.In_predicate_valueContext,0)


        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_in_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_predicate" ):
                listener.enterIn_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_predicate" ):
                listener.exitIn_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_predicate" ):
                return visitor.visitIn_predicate(self)
            else:
                return visitor.visitChildren(self)




    def in_predicate(self):

        localctx = ADQLParser.In_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_in_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.value_expression()
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 535
                self.match(ADQLParser.NOT)


            self.state = 538
            self.match(ADQLParser.IN)
            self.state = 539
            self.in_predicate_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_predicate_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_subquery(self):
            return self.getTypedRuleContext(ADQLParser.Table_subqueryContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def in_value_list(self):
            return self.getTypedRuleContext(ADQLParser.In_value_listContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_in_predicate_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_predicate_value" ):
                listener.enterIn_predicate_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_predicate_value" ):
                listener.exitIn_predicate_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_predicate_value" ):
                return visitor.visitIn_predicate_value(self)
            else:
                return visitor.visitChildren(self)




    def in_predicate_value(self):

        localctx = ADQLParser.In_predicate_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_in_predicate_value)
        try:
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.table_subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.match(ADQLParser.LPAREN)
                self.state = 543
                self.in_value_list()
                self.state = 544
                self.match(ADQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Value_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_in_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_value_list" ):
                listener.enterIn_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_value_list" ):
                listener.exitIn_value_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_value_list" ):
                return visitor.visitIn_value_list(self)
            else:
                return visitor.visitChildren(self)




    def in_value_list(self):

        localctx = ADQLParser.In_value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_in_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.value_expression()
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==284:
                self.state = 549
                self.match(ADQLParser.COMMA)
                self.state = 550
                self.value_expression()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntersectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERSECTS(self):
            return self.getToken(ADQLParser.INTERSECTS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Geometry_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,i)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_intersects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersects" ):
                listener.enterIntersects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersects" ):
                listener.exitIntersects(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntersects" ):
                return visitor.visitIntersects(self)
            else:
                return visitor.visitChildren(self)




    def intersects(self):

        localctx = ADQLParser.IntersectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_intersects)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(ADQLParser.INTERSECTS)
            self.state = 557
            self.match(ADQLParser.LPAREN)
            self.state = 558
            self.geometry_value_expression()
            self.state = 559
            self.match(ADQLParser.COMMA)
            self.state = 560
            self.geometry_value_expression()
            self.state = 561
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name_list(self):
            return self.getTypedRuleContext(ADQLParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_join_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_column_list" ):
                listener.enterJoin_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_column_list" ):
                listener.exitJoin_column_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_column_list" ):
                return visitor.visitJoin_column_list(self)
            else:
                return visitor.visitChildren(self)




    def join_column_list(self):

        localctx = ADQLParser.Join_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_join_column_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.column_name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(ADQLParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_condition" ):
                return visitor.visitJoin_condition(self)
            else:
                return visitor.visitChildren(self)




    def join_condition(self):

        localctx = ADQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_join_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(ADQLParser.ON)
            self.state = 566
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_condition(self):
            return self.getTypedRuleContext(ADQLParser.Join_conditionContext,0)


        def named_columns_join(self):
            return self.getTypedRuleContext(ADQLParser.Named_columns_joinContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_join_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_specification" ):
                listener.enterJoin_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_specification" ):
                listener.exitJoin_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_specification" ):
                return visitor.visitJoin_specification(self)
            else:
                return visitor.visitChildren(self)




    def join_specification(self):

        localctx = ADQLParser.Join_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_join_specification)
        try:
            self.state = 570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [189]:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.join_condition()
                pass
            elif token in [257]:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.named_columns_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(ADQLParser.INNER, 0)

        def outer_join_type(self):
            return self.getTypedRuleContext(ADQLParser.Outer_join_typeContext,0)


        def OUTER(self):
            return self.getToken(ADQLParser.OUTER, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = ADQLParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.match(ADQLParser.INNER)
                pass
            elif token in [135, 165, 214]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.outer_join_type()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 574
                    self.match(ADQLParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Joined_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Table_referenceContext,i)


        def JOIN(self):
            return self.getToken(ADQLParser.JOIN, 0)

        def NATURAL(self):
            return self.getToken(ADQLParser.NATURAL, 0)

        def join_type(self):
            return self.getTypedRuleContext(ADQLParser.Join_typeContext,0)


        def join_specification(self):
            return self.getTypedRuleContext(ADQLParser.Join_specificationContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_joined_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoined_table" ):
                listener.enterJoined_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoined_table" ):
                listener.exitJoined_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoined_table" ):
                return visitor.visitJoined_table(self)
            else:
                return visitor.visitChildren(self)




    def joined_table(self):

        localctx = ADQLParser.Joined_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_joined_table)
        self._la = 0 # Token type
        try:
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.table_reference(0)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 580
                    self.match(ADQLParser.NATURAL)


                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1073758209) != 0 or _la==214:
                    self.state = 583
                    self.join_type()


                self.state = 586
                self.match(ADQLParser.JOIN)
                self.state = 587
                self.table_reference(0)
                self.state = 589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 588
                    self.join_specification()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 591
                self.match(ADQLParser.LPAREN)
                self.state = 592
                self.joined_table()
                self.state = 593
                self.match(ADQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def match_value(self):
            return self.getTypedRuleContext(ADQLParser.Match_valueContext,0)


        def LIKE(self):
            return self.getToken(ADQLParser.LIKE, 0)

        def pattern(self):
            return self.getTypedRuleContext(ADQLParser.PatternContext,0)


        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def ILIKE(self):
            return self.getToken(ADQLParser.ILIKE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_like_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_predicate" ):
                listener.enterLike_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_predicate" ):
                listener.exitLike_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_predicate" ):
                return visitor.visitLike_predicate(self)
            else:
                return visitor.visitChildren(self)




    def like_predicate(self):

        localctx = ADQLParser.Like_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_like_predicate)
        self._la = 0 # Token type
        try:
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.match_value()
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 598
                    self.match(ADQLParser.NOT)


                self.state = 601
                self.match(ADQLParser.LIKE)
                self.state = 602
                self.pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.match_value()
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 605
                    self.match(ADQLParser.NOT)


                self.state = 608
                self.match(ADQLParser.ILIKE)
                self.state = 609
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_match_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_value" ):
                listener.enterMatch_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_value" ):
                listener.exitMatch_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_value" ):
                return visitor.visitMatch_value(self)
            else:
                return visitor.visitChildren(self)




    def match_value(self):

        localctx = ADQLParser.Match_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_match_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.character_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Math_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(ADQLParser.ABS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def CEILING(self):
            return self.getToken(ADQLParser.CEILING, 0)

        def DEGREES(self):
            return self.getToken(ADQLParser.DEGREES, 0)

        def EXP(self):
            return self.getToken(ADQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(ADQLParser.FLOOR, 0)

        def LOG(self):
            return self.getToken(ADQLParser.LOG, 0)

        def LOG10(self):
            return self.getToken(ADQLParser.LOG10, 0)

        def MOD(self):
            return self.getToken(ADQLParser.MOD, 0)

        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def PI(self):
            return self.getToken(ADQLParser.PI, 0)

        def POWER(self):
            return self.getToken(ADQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(ADQLParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(ADQLParser.RAND, 0)

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def ROUND(self):
            return self.getToken(ADQLParser.ROUND, 0)

        def signed_integer(self):
            return self.getTypedRuleContext(ADQLParser.Signed_integerContext,0)


        def SQRT(self):
            return self.getToken(ADQLParser.SQRT, 0)

        def TRUNCATE(self):
            return self.getToken(ADQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_math_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath_function" ):
                listener.enterMath_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath_function" ):
                listener.exitMath_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath_function" ):
                return visitor.visitMath_function(self)
            else:
                return visitor.visitChildren(self)




    def math_function(self):

        localctx = ADQLParser.Math_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_math_function)
        self._la = 0 # Token type
        try:
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 615
                self.match(ADQLParser.ABS)
                self.state = 616
                self.match(ADQLParser.LPAREN)
                self.state = 617
                self.numeric_value_expression(0)
                self.state = 618
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.match(ADQLParser.CEILING)
                self.state = 621
                self.match(ADQLParser.LPAREN)
                self.state = 622
                self.numeric_value_expression(0)
                self.state = 623
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 625
                self.match(ADQLParser.DEGREES)
                self.state = 626
                self.match(ADQLParser.LPAREN)
                self.state = 627
                self.numeric_value_expression(0)
                self.state = 628
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 4)
                self.state = 630
                self.match(ADQLParser.EXP)
                self.state = 631
                self.match(ADQLParser.LPAREN)
                self.state = 632
                self.numeric_value_expression(0)
                self.state = 633
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 635
                self.match(ADQLParser.FLOOR)
                self.state = 636
                self.match(ADQLParser.LPAREN)
                self.state = 637
                self.numeric_value_expression(0)
                self.state = 638
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 6)
                self.state = 640
                self.match(ADQLParser.LOG)
                self.state = 641
                self.match(ADQLParser.LPAREN)
                self.state = 642
                self.numeric_value_expression(0)
                self.state = 643
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 7)
                self.state = 645
                self.match(ADQLParser.LOG10)
                self.state = 646
                self.match(ADQLParser.LPAREN)
                self.state = 647
                self.numeric_value_expression(0)
                self.state = 648
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 8)
                self.state = 650
                self.match(ADQLParser.MOD)
                self.state = 651
                self.match(ADQLParser.LPAREN)
                self.state = 652
                self.numeric_value_expression(0)
                self.state = 653
                self.match(ADQLParser.COMMA)
                self.state = 654
                self.numeric_value_expression(0)
                self.state = 655
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 9)
                self.state = 657
                self.match(ADQLParser.PI)
                self.state = 658
                self.match(ADQLParser.LPAREN)
                self.state = 659
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 10)
                self.state = 660
                self.match(ADQLParser.POWER)
                self.state = 661
                self.match(ADQLParser.LPAREN)
                self.state = 662
                self.numeric_value_expression(0)
                self.state = 663
                self.match(ADQLParser.COMMA)
                self.state = 664
                self.numeric_value_expression(0)
                self.state = 665
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 11)
                self.state = 667
                self.match(ADQLParser.RADIANS)
                self.state = 668
                self.match(ADQLParser.LPAREN)
                self.state = 669
                self.numeric_value_expression(0)
                self.state = 670
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 12)
                self.state = 672
                self.match(ADQLParser.RAND)
                self.state = 673
                self.match(ADQLParser.LPAREN)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271:
                    self.state = 674
                    self.unsigned_decimal()


                self.state = 677
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 13)
                self.state = 678
                self.match(ADQLParser.ROUND)
                self.state = 679
                self.match(ADQLParser.LPAREN)
                self.state = 680
                self.numeric_value_expression(0)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 681
                    self.match(ADQLParser.COMMA)
                    self.state = 682
                    self.signed_integer()


                self.state = 685
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 14)
                self.state = 687
                self.match(ADQLParser.SQRT)
                self.state = 688
                self.match(ADQLParser.LPAREN)
                self.state = 689
                self.numeric_value_expression(0)
                self.state = 690
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 15)
                self.state = 692
                self.match(ADQLParser.TRUNCATE)
                self.state = 693
                self.match(ADQLParser.LPAREN)
                self.state = 694
                self.numeric_value_expression(0)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 695
                    self.match(ADQLParser.COMMA)
                    self.state = 696
                    self.signed_integer()


                self.state = 699
                self.match(ADQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_columns_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(ADQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def join_column_list(self):
            return self.getTypedRuleContext(ADQLParser.Join_column_listContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_named_columns_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_columns_join" ):
                listener.enterNamed_columns_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_columns_join" ):
                listener.exitNamed_columns_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_columns_join" ):
                return visitor.visitNamed_columns_join(self)
            else:
                return visitor.visitChildren(self)




    def named_columns_join(self):

        localctx = ADQLParser.Named_columns_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_named_columns_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(ADQLParser.USING)
            self.state = 704
            self.match(ADQLParser.LPAREN)
            self.state = 705
            self.join_column_list()
            self.state = 706
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_join_query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_term(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_termContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def UNION(self):
            return self.getToken(ADQLParser.UNION, 0)

        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(ADQLParser.EXCEPT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_non_join_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_join_query_expression" ):
                listener.enterNon_join_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_join_query_expression" ):
                listener.exitNon_join_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_join_query_expression" ):
                return visitor.visitNon_join_query_expression(self)
            else:
                return visitor.visitChildren(self)




    def non_join_query_expression(self):

        localctx = ADQLParser.Non_join_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_non_join_query_expression)
        self._la = 0 # Token type
        try:
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 708
                self.non_join_query_term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 709
                self.query_expression(0)
                self.state = 710
                self.match(ADQLParser.UNION)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 711
                    self.match(ADQLParser.ALL)


                self.state = 714
                self.query_term(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 716
                self.query_expression(0)
                self.state = 717
                self.match(ADQLParser.EXCEPT)
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 718
                    self.match(ADQLParser.ALL)


                self.state = 721
                self.query_term(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_join_query_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_specification(self):
            return self.getTypedRuleContext(ADQLParser.Query_specificationContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def non_join_query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_non_join_query_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_join_query_primary" ):
                listener.enterNon_join_query_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_join_query_primary" ):
                listener.exitNon_join_query_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_join_query_primary" ):
                return visitor.visitNon_join_query_primary(self)
            else:
                return visitor.visitChildren(self)




    def non_join_query_primary(self):

        localctx = ADQLParser.Non_join_query_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_non_join_query_primary)
        try:
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [221, 266]:
                self.enterOuterAlt(localctx, 1)
                self.state = 725
                self.query_specification()
                pass
            elif token in [280]:
                self.enterOuterAlt(localctx, 2)
                self.state = 726
                self.match(ADQLParser.LPAREN)
                self.state = 727
                self.non_join_query_expression()
                self.state = 728
                self.match(ADQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_join_query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_primary(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_primaryContext,0)


        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def INTERSECT(self):
            return self.getToken(ADQLParser.INTERSECT, 0)

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_non_join_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_join_query_term" ):
                listener.enterNon_join_query_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_join_query_term" ):
                listener.exitNon_join_query_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_join_query_term" ):
                return visitor.visitNon_join_query_term(self)
            else:
                return visitor.visitChildren(self)




    def non_join_query_term(self):

        localctx = ADQLParser.Non_join_query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_non_join_query_term)
        self._la = 0 # Token type
        try:
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.non_join_query_primary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.query_term(0)
                self.state = 734
                self.match(ADQLParser.INTERSECT)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 735
                    self.match(ADQLParser.ALL)


                self.state = 738
                self.query_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_predicate_geometry_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def area(self):
            return self.getTypedRuleContext(ADQLParser.AreaContext,0)


        def coord1(self):
            return self.getTypedRuleContext(ADQLParser.Coord1Context,0)


        def coord2(self):
            return self.getTypedRuleContext(ADQLParser.Coord2Context,0)


        def distance(self):
            return self.getTypedRuleContext(ADQLParser.DistanceContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_non_predicate_geometry_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_predicate_geometry_function" ):
                listener.enterNon_predicate_geometry_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_predicate_geometry_function" ):
                listener.exitNon_predicate_geometry_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_predicate_geometry_function" ):
                return visitor.visitNon_predicate_geometry_function(self)
            else:
                return visitor.visitChildren(self)




    def non_predicate_geometry_function(self):

        localctx = ADQLParser.Non_predicate_geometry_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_non_predicate_geometry_function)
        try:
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.area()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.coord1()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.coord2()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                self.distance()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def IS(self):
            return self.getToken(ADQLParser.IS, 0)

        def NULL(self):
            return self.getToken(ADQLParser.NULL, 0)

        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_null_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_predicate" ):
                listener.enterNull_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_predicate" ):
                listener.exitNull_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_predicate" ):
                return visitor.visitNull_predicate(self)
            else:
                return visitor.visitChildren(self)




    def null_predicate(self):

        localctx = ADQLParser.Null_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_null_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.column_reference()
            self.state = 749
            self.match(ADQLParser.IS)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 750
                self.match(ADQLParser.NOT)


            self.state = 753
            self.match(ADQLParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_geometry_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_geometry_function(self):
            return self.getTypedRuleContext(ADQLParser.Predicate_geometry_functionContext,0)


        def non_predicate_geometry_function(self):
            return self.getTypedRuleContext(ADQLParser.Non_predicate_geometry_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_geometry_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_geometry_function" ):
                listener.enterNumeric_geometry_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_geometry_function" ):
                listener.exitNumeric_geometry_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_geometry_function" ):
                return visitor.visitNumeric_geometry_function(self)
            else:
                return visitor.visitChildren(self)




    def numeric_geometry_function(self):

        localctx = ADQLParser.Numeric_geometry_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_numeric_geometry_function)
        try:
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.predicate_geometry_function()
                pass
            elif token in [3, 16, 17, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.non_predicate_geometry_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression_primary(self):
            return self.getTypedRuleContext(ADQLParser.Value_expression_primaryContext,0)


        def sign(self):
            return self.getTypedRuleContext(ADQLParser.SignContext,0)


        def numeric_value_function(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_primary" ):
                listener.enterNumeric_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_primary" ):
                listener.exitNumeric_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_primary" ):
                return visitor.visitNumeric_primary(self)
            else:
                return visitor.visitChildren(self)




    def numeric_primary(self):

        localctx = ADQLParser.Numeric_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_numeric_primary)
        self._la = 0 # Token type
        try:
            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==283 or _la==285:
                    self.state = 759
                    self.sign()


                self.state = 762
                self.value_expression_primary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.numeric_value_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(ADQLParser.TermContext,0)


        def bitwise_not(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_notContext,0)


        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def bitwise_and(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_andContext,0)


        def bitwise_or(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_orContext,0)


        def bitwise_xor(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_xorContext,0)


        def PLUS(self):
            return self.getToken(ADQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(ADQLParser.MINUS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_value_expression" ):
                listener.enterNumeric_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_value_expression" ):
                listener.exitNumeric_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_value_expression" ):
                return visitor.visitNumeric_value_expression(self)
            else:
                return visitor.visitChildren(self)



    def numeric_value_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Numeric_value_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 146
        self.enterRecursionRule(localctx, 146, self.RULE_numeric_value_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 12, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 43, 58, 88, 171, 172, 234, 271, 273, 274, 275, 276, 280, 283, 285, 286, 300]:
                self.state = 767
                self.term(0)
                pass
            elif token in [278]:
                self.state = 768
                self.bitwise_not()
                self.state = 769
                self.numeric_value_expression(6)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 791
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                    if la_ == 1:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 773
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 774
                        self.bitwise_and()
                        self.state = 775
                        self.numeric_value_expression(6)
                        pass

                    elif la_ == 2:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 777
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 778
                        self.bitwise_or()
                        self.state = 779
                        self.numeric_value_expression(5)
                        pass

                    elif la_ == 3:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 781
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 782
                        self.bitwise_xor()
                        self.state = 783
                        self.numeric_value_expression(4)
                        pass

                    elif la_ == 4:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 785
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 786
                        self.match(ADQLParser.PLUS)
                        self.state = 787
                        self.term(0)
                        pass

                    elif la_ == 5:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 788
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 789
                        self.match(ADQLParser.MINUS)
                        self.state = 790
                        self.term(0)
                        pass

             
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Numeric_value_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trig_function(self):
            return self.getTypedRuleContext(ADQLParser.Trig_functionContext,0)


        def math_function(self):
            return self.getTypedRuleContext(ADQLParser.Math_functionContext,0)


        def numeric_geometry_function(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_geometry_functionContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_value_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_value_function" ):
                listener.enterNumeric_value_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_value_function" ):
                listener.exitNumeric_value_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_value_function" ):
                return visitor.visitNumeric_value_function(self)
            else:
                return visitor.visitChildren(self)




    def numeric_value_function(self):

        localctx = ADQLParser.Numeric_value_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_numeric_value_function)
        try:
            self.state = 800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 5, 6, 19, 20, 39, 41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.trig_function()
                pass
            elif token in [1, 12, 21, 23, 24, 28, 29, 30, 31, 34, 35, 36, 38, 40, 43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.math_function()
                pass
            elif token in [3, 15, 16, 17, 22, 26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 798
                self.numeric_geometry_function()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 4)
                self.state = 799
                self.user_defined_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(ADQLParser.OFFSET, 0)

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffset_clause" ):
                return visitor.visitOffset_clause(self)
            else:
                return visitor.visitChildren(self)




    def offset_clause(self):

        localctx = ADQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(ADQLParser.OFFSET)
            self.state = 803
            self.unsigned_decimal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ADQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(ADQLParser.BY, 0)

        def sort_specification_list(self):
            return self.getTypedRuleContext(ADQLParser.Sort_specification_listContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = ADQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(ADQLParser.ORDER)
            self.state = 806
            self.match(ADQLParser.BY)
            self.state = 807
            self.sort_specification_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(ADQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(ADQLParser.DESC, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_ordering_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_specification" ):
                listener.enterOrdering_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_specification" ):
                listener.exitOrdering_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_specification" ):
                return visitor.visitOrdering_specification(self)
            else:
                return visitor.visitChildren(self)




    def ordering_specification(self):

        localctx = ADQLParser.Ordering_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_ordering_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            _la = self._input.LA(1)
            if not(_la==54 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Outer_join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(ADQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(ADQLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(ADQLParser.FULL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_outer_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_type" ):
                listener.enterOuter_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_type" ):
                listener.exitOuter_join_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_type" ):
                return visitor.visitOuter_join_type(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_type(self):

        localctx = ADQLParser.Outer_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_outer_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            _la = self._input.LA(1)
            if not(_la==135 or _la==165 or _la==214):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = ADQLParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.character_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POINT(self):
            return self.getToken(ADQLParser.POINT, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def coordinates(self):
            return self.getTypedRuleContext(ADQLParser.CoordinatesContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = ADQLParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_point)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(ADQLParser.POINT)
            self.state = 816
            self.match(ADQLParser.LPAREN)
            self.state = 817
            self.coord_sys()
            self.state = 818
            self.match(ADQLParser.COMMA)
            self.state = 819
            self.coordinates()
            self.state = 820
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POLYGON(self):
            return self.getToken(ADQLParser.POLYGON, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def coordinates(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.CoordinatesContext)
            else:
                return self.getTypedRuleContext(ADQLParser.CoordinatesContext,i)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = ADQLParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(ADQLParser.POLYGON)
            self.state = 823
            self.match(ADQLParser.LPAREN)
            self.state = 824
            self.coord_sys()
            self.state = 825
            self.match(ADQLParser.COMMA)
            self.state = 826
            self.coordinates()
            self.state = 827
            self.match(ADQLParser.COMMA)
            self.state = 828
            self.coordinates()
            self.state = 831 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 829
                self.match(ADQLParser.COMMA)
                self.state = 830
                self.coordinates()
                self.state = 833 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==284):
                    break

            self.state = 835
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Comparison_predicateContext,0)


        def between_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Between_predicateContext,0)


        def in_predicate(self):
            return self.getTypedRuleContext(ADQLParser.In_predicateContext,0)


        def like_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Like_predicateContext,0)


        def null_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Null_predicateContext,0)


        def exists_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Exists_predicateContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = ADQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_predicate)
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.comparison_predicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.between_predicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 839
                self.in_predicate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 840
                self.like_predicate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 841
                self.null_predicate()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 842
                self.exists_predicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predicate_geometry_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contains(self):
            return self.getTypedRuleContext(ADQLParser.ContainsContext,0)


        def intersects(self):
            return self.getTypedRuleContext(ADQLParser.IntersectsContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_predicate_geometry_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_geometry_function" ):
                listener.enterPredicate_geometry_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_geometry_function" ):
                listener.exitPredicate_geometry_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_geometry_function" ):
                return visitor.visitPredicate_geometry_function(self)
            else:
                return visitor.visitChildren(self)




    def predicate_geometry_function(self):

        localctx = ADQLParser.Predicate_geometry_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_predicate_geometry_function)
        try:
            self.state = 847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.contains()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.intersects()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ADQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(ADQLParser.Table_nameContext,0)


        def correlation_name(self):
            return self.getTypedRuleContext(ADQLParser.Correlation_nameContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = ADQLParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_qualifier)
        try:
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.table_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 851
                self.correlation_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_term(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_termContext,0)


        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def UNION(self):
            return self.getToken(ADQLParser.UNION, 0)

        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(ADQLParser.EXCEPT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_expression" ):
                return visitor.visitQuery_expression(self)
            else:
                return visitor.visitChildren(self)



    def query_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Query_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_query_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 855
                self.non_join_query_term()
                pass

            elif la_ == 2:
                self.state = 856
                self.joined_table()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 871
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = ADQLParser.Query_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                        self.state = 859
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 860
                        self.match(ADQLParser.UNION)
                        self.state = 862
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==47:
                            self.state = 861
                            self.match(ADQLParser.ALL)


                        self.state = 864
                        self.query_term(0)
                        pass

                    elif la_ == 2:
                        localctx = ADQLParser.Query_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 866
                        self.match(ADQLParser.EXCEPT)
                        self.state = 868
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==47:
                            self.state = 867
                            self.match(ADQLParser.ALL)


                        self.state = 870
                        self.query_term(0)
                        pass

             
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_name" ):
                return visitor.visitQuery_name(self)
            else:
                return visitor.visitChildren(self)




    def query_name(self):

        localctx = ADQLParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def SEMI(self):
            return self.getToken(ADQLParser.SEMI, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = ADQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.query_expression(0)
            self.state = 879
            self.match(ADQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_query(self):
            return self.getTypedRuleContext(ADQLParser.Select_queryContext,0)


        def WITH(self):
            return self.getToken(ADQLParser.WITH, 0)

        def with_query(self):
            return self.getTypedRuleContext(ADQLParser.With_queryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification" ):
                return visitor.visitQuery_specification(self)
            else:
                return visitor.visitChildren(self)




    def query_specification(self):

        localctx = ADQLParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==266:
                self.state = 881
                self.match(ADQLParser.WITH)
                self.state = 882
                self.with_query()


            self.state = 885
            self.select_query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_primary(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_primaryContext,0)


        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def INTERSECT(self):
            return self.getToken(ADQLParser.INTERSECT, 0)

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_term" ):
                return visitor.visitQuery_term(self)
            else:
                return visitor.visitChildren(self)



    def query_term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Query_termContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_query_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 888
                self.non_join_query_primary()
                pass

            elif la_ == 2:
                self.state = 889
                self.joined_table()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 900
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Query_termContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_term)
                    self.state = 892
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 893
                    self.match(ADQLParser.INTERSECT)
                    self.state = 895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==47:
                        self.state = 894
                        self.match(ADQLParser.ALL)


                    self.state = 897
                    self.query_expression(0) 
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RadiusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_radius

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius" ):
                listener.enterRadius(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius" ):
                listener.exitRadius(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRadius" ):
                return visitor.visitRadius(self)
            else:
                return visitor.visitChildren(self)




    def radius(self):

        localctx = ADQLParser.RadiusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_radius)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.numeric_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGION(self):
            return self.getToken(ADQLParser.REGION, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def string_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.String_value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_region

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegion" ):
                listener.enterRegion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegion" ):
                listener.exitRegion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegion" ):
                return visitor.visitRegion(self)
            else:
                return visitor.visitChildren(self)




    def region(self):

        localctx = ADQLParser.RegionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_region)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(ADQLParser.REGION)
            self.state = 906
            self.match(ADQLParser.LPAREN)
            self.state = 907
            self.string_value_expression()
            self.state = 908
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_regular_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_identifier" ):
                listener.enterRegular_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_identifier" ):
                listener.exitRegular_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegular_identifier" ):
                return visitor.visitRegular_identifier(self)
            else:
                return visitor.visitChildren(self)




    def regular_identifier(self):

        localctx = ADQLParser.Regular_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_regular_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = ADQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_term(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_termContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def OR(self):
            return self.getToken(ADQLParser.OR, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition" ):
                return visitor.visitSearch_condition(self)
            else:
                return visitor.visitChildren(self)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.boolean_term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Search_conditionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                    self.state = 917
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 918
                    self.match(ADQLParser.OR)
                    self.state = 919
                    self.boolean_term(0) 
                self.state = 924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_sublist(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Select_sublistContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Select_sublistContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list" ):
                return visitor.visitSelect_list(self)
            else:
                return visitor.visitChildren(self)




    def select_list(self):

        localctx = ADQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 945
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 58, 88, 127, 169, 171, 172, 234, 249, 271, 273, 274, 275, 276, 278, 280, 283, 285, 286, 300]:
                self.enterOuterAlt(localctx, 1)
                self.state = 925
                self.select_sublist()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==284:
                    self.state = 926
                    self.match(ADQLParser.COMMA)
                    self.state = 927
                    self.select_sublist()
                    self.state = 932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.match(ADQLParser.ASTERISK)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 934
                    self.match(ADQLParser.COMMA)
                    self.state = 935
                    self.select_sublist()
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==284:
                        self.state = 936
                        self.match(ADQLParser.COMMA)
                        self.state = 937
                        self.select_sublist()
                        self.state = 942
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ADQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(ADQLParser.Select_listContext,0)


        def table_expression(self):
            return self.getTypedRuleContext(ADQLParser.Table_expressionContext,0)


        def set_quantifier(self):
            return self.getTypedRuleContext(ADQLParser.Set_quantifierContext,0)


        def set_limit(self):
            return self.getTypedRuleContext(ADQLParser.Set_limitContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_select_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_query" ):
                listener.enterSelect_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_query" ):
                listener.exitSelect_query(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_query" ):
                return visitor.visitSelect_query(self)
            else:
                return visitor.visitChildren(self)




    def select_query(self):

        localctx = ADQLParser.Select_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_select_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(ADQLParser.SELECT)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47 or _la==111:
                self.state = 948
                self.set_quantifier()


            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 951
                self.set_limit()


            self.state = 954
            self.select_list()
            self.state = 955
            self.table_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_sublistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def derived_column(self):
            return self.getTypedRuleContext(ADQLParser.Derived_columnContext,0)


        def qualifier(self):
            return self.getTypedRuleContext(ADQLParser.QualifierContext,0)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_select_sublist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_sublist" ):
                listener.enterSelect_sublist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_sublist" ):
                listener.exitSelect_sublist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_sublist" ):
                return visitor.visitSelect_sublist(self)
            else:
                return visitor.visitChildren(self)




    def select_sublist(self):

        localctx = ADQLParser.Select_sublistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_select_sublist)
        try:
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.derived_column()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.qualifier()
                self.state = 959
                self.match(ADQLParser.DOT)
                self.state = 960
                self.match(ADQLParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_function_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(ADQLParser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def general_set_function(self):
            return self.getTypedRuleContext(ADQLParser.General_set_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_set_function_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_function_specification" ):
                listener.enterSet_function_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_function_specification" ):
                listener.exitSet_function_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_function_specification" ):
                return visitor.visitSet_function_specification(self)
            else:
                return visitor.visitChildren(self)




    def set_function_specification(self):

        localctx = ADQLParser.Set_function_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_set_function_specification)
        try:
            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.match(ADQLParser.COUNT)
                self.state = 965
                self.match(ADQLParser.LPAREN)
                self.state = 966
                self.match(ADQLParser.ASTERISK)
                self.state = 967
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 968
                self.general_set_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_function_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(ADQLParser.AVG, 0)

        def MAX(self):
            return self.getToken(ADQLParser.MAX, 0)

        def MIN(self):
            return self.getToken(ADQLParser.MIN, 0)

        def SUM(self):
            return self.getToken(ADQLParser.SUM, 0)

        def COUNT(self):
            return self.getToken(ADQLParser.COUNT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_set_function_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_function_type" ):
                listener.enterSet_function_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_function_type" ):
                listener.exitSet_function_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_function_type" ):
                return visitor.visitSet_function_type(self)
            else:
                return visitor.visitChildren(self)




    def set_function_type(self):

        localctx = ADQLParser.Set_function_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_set_function_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            _la = self._input.LA(1)
            if not(_la==58 or _la==88 or (((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & -9223372036854775805) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_limitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(ADQLParser.TOP, 0)

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_set_limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_limit" ):
                listener.enterSet_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_limit" ):
                listener.exitSet_limit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_limit" ):
                return visitor.visitSet_limit(self)
            else:
                return visitor.visitChildren(self)




    def set_limit(self):

        localctx = ADQLParser.Set_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_set_limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(ADQLParser.TOP)
            self.state = 974
            self.unsigned_decimal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(ADQLParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_set_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_quantifier" ):
                listener.enterSet_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_quantifier" ):
                listener.exitSet_quantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_quantifier" ):
                return visitor.visitSet_quantifier(self)
            else:
                return visitor.visitChildren(self)




    def set_quantifier(self):

        localctx = ADQLParser.Set_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_set_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            _la = self._input.LA(1)
            if not(_la==47 or _la==111):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ADQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(ADQLParser.MINUS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSign" ):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)




    def sign(self):

        localctx = ADQLParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            _la = self._input.LA(1)
            if not(_la==283 or _la==285):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_integerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def sign(self):
            return self.getTypedRuleContext(ADQLParser.SignContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_signed_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_integer" ):
                listener.enterSigned_integer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_integer" ):
                listener.exitSigned_integer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_integer" ):
                return visitor.visitSigned_integer(self)
            else:
                return visitor.visitChildren(self)




    def signed_integer(self):

        localctx = ADQLParser.Signed_integerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_signed_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==283 or _la==285:
                self.state = 980
                self.sign()


            self.state = 983
            self.unsigned_decimal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_sort_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_key" ):
                listener.enterSort_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_key" ):
                listener.exitSort_key(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_key" ):
                return visitor.visitSort_key(self)
            else:
                return visitor.visitChildren(self)




    def sort_key(self):

        localctx = ADQLParser.Sort_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sort_key)
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.value_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.column_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.unsigned_decimal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sort_key(self):
            return self.getTypedRuleContext(ADQLParser.Sort_keyContext,0)


        def ordering_specification(self):
            return self.getTypedRuleContext(ADQLParser.Ordering_specificationContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_sort_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_specification" ):
                listener.enterSort_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_specification" ):
                listener.exitSort_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_specification" ):
                return visitor.visitSort_specification(self)
            else:
                return visitor.visitChildren(self)




    def sort_specification(self):

        localctx = ADQLParser.Sort_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_sort_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.sort_key()
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 991
                self.ordering_specification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_specification_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sort_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Sort_specificationContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Sort_specificationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_sort_specification_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_specification_list" ):
                listener.enterSort_specification_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_specification_list" ):
                listener.exitSort_specification_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_specification_list" ):
                return visitor.visitSort_specification_list(self)
            else:
                return visitor.visitChildren(self)




    def sort_specification_list(self):

        localctx = ADQLParser.Sort_specification_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_sort_specification_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.sort_specification()
            self.state = 999
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 995
                    self.match(ADQLParser.COMMA)
                    self.state = 996
                    self.sort_specification() 
                self.state = 1001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_geometry_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extract_coordsys(self):
            return self.getTypedRuleContext(ADQLParser.Extract_coordsysContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_string_geometry_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_geometry_function" ):
                listener.enterString_geometry_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_geometry_function" ):
                listener.exitString_geometry_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_geometry_function" ):
                return visitor.visitString_geometry_function(self)
            else:
                return visitor.visitChildren(self)




    def string_geometry_function(self):

        localctx = ADQLParser.String_geometry_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_string_geometry_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.extract_coordsys()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_string_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_value_expression" ):
                listener.enterString_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_value_expression" ):
                listener.exitString_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_value_expression" ):
                return visitor.visitString_value_expression(self)
            else:
                return visitor.visitChildren(self)




    def string_value_expression(self):

        localctx = ADQLParser.String_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_string_value_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.character_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_value_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_geometry_function(self):
            return self.getTypedRuleContext(ADQLParser.String_geometry_functionContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def char_function(self):
            return self.getTypedRuleContext(ADQLParser.Char_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_string_value_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_value_function" ):
                listener.enterString_value_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_value_function" ):
                listener.exitString_value_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_value_function" ):
                return visitor.visitString_value_function(self)
            else:
                return visitor.visitChildren(self)




    def string_value_function(self):

        localctx = ADQLParser.String_value_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_string_value_function)
        try:
            self.state = 1009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.string_geometry_function()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.user_defined_function()
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1008
                self.char_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = ADQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(ADQLParser.LPAREN)
            self.state = 1012
            self.query_expression(0)
            self.state = 1013
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(ADQLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(ADQLParser.Where_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(ADQLParser.Group_by_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(ADQLParser.Having_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(ADQLParser.Order_by_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(ADQLParser.Offset_clauseContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_expression" ):
                listener.enterTable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_expression" ):
                listener.exitTable_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_expression" ):
                return visitor.visitTable_expression(self)
            else:
                return visitor.visitChildren(self)




    def table_expression(self):

        localctx = ADQLParser.Table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_table_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.from_clause()
            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 1016
                self.where_clause()


            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1019
                self.group_by_clause()


            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.having_clause()


            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 1025
                self.order_by_clause()


            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 1028
                self.offset_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ADQLParser.IdentifierContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(ADQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = ADQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1031
                self.schema_name()
                self.state = 1032
                self.match(ADQLParser.DOT)


            self.state = 1036
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(ADQLParser.Table_nameContext,0)


        def correlation_specification(self):
            return self.getTypedRuleContext(ADQLParser.Correlation_specificationContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(ADQLParser.Derived_tableContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Table_referenceContext,i)


        def JOIN(self):
            return self.getToken(ADQLParser.JOIN, 0)

        def NATURAL(self):
            return self.getToken(ADQLParser.NATURAL, 0)

        def join_type(self):
            return self.getTypedRuleContext(ADQLParser.Join_typeContext,0)


        def join_specification(self):
            return self.getTypedRuleContext(ADQLParser.Join_specificationContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_reference" ):
                return visitor.visitTable_reference(self)
            else:
                return visitor.visitChildren(self)



    def table_reference(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Table_referenceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_table_reference, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1039
                self.table_name()
                self.state = 1041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 1040
                    self.correlation_specification()


                pass

            elif la_ == 2:
                self.state = 1043
                self.derived_table()
                self.state = 1044
                self.correlation_specification()
                pass

            elif la_ == 3:
                self.state = 1046
                self.match(ADQLParser.LPAREN)
                self.state = 1047
                self.joined_table()
                self.state = 1048
                self.match(ADQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1066
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Table_referenceContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_reference)
                    self.state = 1052
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==178:
                        self.state = 1053
                        self.match(ADQLParser.NATURAL)


                    self.state = 1057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1073758209) != 0 or _la==214:
                        self.state = 1056
                        self.join_type()


                    self.state = 1059
                    self.match(ADQLParser.JOIN)
                    self.state = 1060
                    self.table_reference(0)
                    self.state = 1062
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                    if la_ == 1:
                        self.state = 1061
                        self.join_specification()

             
                self.state = 1068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Table_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(ADQLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_table_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_subquery" ):
                listener.enterTable_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_subquery" ):
                listener.exitTable_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_subquery" ):
                return visitor.visitTable_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_subquery(self):

        localctx = ADQLParser.Table_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_table_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(ADQLParser.FactorContext,0)


        def term(self):
            return self.getTypedRuleContext(ADQLParser.TermContext,0)


        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def SOLIDUS(self):
            return self.getToken(ADQLParser.SOLIDUS, 0)

        def MOD_SYM(self):
            return self.getToken(ADQLParser.MOD_SYM, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1085
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1083
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        localctx = ADQLParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 1074
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1075
                        self.match(ADQLParser.ASTERISK)
                        self.state = 1076
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = ADQLParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 1077
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1078
                        self.match(ADQLParser.SOLIDUS)
                        self.state = 1079
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = ADQLParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 1080
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1081
                        self.match(ADQLParser.MOD_SYM)
                        self.state = 1082
                        self.factor()
                        pass

             
                self.state = 1087
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Trig_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACOS(self):
            return self.getToken(ADQLParser.ACOS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def ASIN(self):
            return self.getToken(ADQLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(ADQLParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(ADQLParser.ATAN2, 0)

        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def COS(self):
            return self.getToken(ADQLParser.COS, 0)

        def COT(self):
            return self.getToken(ADQLParser.COT, 0)

        def SIN(self):
            return self.getToken(ADQLParser.SIN, 0)

        def TAN(self):
            return self.getToken(ADQLParser.TAN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_trig_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrig_function" ):
                listener.enterTrig_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrig_function" ):
                listener.exitTrig_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrig_function" ):
                return visitor.visitTrig_function(self)
            else:
                return visitor.visitChildren(self)




    def trig_function(self):

        localctx = ADQLParser.Trig_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_trig_function)
        try:
            self.state = 1135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.match(ADQLParser.ACOS)
                self.state = 1089
                self.match(ADQLParser.LPAREN)
                self.state = 1090
                self.numeric_value_expression(0)
                self.state = 1091
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.match(ADQLParser.ACOS)
                self.state = 1094
                self.match(ADQLParser.LPAREN)
                self.state = 1095
                self.numeric_value_expression(0)
                self.state = 1096
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1098
                self.match(ADQLParser.ASIN)
                self.state = 1099
                self.match(ADQLParser.LPAREN)
                self.state = 1100
                self.numeric_value_expression(0)
                self.state = 1101
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1103
                self.match(ADQLParser.ATAN)
                self.state = 1104
                self.match(ADQLParser.LPAREN)
                self.state = 1105
                self.numeric_value_expression(0)
                self.state = 1106
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1108
                self.match(ADQLParser.ATAN2)
                self.state = 1109
                self.match(ADQLParser.LPAREN)
                self.state = 1110
                self.numeric_value_expression(0)
                self.state = 1111
                self.match(ADQLParser.COMMA)
                self.state = 1112
                self.numeric_value_expression(0)
                self.state = 1113
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1115
                self.match(ADQLParser.COS)
                self.state = 1116
                self.match(ADQLParser.LPAREN)
                self.state = 1117
                self.numeric_value_expression(0)
                self.state = 1118
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1120
                self.match(ADQLParser.COT)
                self.state = 1121
                self.match(ADQLParser.LPAREN)
                self.state = 1122
                self.numeric_value_expression(0)
                self.state = 1123
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1125
                self.match(ADQLParser.SIN)
                self.state = 1126
                self.match(ADQLParser.LPAREN)
                self.state = 1127
                self.numeric_value_expression(0)
                self.state = 1128
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1130
                self.match(ADQLParser.TAN)
                self.state = 1131
                self.match(ADQLParser.LPAREN)
                self.state = 1132
                self.numeric_value_expression(0)
                self.state = 1133
                self.match(ADQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_unqualified_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_schema_name" ):
                listener.enterUnqualified_schema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_schema_name" ):
                listener.exitUnqualified_schema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualified_schema_name" ):
                return visitor.visitUnqualified_schema_name(self)
            else:
                return visitor.visitChildren(self)




    def unqualified_schema_name(self):

        localctx = ADQLParser.Unqualified_schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_unqualified_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_decimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ADQLParser.INT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_decimal" ):
                listener.enterUnsigned_decimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_decimal" ):
                listener.exitUnsigned_decimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_decimal" ):
                return visitor.visitUnsigned_decimal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_decimal(self):

        localctx = ADQLParser.Unsigned_decimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_unsigned_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.match(ADQLParser.INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_hexadecimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(ADQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_hexadecimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_hexadecimal" ):
                listener.enterUnsigned_hexadecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_hexadecimal" ):
                listener.exitUnsigned_hexadecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_hexadecimal" ):
                return visitor.visitUnsigned_hexadecimal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_hexadecimal(self):

        localctx = ADQLParser.Unsigned_hexadecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_unsigned_hexadecimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(ADQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_numeric_literal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_numeric_literalContext,0)


        def general_literal(self):
            return self.getTypedRuleContext(ADQLParser.General_literalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_literal" ):
                listener.enterUnsigned_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_literal" ):
                listener.exitUnsigned_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_literal" ):
                return visitor.visitUnsigned_literal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_literal(self):

        localctx = ADQLParser.Unsigned_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_unsigned_literal)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271, 273, 274, 286]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.unsigned_numeric_literal()
                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                self.general_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_numeric_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exact_numeric_literal(self):
            return self.getTypedRuleContext(ADQLParser.Exact_numeric_literalContext,0)


        def approximate_numeric_literal(self):
            return self.getTypedRuleContext(ADQLParser.Approximate_numeric_literalContext,0)


        def unsigned_hexadecimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_hexadecimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_numeric_literal" ):
                listener.enterUnsigned_numeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_numeric_literal" ):
                listener.exitUnsigned_numeric_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_numeric_literal" ):
                return visitor.visitUnsigned_numeric_literal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_numeric_literal(self):

        localctx = ADQLParser.Unsigned_numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_unsigned_numeric_literal)
        try:
            self.state = 1150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271, 286]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.exact_numeric_literal()
                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1148
                self.approximate_numeric_literal()
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1149
                self.unsigned_hexadecimal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_value_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_literal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_literalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_value_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_value_specification" ):
                listener.enterUnsigned_value_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_value_specification" ):
                listener.exitUnsigned_value_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_value_specification" ):
                return visitor.visitUnsigned_value_specification(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_value_specification(self):

        localctx = ADQLParser.Unsigned_value_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_unsigned_value_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.unsigned_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_defined_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user_defined_function_name(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_function_nameContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def user_defined_function_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.User_defined_function_paramContext)
            else:
                return self.getTypedRuleContext(ADQLParser.User_defined_function_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_user_defined_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_defined_function" ):
                listener.enterUser_defined_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_defined_function" ):
                listener.exitUser_defined_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_defined_function" ):
                return visitor.visitUser_defined_function(self)
            else:
                return visitor.visitChildren(self)




    def user_defined_function(self):

        localctx = ADQLParser.User_defined_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_user_defined_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.user_defined_function_name()
            self.state = 1155
            self.match(ADQLParser.LPAREN)
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 288243570123470974) != 0 or _la==88 or _la==127 or (((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & 13) != 0 or (((_la - 234)) & ~0x3f) == 0 and ((1 << (_la - 234)) & 7414694100893697) != 0 or _la==300:
                self.state = 1156
                self.user_defined_function_param()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==284:
                    self.state = 1157
                    self.match(ADQLParser.COMMA)
                    self.state = 1158
                    self.user_defined_function_param()
                    self.state = 1163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1166
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_defined_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_identifier(self):
            return self.getTypedRuleContext(ADQLParser.Regular_identifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_user_defined_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_defined_function_name" ):
                listener.enterUser_defined_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_defined_function_name" ):
                listener.exitUser_defined_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_defined_function_name" ):
                return visitor.visitUser_defined_function_name(self)
            else:
                return visitor.visitChildren(self)




    def user_defined_function_name(self):

        localctx = ADQLParser.User_defined_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_user_defined_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.regular_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_defined_function_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_user_defined_function_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_defined_function_param" ):
                listener.enterUser_defined_function_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_defined_function_param" ):
                listener.exitUser_defined_function_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_defined_function_param" ):
                return visitor.visitUser_defined_function_param(self)
            else:
                return visitor.visitChildren(self)




    def user_defined_function_param(self):

        localctx = ADQLParser.User_defined_function_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_user_defined_function_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def string_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.String_value_expressionContext,0)


        def boolean_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_value_expressionContext,0)


        def geometry_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_expression" ):
                listener.enterValue_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_expression" ):
                listener.exitValue_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_expression" ):
                return visitor.visitValue_expression(self)
            else:
                return visitor.visitChildren(self)




    def value_expression(self):

        localctx = ADQLParser.Value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_value_expression)
        try:
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.numeric_value_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.string_value_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.boolean_value_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1175
                self.geometry_value_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_expression_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_value_specification(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_value_specificationContext,0)


        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def set_function_specification(self):
            return self.getTypedRuleContext(ADQLParser.Set_function_specificationContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_value_expression_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_expression_primary" ):
                listener.enterValue_expression_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_expression_primary" ):
                listener.exitValue_expression_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_expression_primary" ):
                return visitor.visitValue_expression_primary(self)
            else:
                return visitor.visitChildren(self)




    def value_expression_primary(self):

        localctx = ADQLParser.Value_expression_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_value_expression_primary)
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271, 273, 274, 275, 286]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.unsigned_value_specification()
                pass
            elif token in [276, 300]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.column_reference()
                pass
            elif token in [58, 88, 171, 172, 234]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1180
                self.set_function_specification()
                pass
            elif token in [280]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1181
                self.match(ADQLParser.LPAREN)
                self.state = 1182
                self.value_expression()
                self.state = 1183
                self.match(ADQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(ADQLParser.WHERE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = ADQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(ADQLParser.WHERE)
            self.state = 1188
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(ADQLParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(ADQLParser.AS, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.LPAREN)
            else:
                return self.getToken(ADQLParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.RPAREN)
            else:
                return self.getToken(ADQLParser.RPAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Column_nameContext,i)


        def query_specification(self):
            return self.getTypedRuleContext(ADQLParser.Query_specificationContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_with_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_query" ):
                listener.enterWith_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_query" ):
                listener.exitWith_query(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_query" ):
                return visitor.visitWith_query(self)
            else:
                return visitor.visitChildren(self)




    def with_query(self):

        localctx = ADQLParser.With_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_with_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.query_name()
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==280:
                self.state = 1191
                self.match(ADQLParser.LPAREN)
                self.state = 1192
                self.column_name()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==284:
                    self.state = 1193
                    self.match(ADQLParser.COMMA)
                    self.state = 1194
                    self.column_name()
                    self.state = 1199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1200
                self.match(ADQLParser.RPAREN)


            self.state = 1204
            self.match(ADQLParser.AS)
            self.state = 1205
            self.match(ADQLParser.LPAREN)
            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221 or _la==266:
                self.state = 1206
                self.query_specification()


            self.state = 1209
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.boolean_term_sempred
        self._predicates[18] = self.character_value_expression_sempred
        self._predicates[73] = self.numeric_value_expression_sempred
        self._predicates[85] = self.query_expression_sempred
        self._predicates[89] = self.query_term_sempred
        self._predicates[94] = self.search_condition_sempred
        self._predicates[113] = self.table_reference_sempred
        self._predicates[115] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def boolean_term_sempred(self, localctx:Boolean_termContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def character_value_expression_sempred(self, localctx:Character_value_expressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def numeric_value_expression_sempred(self, localctx:Numeric_value_expressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def query_expression_sempred(self, localctx:Query_expressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def query_term_sempred(self, localctx:Query_termContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def table_reference_sempred(self, localctx:Table_referenceContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         




