# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from herdsdk.api_client import ApiClient


class DataProviderApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_provider_create_data_provider(self, data_provider_create_request, **kwargs):  # noqa: E501
        """createDataProvider  # noqa: E501

        Creates a new data provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_create_data_provider(data_provider_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataProviderCreateRequest data_provider_create_request: the information needed to create the data provider (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_provider_create_data_provider_with_http_info(data_provider_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.data_provider_create_data_provider_with_http_info(data_provider_create_request, **kwargs)  # noqa: E501
            return data

    def data_provider_create_data_provider_with_http_info(self, data_provider_create_request, **kwargs):  # noqa: E501
        """createDataProvider  # noqa: E501

        Creates a new data provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_create_data_provider_with_http_info(data_provider_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataProviderCreateRequest data_provider_create_request: the information needed to create the data provider (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data_provider_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_provider_create_data_provider" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data_provider_create_request' is set
        if ('data_provider_create_request' not in local_var_params or
                local_var_params['data_provider_create_request'] is None):
            raise ValueError("Missing the required parameter `data_provider_create_request` when calling `data_provider_create_data_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data_provider_create_request' in local_var_params:
            body_params = local_var_params['data_provider_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataProviders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_provider_delete_data_provider(self, data_provider_name, **kwargs):  # noqa: E501
        """deleteDataProvider  # noqa: E501

        Deletes an existing data provider by data provider name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_delete_data_provider(data_provider_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_provider_name: the data provider name (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_provider_delete_data_provider_with_http_info(data_provider_name, **kwargs)  # noqa: E501
        else:
            (data) = self.data_provider_delete_data_provider_with_http_info(data_provider_name, **kwargs)  # noqa: E501
            return data

    def data_provider_delete_data_provider_with_http_info(self, data_provider_name, **kwargs):  # noqa: E501
        """deleteDataProvider  # noqa: E501

        Deletes an existing data provider by data provider name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_delete_data_provider_with_http_info(data_provider_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_provider_name: the data provider name (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data_provider_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_provider_delete_data_provider" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data_provider_name' is set
        if ('data_provider_name' not in local_var_params or
                local_var_params['data_provider_name'] is None):
            raise ValueError("Missing the required parameter `data_provider_name` when calling `data_provider_delete_data_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_provider_name' in local_var_params:
            path_params['dataProviderName'] = local_var_params['data_provider_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataProviders/{dataProviderName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_provider_get_data_provider(self, data_provider_name, **kwargs):  # noqa: E501
        """getDataProvider  # noqa: E501

        Gets an existing data provider by data provider name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_get_data_provider(data_provider_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_provider_name: the data provider name (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_provider_get_data_provider_with_http_info(data_provider_name, **kwargs)  # noqa: E501
        else:
            (data) = self.data_provider_get_data_provider_with_http_info(data_provider_name, **kwargs)  # noqa: E501
            return data

    def data_provider_get_data_provider_with_http_info(self, data_provider_name, **kwargs):  # noqa: E501
        """getDataProvider  # noqa: E501

        Gets an existing data provider by data provider name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_get_data_provider_with_http_info(data_provider_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_provider_name: the data provider name (required)
        :return: DataProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data_provider_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_provider_get_data_provider" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data_provider_name' is set
        if ('data_provider_name' not in local_var_params or
                local_var_params['data_provider_name'] is None):
            raise ValueError("Missing the required parameter `data_provider_name` when calling `data_provider_get_data_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_provider_name' in local_var_params:
            path_params['dataProviderName'] = local_var_params['data_provider_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataProviders/{dataProviderName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_provider_get_data_providers(self, **kwargs):  # noqa: E501
        """getDataProviders  # noqa: E501

        Gets a list of data provider keys for all data providers defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_get_data_providers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DataProviderKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_provider_get_data_providers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_provider_get_data_providers_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_provider_get_data_providers_with_http_info(self, **kwargs):  # noqa: E501
        """getDataProviders  # noqa: E501

        Gets a list of data provider keys for all data providers defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_provider_get_data_providers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DataProviderKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_provider_get_data_providers" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataProviders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProviderKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
