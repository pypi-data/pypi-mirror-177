# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from herdsdk.api_client import ApiClient


class BusinessObjectFormatApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def business_object_format_create_business_object_format(self, business_object_format_create_request, **kwargs):  # noqa: E501
        """createBusinessObjectFormat  # noqa: E501

        Creates a new business object format. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_create_business_object_format(business_object_format_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectFormatCreateRequest business_object_format_create_request: the information needed to create the business object format. (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_create_business_object_format_with_http_info(business_object_format_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_create_business_object_format_with_http_info(business_object_format_create_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_create_business_object_format_with_http_info(self, business_object_format_create_request, **kwargs):  # noqa: E501
        """createBusinessObjectFormat  # noqa: E501

        Creates a new business object format. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_create_business_object_format_with_http_info(business_object_format_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectFormatCreateRequest business_object_format_create_request: the information needed to create the business object format. (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['business_object_format_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_create_business_object_format" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'business_object_format_create_request' is set
        if ('business_object_format_create_request' not in local_var_params or
                local_var_params['business_object_format_create_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_create_request` when calling `business_object_format_create_business_object_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_create_request' in local_var_params:
            body_params = local_var_params['business_object_format_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_delete_business_object_format(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, **kwargs):  # noqa: E501
        """deleteBusinessObjectFormat  # noqa: E501

        Deletes an existing business format. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_delete_business_object_format(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_delete_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_delete_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, **kwargs)  # noqa: E501
            return data

    def business_object_format_delete_business_object_format_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, **kwargs):  # noqa: E501
        """deleteBusinessObjectFormat  # noqa: E501

        Deletes an existing business format. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_delete_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_delete_business_object_format" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_delete_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_delete_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_delete_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_delete_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_version' is set
        if ('business_object_format_version' not in local_var_params or
                local_var_params['business_object_format_version'] is None):
            raise ValueError("Missing the required parameter `business_object_format_version` when calling `business_object_format_delete_business_object_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501
        if 'business_object_format_version' in local_var_params:
            path_params['businessObjectFormatVersion'] = local_var_params['business_object_format_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_generate_business_object_format_ddl(self, business_object_format_ddl_request, **kwargs):  # noqa: E501
        """generateBusinessObjectFormatDdl  # noqa: E501

        Retrieves the DDL to initialize the specified type of the database system (e.g. Hive) by creating a table for the requested business object format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_generate_business_object_format_ddl(business_object_format_ddl_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectFormatDdlRequest business_object_format_ddl_request: the business object data DDL request (required)
        :return: BusinessObjectFormatDdl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_generate_business_object_format_ddl_with_http_info(business_object_format_ddl_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_generate_business_object_format_ddl_with_http_info(business_object_format_ddl_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_generate_business_object_format_ddl_with_http_info(self, business_object_format_ddl_request, **kwargs):  # noqa: E501
        """generateBusinessObjectFormatDdl  # noqa: E501

        Retrieves the DDL to initialize the specified type of the database system (e.g. Hive) by creating a table for the requested business object format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_generate_business_object_format_ddl_with_http_info(business_object_format_ddl_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectFormatDdlRequest business_object_format_ddl_request: the business object data DDL request (required)
        :return: BusinessObjectFormatDdl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['business_object_format_ddl_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_generate_business_object_format_ddl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'business_object_format_ddl_request' is set
        if ('business_object_format_ddl_request' not in local_var_params or
                local_var_params['business_object_format_ddl_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_ddl_request` when calling `business_object_format_generate_business_object_format_ddl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_ddl_request' in local_var_params:
            body_params = local_var_params['business_object_format_ddl_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats/generateDdl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormatDdl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_generate_business_object_format_ddl_collection(self, business_object_format_ddl_collection_request, **kwargs):  # noqa: E501
        """generateBusinessObjectFormatDdlCollection  # noqa: E501

        Retrieves the DDL to initialize the specified type of the database system (e.g. Hive) by creating tables for a collection of business object formats. <p>Requires READ permission on ALL namespaces</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_generate_business_object_format_ddl_collection(business_object_format_ddl_collection_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectFormatDdlCollectionRequest business_object_format_ddl_collection_request: the business object format DDL collection request (required)
        :return: BusinessObjectFormatDdlCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_generate_business_object_format_ddl_collection_with_http_info(business_object_format_ddl_collection_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_generate_business_object_format_ddl_collection_with_http_info(business_object_format_ddl_collection_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_generate_business_object_format_ddl_collection_with_http_info(self, business_object_format_ddl_collection_request, **kwargs):  # noqa: E501
        """generateBusinessObjectFormatDdlCollection  # noqa: E501

        Retrieves the DDL to initialize the specified type of the database system (e.g. Hive) by creating tables for a collection of business object formats. <p>Requires READ permission on ALL namespaces</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_generate_business_object_format_ddl_collection_with_http_info(business_object_format_ddl_collection_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectFormatDdlCollectionRequest business_object_format_ddl_collection_request: the business object format DDL collection request (required)
        :return: BusinessObjectFormatDdlCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['business_object_format_ddl_collection_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_generate_business_object_format_ddl_collection" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'business_object_format_ddl_collection_request' is set
        if ('business_object_format_ddl_collection_request' not in local_var_params or
                local_var_params['business_object_format_ddl_collection_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_ddl_collection_request` when calling `business_object_format_generate_business_object_format_ddl_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_ddl_collection_request' in local_var_params:
            body_params = local_var_params['business_object_format_ddl_collection_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats/generateDdlCollection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormatDdlCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_get_business_object_format(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, **kwargs):  # noqa: E501
        """getBusinessObjectFormat  # noqa: E501

        Gets an existing business object format by alternate key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_get_business_object_format(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_get_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_get_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, **kwargs)  # noqa: E501
            return data

    def business_object_format_get_business_object_format_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, **kwargs):  # noqa: E501
        """getBusinessObjectFormat  # noqa: E501

        Gets an existing business object format by alternate key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_get_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_get_business_object_format" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_get_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_get_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_get_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_get_business_object_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501

        query_params = []
        if 'business_object_format_version' in local_var_params:
            query_params.append(('businessObjectFormatVersion', local_var_params['business_object_format_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_get_business_object_formats(self, namespace, business_object_definition_name, **kwargs):  # noqa: E501
        """getBusinessObjectFormats  # noqa: E501

        Gets a list of business object formats for the specified business object definition name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_get_business_object_formats(namespace, business_object_definition_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param bool latest_business_object_format_version:
        :return: BusinessObjectFormatKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_get_business_object_formats_with_http_info(namespace, business_object_definition_name, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_get_business_object_formats_with_http_info(namespace, business_object_definition_name, **kwargs)  # noqa: E501
            return data

    def business_object_format_get_business_object_formats_with_http_info(self, namespace, business_object_definition_name, **kwargs):  # noqa: E501
        """getBusinessObjectFormats  # noqa: E501

        Gets a list of business object formats for the specified business object definition name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_get_business_object_formats_with_http_info(namespace, business_object_definition_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param bool latest_business_object_format_version:
        :return: BusinessObjectFormatKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'latest_business_object_format_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_get_business_object_formats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_get_business_object_formats`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_get_business_object_formats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501

        query_params = []
        if 'latest_business_object_format_version' in local_var_params:
            query_params.append(('latestBusinessObjectFormatVersion', local_var_params['latest_business_object_format_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormatKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_get_business_object_formats_with_filters(self, namespace, business_object_definition_name, business_object_format_usage, **kwargs):  # noqa: E501
        """getBusinessObjectFormatsWithFilters  # noqa: E501

        Gets a list of business object formats for the specified business object definition name and business object format usage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_get_business_object_formats_with_filters(namespace, business_object_definition_name, business_object_format_usage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param bool latest_business_object_format_version: latest business object format version
        :return: BusinessObjectFormatKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_get_business_object_formats_with_filters_with_http_info(namespace, business_object_definition_name, business_object_format_usage, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_get_business_object_formats_with_filters_with_http_info(namespace, business_object_definition_name, business_object_format_usage, **kwargs)  # noqa: E501
            return data

    def business_object_format_get_business_object_formats_with_filters_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, **kwargs):  # noqa: E501
        """getBusinessObjectFormatsWithFilters  # noqa: E501

        Gets a list of business object formats for the specified business object definition name and business object format usage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_get_business_object_formats_with_filters_with_http_info(namespace, business_object_definition_name, business_object_format_usage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param bool latest_business_object_format_version: latest business object format version
        :return: BusinessObjectFormatKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'latest_business_object_format_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_get_business_object_formats_with_filters" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_get_business_object_formats_with_filters`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_get_business_object_formats_with_filters`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_get_business_object_formats_with_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501

        query_params = []
        if 'latest_business_object_format_version' in local_var_params:
            query_params.append(('latestBusinessObjectFormatVersion', local_var_params['latest_business_object_format_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormatKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormat  # noqa: E501

        Updates an existing business object format by alternate key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :param BusinessObjectFormatUpdateRequest business_object_format_update_request: the information needed to update the business object format (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormat  # noqa: E501

        Updates an existing business object format by alternate key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :param BusinessObjectFormatUpdateRequest business_object_format_update_request: the information needed to update the business object format (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_version', 'business_object_format_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_version' is set
        if ('business_object_format_version' not in local_var_params or
                local_var_params['business_object_format_version'] is None):
            raise ValueError("Missing the required parameter `business_object_format_version` when calling `business_object_format_update_business_object_format`")  # noqa: E501
        # verify the required parameter 'business_object_format_update_request' is set
        if ('business_object_format_update_request' not in local_var_params or
                local_var_params['business_object_format_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_update_request` when calling `business_object_format_update_business_object_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501
        if 'business_object_format_version' in local_var_params:
            path_params['businessObjectFormatVersion'] = local_var_params['business_object_format_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format_attribute_definitions(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attribute_definitions_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatAttributeDefinitions  # noqa: E501

        Replaces the list of attribute definitions for an existing business object format based on the specified usage, file type, version and a business object definition. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_attribute_definitions(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attribute_definitions_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :param BusinessObjectFormatAttributeDefinitionsUpdateRequest business_object_format_attribute_definitions_update_request: the information needed to update the business object format attribute definitions (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_attribute_definitions_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attribute_definitions_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_attribute_definitions_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attribute_definitions_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_attribute_definitions_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attribute_definitions_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatAttributeDefinitions  # noqa: E501

        Replaces the list of attribute definitions for an existing business object format based on the specified usage, file type, version and a business object definition. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_attribute_definitions_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attribute_definitions_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :param BusinessObjectFormatAttributeDefinitionsUpdateRequest business_object_format_attribute_definitions_update_request: the information needed to update the business object format attribute definitions (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_version', 'business_object_format_attribute_definitions_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format_attribute_definitions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format_attribute_definitions`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format_attribute_definitions`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format_attribute_definitions`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format_attribute_definitions`")  # noqa: E501
        # verify the required parameter 'business_object_format_version' is set
        if ('business_object_format_version' not in local_var_params or
                local_var_params['business_object_format_version'] is None):
            raise ValueError("Missing the required parameter `business_object_format_version` when calling `business_object_format_update_business_object_format_attribute_definitions`")  # noqa: E501
        # verify the required parameter 'business_object_format_attribute_definitions_update_request' is set
        if ('business_object_format_attribute_definitions_update_request' not in local_var_params or
                local_var_params['business_object_format_attribute_definitions_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_attribute_definitions_update_request` when calling `business_object_format_update_business_object_format_attribute_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501
        if 'business_object_format_version' in local_var_params:
            path_params['businessObjectFormatVersion'] = local_var_params['business_object_format_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_attribute_definitions_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_attribute_definitions_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormatAttributeDefinitions/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format_attributes(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attributes_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatAttributes  # noqa: E501

        Updates an existing business object format attributes by alternate key. <p>Requires WRITE permission on namespace</p> <p> This endpoint replaces the entire list of attributes on the business object format with the contents of the request. Observe this example: <ol> <li>Three attributes present on the existing business object format.</li> <li>This endpoint is called with a single attribute in the request with an updated value.</li> <li>After this operation the business object format will have only one attribute – which is probably not the desired outcome.</li> <li>Instead, supply all existing attributes and provide updated values and additional attributes as needed. The only case when an existing attribute should be left out is to remove the attribute.</li> </ol> </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_attributes(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attributes_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :param BusinessObjectFormatAttributesUpdateRequest business_object_format_attributes_update_request: the information needed to update the business object format attributes (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_attributes_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attributes_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_attributes_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attributes_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_attributes_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attributes_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatAttributes  # noqa: E501

        Updates an existing business object format attributes by alternate key. <p>Requires WRITE permission on namespace</p> <p> This endpoint replaces the entire list of attributes on the business object format with the contents of the request. Observe this example: <ol> <li>Three attributes present on the existing business object format.</li> <li>This endpoint is called with a single attribute in the request with an updated value.</li> <li>After this operation the business object format will have only one attribute – which is probably not the desired outcome.</li> <li>Instead, supply all existing attributes and provide updated values and additional attributes as needed. The only case when an existing attribute should be left out is to remove the attribute.</li> </ol> </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_attributes_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, business_object_format_attributes_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param int business_object_format_version: the business object format version (required)
        :param BusinessObjectFormatAttributesUpdateRequest business_object_format_attributes_update_request: the information needed to update the business object format attributes (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_version', 'business_object_format_attributes_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format_attributes`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format_attributes`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format_attributes`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format_attributes`")  # noqa: E501
        # verify the required parameter 'business_object_format_version' is set
        if ('business_object_format_version' not in local_var_params or
                local_var_params['business_object_format_version'] is None):
            raise ValueError("Missing the required parameter `business_object_format_version` when calling `business_object_format_update_business_object_format_attributes`")  # noqa: E501
        # verify the required parameter 'business_object_format_attributes_update_request' is set
        if ('business_object_format_attributes_update_request' not in local_var_params or
                local_var_params['business_object_format_attributes_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_attributes_update_request` when calling `business_object_format_update_business_object_format_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501
        if 'business_object_format_version' in local_var_params:
            path_params['businessObjectFormatVersion'] = local_var_params['business_object_format_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_attributes_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_attributes_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormatAttributes/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format_legal_hold(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_legal_hold_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatLegalHold  # noqa: E501

        Updates legal hold status for an existing business object format by alternate key without business object format version. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_legal_hold(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_legal_hold_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatLegalHoldUpdateRequest business_object_format_legal_hold_update_request: the information needed to update the business object format legal hold (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_legal_hold_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_legal_hold_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_legal_hold_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_legal_hold_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_legal_hold_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_legal_hold_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatLegalHold  # noqa: E501

        Updates legal hold status for an existing business object format by alternate key without business object format version. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_legal_hold_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_legal_hold_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatLegalHoldUpdateRequest business_object_format_legal_hold_update_request: the information needed to update the business object format legal hold (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_legal_hold_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format_legal_hold" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format_legal_hold`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format_legal_hold`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format_legal_hold`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format_legal_hold`")  # noqa: E501
        # verify the required parameter 'business_object_format_legal_hold_update_request' is set
        if ('business_object_format_legal_hold_update_request' not in local_var_params or
                local_var_params['business_object_format_legal_hold_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_legal_hold_update_request` when calling `business_object_format_update_business_object_format_legal_hold`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_legal_hold_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_legal_hold_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormatLegalHold/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format_parents(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_parents_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatParents  # noqa: E501

        Updates an existing business object format parents by alternate key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_parents(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_parents_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatParentsUpdateRequest business_object_format_parents_update_request: the information needed to update the business object format (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_parents_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_parents_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_parents_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_parents_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_parents_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_parents_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatParents  # noqa: E501

        Updates an existing business object format parents by alternate key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_parents_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_parents_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatParentsUpdateRequest business_object_format_parents_update_request: the information needed to update the business object format (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_parents_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format_parents" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format_parents`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format_parents`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format_parents`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format_parents`")  # noqa: E501
        # verify the required parameter 'business_object_format_parents_update_request' is set
        if ('business_object_format_parents_update_request' not in local_var_params or
                local_var_params['business_object_format_parents_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_parents_update_request` when calling `business_object_format_update_business_object_format_parents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_parents_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_parents_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormatParents/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format_record_flag(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_record_flag_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatRecordFlag  # noqa: E501

        Updates or resets record flag for an existing business object format by alternate key without business object format version. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_record_flag(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_record_flag_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatRecordFlagUpdateRequest business_object_format_record_flag_update_request: the information needed to update the business object format legal hold (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_record_flag_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_record_flag_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_record_flag_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_record_flag_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_record_flag_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_record_flag_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatRecordFlag  # noqa: E501

        Updates or resets record flag for an existing business object format by alternate key without business object format version. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_record_flag_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_record_flag_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatRecordFlagUpdateRequest business_object_format_record_flag_update_request: the information needed to update the business object format legal hold (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_record_flag_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format_record_flag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format_record_flag`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format_record_flag`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format_record_flag`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format_record_flag`")  # noqa: E501
        # verify the required parameter 'business_object_format_record_flag_update_request' is set
        if ('business_object_format_record_flag_update_request' not in local_var_params or
                local_var_params['business_object_format_record_flag_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_record_flag_update_request` when calling `business_object_format_update_business_object_format_record_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_record_flag_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_record_flag_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormatRecordFlag/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format_retention_information(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_retention_information_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatRetentionInformation  # noqa: E501

        Updates an existing business object format retention information by alternate key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_retention_information(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_retention_information_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatRetentionInformationUpdateRequest business_object_format_retention_information_update_request: the information needed to update the business object format retention information (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_retention_information_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_retention_information_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_retention_information_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_retention_information_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_retention_information_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_retention_information_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatRetentionInformation  # noqa: E501

        Updates an existing business object format retention information by alternate key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_retention_information_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_retention_information_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatRetentionInformationUpdateRequest business_object_format_retention_information_update_request: the information needed to update the business object format retention information (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_retention_information_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format_retention_information" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format_retention_information`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format_retention_information`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format_retention_information`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format_retention_information`")  # noqa: E501
        # verify the required parameter 'business_object_format_retention_information_update_request' is set
        if ('business_object_format_retention_information_update_request' not in local_var_params or
                local_var_params['business_object_format_retention_information_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_retention_information_update_request` when calling `business_object_format_update_business_object_format_retention_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_retention_information_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_retention_information_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormatRetentionInformation/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_format_update_business_object_format_schema_backwards_compatible_changes(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_schema_backwards_compatibility_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatSchemaBackwardsCompatibleChanges  # noqa: E501

        Updates an existing Business Object Format to allow non-backwards compatibility changes to the format schema based on the 'allowNonBackwardsCompatibleChanges' flag. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_schema_backwards_compatible_changes(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_schema_backwards_compatibility_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatSchemaBackwardsCompatibilityUpdateRequest business_object_format_schema_backwards_compatibility_update_request: the information needed to update the business object format to allow non-backwards compatibility changes to the format schema (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_format_update_business_object_format_schema_backwards_compatible_changes_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_schema_backwards_compatibility_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_format_update_business_object_format_schema_backwards_compatible_changes_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_schema_backwards_compatibility_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_format_update_business_object_format_schema_backwards_compatible_changes_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_schema_backwards_compatibility_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectFormatSchemaBackwardsCompatibleChanges  # noqa: E501

        Updates an existing Business Object Format to allow non-backwards compatibility changes to the format schema based on the 'allowNonBackwardsCompatibleChanges' flag. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_format_update_business_object_format_schema_backwards_compatible_changes_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_schema_backwards_compatibility_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :param str business_object_format_file_type: the business object format file type (required)
        :param BusinessObjectFormatSchemaBackwardsCompatibilityUpdateRequest business_object_format_schema_backwards_compatibility_update_request: the information needed to update the business object format to allow non-backwards compatibility changes to the format schema (required)
        :return: BusinessObjectFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_schema_backwards_compatibility_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_format_update_business_object_format_schema_backwards_compatible_changes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_format_update_business_object_format_schema_backwards_compatible_changes`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_format_update_business_object_format_schema_backwards_compatible_changes`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `business_object_format_update_business_object_format_schema_backwards_compatible_changes`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `business_object_format_update_business_object_format_schema_backwards_compatible_changes`")  # noqa: E501
        # verify the required parameter 'business_object_format_schema_backwards_compatibility_update_request' is set
        if ('business_object_format_schema_backwards_compatibility_update_request' not in local_var_params or
                local_var_params['business_object_format_schema_backwards_compatibility_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_format_schema_backwards_compatibility_update_request` when calling `business_object_format_update_business_object_format_schema_backwards_compatible_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_format_schema_backwards_compatibility_update_request' in local_var_params:
            body_params = local_var_params['business_object_format_schema_backwards_compatibility_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectFormatSchemaBackwardsCompatibility/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
