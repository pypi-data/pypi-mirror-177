# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from herdsdk.api_client import ApiClient


class UploadAndDownloadApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def uploadand_download_extend_upload_single_credentials(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs):  # noqa: E501
        """extendUploadSingleCredentials  # noqa: E501

        Extends the credentials for a previously initiated upload. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_extend_upload_single_credentials(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace. (required)
        :param str business_object_definition_name: the business object definition name. (required)
        :param str business_object_format_usage: the business object format usage. (required)
        :param str business_object_format_file_type: the business object format file type. (required)
        :param int business_object_format_version: the business object format version. (required)
        :param str partition_value: the partition value. (required)
        :param int business_object_data_version: the business object data version. (required)
        :return: UploadSingleCredentialExtensionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploadand_download_extend_upload_single_credentials_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs)  # noqa: E501
        else:
            (data) = self.uploadand_download_extend_upload_single_credentials_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs)  # noqa: E501
            return data

    def uploadand_download_extend_upload_single_credentials_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs):  # noqa: E501
        """extendUploadSingleCredentials  # noqa: E501

        Extends the credentials for a previously initiated upload. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_extend_upload_single_credentials_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace. (required)
        :param str business_object_definition_name: the business object definition name. (required)
        :param str business_object_format_usage: the business object format usage. (required)
        :param str business_object_format_file_type: the business object format file type. (required)
        :param int business_object_format_version: the business object format version. (required)
        :param str partition_value: the partition value. (required)
        :param int business_object_data_version: the business object data version. (required)
        :return: UploadSingleCredentialExtensionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_version', 'partition_value', 'business_object_data_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploadand_download_extend_upload_single_credentials" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `uploadand_download_extend_upload_single_credentials`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `uploadand_download_extend_upload_single_credentials`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `uploadand_download_extend_upload_single_credentials`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `uploadand_download_extend_upload_single_credentials`")  # noqa: E501
        # verify the required parameter 'business_object_format_version' is set
        if ('business_object_format_version' not in local_var_params or
                local_var_params['business_object_format_version'] is None):
            raise ValueError("Missing the required parameter `business_object_format_version` when calling `uploadand_download_extend_upload_single_credentials`")  # noqa: E501
        # verify the required parameter 'partition_value' is set
        if ('partition_value' not in local_var_params or
                local_var_params['partition_value'] is None):
            raise ValueError("Missing the required parameter `partition_value` when calling `uploadand_download_extend_upload_single_credentials`")  # noqa: E501
        # verify the required parameter 'business_object_data_version' is set
        if ('business_object_data_version' not in local_var_params or
                local_var_params['business_object_data_version'] is None):
            raise ValueError("Missing the required parameter `business_object_data_version` when calling `uploadand_download_extend_upload_single_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501
        if 'business_object_format_version' in local_var_params:
            path_params['businessObjectFormatVersion'] = local_var_params['business_object_format_version']  # noqa: E501
        if 'partition_value' in local_var_params:
            path_params['partitionValue'] = local_var_params['partition_value']  # noqa: E501
        if 'business_object_data_version' in local_var_params:
            path_params['businessObjectDataVersion'] = local_var_params['business_object_data_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upload/single/credential/extension/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadSingleCredentialExtensionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploadand_download_initiate_download_single(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs):  # noqa: E501
        """initiateDownloadSingle  # noqa: E501

        Initiates a download of a single file. <p>Requires READ permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_download_single(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace. (required)
        :param str business_object_definition_name: the business object definition name. (required)
        :param str business_object_format_usage: the business object format usage. (required)
        :param str business_object_format_file_type: the business object format file type. (required)
        :param int business_object_format_version: the business object format version. (required)
        :param str partition_value: the partition value. (required)
        :param int business_object_data_version: the business object data version. (required)
        :return: DownloadSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploadand_download_initiate_download_single_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs)  # noqa: E501
        else:
            (data) = self.uploadand_download_initiate_download_single_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs)  # noqa: E501
            return data

    def uploadand_download_initiate_download_single_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, **kwargs):  # noqa: E501
        """initiateDownloadSingle  # noqa: E501

        Initiates a download of a single file. <p>Requires READ permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_download_single_with_http_info(namespace, business_object_definition_name, business_object_format_usage, business_object_format_file_type, business_object_format_version, partition_value, business_object_data_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace. (required)
        :param str business_object_definition_name: the business object definition name. (required)
        :param str business_object_format_usage: the business object format usage. (required)
        :param str business_object_format_file_type: the business object format file type. (required)
        :param int business_object_format_version: the business object format version. (required)
        :param str partition_value: the partition value. (required)
        :param int business_object_data_version: the business object data version. (required)
        :return: DownloadSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage', 'business_object_format_file_type', 'business_object_format_version', 'partition_value', 'business_object_data_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploadand_download_initiate_download_single" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `uploadand_download_initiate_download_single`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `uploadand_download_initiate_download_single`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `uploadand_download_initiate_download_single`")  # noqa: E501
        # verify the required parameter 'business_object_format_file_type' is set
        if ('business_object_format_file_type' not in local_var_params or
                local_var_params['business_object_format_file_type'] is None):
            raise ValueError("Missing the required parameter `business_object_format_file_type` when calling `uploadand_download_initiate_download_single`")  # noqa: E501
        # verify the required parameter 'business_object_format_version' is set
        if ('business_object_format_version' not in local_var_params or
                local_var_params['business_object_format_version'] is None):
            raise ValueError("Missing the required parameter `business_object_format_version` when calling `uploadand_download_initiate_download_single`")  # noqa: E501
        # verify the required parameter 'partition_value' is set
        if ('partition_value' not in local_var_params or
                local_var_params['partition_value'] is None):
            raise ValueError("Missing the required parameter `partition_value` when calling `uploadand_download_initiate_download_single`")  # noqa: E501
        # verify the required parameter 'business_object_data_version' is set
        if ('business_object_data_version' not in local_var_params or
                local_var_params['business_object_data_version'] is None):
            raise ValueError("Missing the required parameter `business_object_data_version` when calling `uploadand_download_initiate_download_single`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501
        if 'business_object_format_file_type' in local_var_params:
            path_params['businessObjectFormatFileType'] = local_var_params['business_object_format_file_type']  # noqa: E501
        if 'business_object_format_version' in local_var_params:
            path_params['businessObjectFormatVersion'] = local_var_params['business_object_format_version']  # noqa: E501
        if 'partition_value' in local_var_params:
            path_params['partitionValue'] = local_var_params['partition_value']  # noqa: E501
        if 'business_object_data_version' in local_var_params:
            path_params['businessObjectDataVersion'] = local_var_params['business_object_data_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/download/single/initiation/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadSingleInitiationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploadand_download_initiate_download_single_business_object_data_storage_file(self, download_business_object_data_storage_file_single_initiation_request, **kwargs):  # noqa: E501
        """initiateDownloadSingleBusinessObjectDataStorageFile  # noqa: E501

        Download a single business object data storage file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_download_single_business_object_data_storage_file(download_business_object_data_storage_file_single_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadBusinessObjectDataStorageFileSingleInitiationRequest download_business_object_data_storage_file_single_initiation_request: (required)
        :return: DownloadBusinessObjectDataStorageFileSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploadand_download_initiate_download_single_business_object_data_storage_file_with_http_info(download_business_object_data_storage_file_single_initiation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.uploadand_download_initiate_download_single_business_object_data_storage_file_with_http_info(download_business_object_data_storage_file_single_initiation_request, **kwargs)  # noqa: E501
            return data

    def uploadand_download_initiate_download_single_business_object_data_storage_file_with_http_info(self, download_business_object_data_storage_file_single_initiation_request, **kwargs):  # noqa: E501
        """initiateDownloadSingleBusinessObjectDataStorageFile  # noqa: E501

        Download a single business object data storage file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_download_single_business_object_data_storage_file_with_http_info(download_business_object_data_storage_file_single_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadBusinessObjectDataStorageFileSingleInitiationRequest download_business_object_data_storage_file_single_initiation_request: (required)
        :return: DownloadBusinessObjectDataStorageFileSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['download_business_object_data_storage_file_single_initiation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploadand_download_initiate_download_single_business_object_data_storage_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'download_business_object_data_storage_file_single_initiation_request' is set
        if ('download_business_object_data_storage_file_single_initiation_request' not in local_var_params or
                local_var_params['download_business_object_data_storage_file_single_initiation_request'] is None):
            raise ValueError("Missing the required parameter `download_business_object_data_storage_file_single_initiation_request` when calling `uploadand_download_initiate_download_single_business_object_data_storage_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'download_business_object_data_storage_file_single_initiation_request' in local_var_params:
            body_params = local_var_params['download_business_object_data_storage_file_single_initiation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/download/businessObjectDataStorageFile/single/initiation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadBusinessObjectDataStorageFileSingleInitiationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploadand_download_initiate_download_single_sample_file(self, download_business_object_definition_sample_data_file_single_initiation_request, **kwargs):  # noqa: E501
        """initiateDownloadSingleSampleFile  # noqa: E501

        Download a single business object definition sample file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_download_single_sample_file(download_business_object_definition_sample_data_file_single_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadBusinessObjectDefinitionSampleDataFileSingleInitiationRequest download_business_object_definition_sample_data_file_single_initiation_request: (required)
        :return: DownloadBusinessObjectDefinitionSampleDataFileSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploadand_download_initiate_download_single_sample_file_with_http_info(download_business_object_definition_sample_data_file_single_initiation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.uploadand_download_initiate_download_single_sample_file_with_http_info(download_business_object_definition_sample_data_file_single_initiation_request, **kwargs)  # noqa: E501
            return data

    def uploadand_download_initiate_download_single_sample_file_with_http_info(self, download_business_object_definition_sample_data_file_single_initiation_request, **kwargs):  # noqa: E501
        """initiateDownloadSingleSampleFile  # noqa: E501

        Download a single business object definition sample file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_download_single_sample_file_with_http_info(download_business_object_definition_sample_data_file_single_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadBusinessObjectDefinitionSampleDataFileSingleInitiationRequest download_business_object_definition_sample_data_file_single_initiation_request: (required)
        :return: DownloadBusinessObjectDefinitionSampleDataFileSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['download_business_object_definition_sample_data_file_single_initiation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploadand_download_initiate_download_single_sample_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'download_business_object_definition_sample_data_file_single_initiation_request' is set
        if ('download_business_object_definition_sample_data_file_single_initiation_request' not in local_var_params or
                local_var_params['download_business_object_definition_sample_data_file_single_initiation_request'] is None):
            raise ValueError("Missing the required parameter `download_business_object_definition_sample_data_file_single_initiation_request` when calling `uploadand_download_initiate_download_single_sample_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'download_business_object_definition_sample_data_file_single_initiation_request' in local_var_params:
            body_params = local_var_params['download_business_object_definition_sample_data_file_single_initiation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/download/businessObjectDefinitionSampleDataFile/single/initiation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadBusinessObjectDefinitionSampleDataFileSingleInitiationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploadand_download_initiate_upload_sample_file(self, upload_business_object_definition_sample_data_file_initiation_request, **kwargs):  # noqa: E501
        """initiateUploadSampleFile  # noqa: E501

        Provide the location and credentials prior to upload a Sample Data file <p>Requires WRITE or WRITE_DESCRIPTIVE_CONTENT permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_upload_sample_file(upload_business_object_definition_sample_data_file_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadBusinessObjectDefinitionSampleDataFileInitiationRequest upload_business_object_definition_sample_data_file_initiation_request: request to upload (required)
        :return: UploadBusinessObjectDefinitionSampleDataFileInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploadand_download_initiate_upload_sample_file_with_http_info(upload_business_object_definition_sample_data_file_initiation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.uploadand_download_initiate_upload_sample_file_with_http_info(upload_business_object_definition_sample_data_file_initiation_request, **kwargs)  # noqa: E501
            return data

    def uploadand_download_initiate_upload_sample_file_with_http_info(self, upload_business_object_definition_sample_data_file_initiation_request, **kwargs):  # noqa: E501
        """initiateUploadSampleFile  # noqa: E501

        Provide the location and credentials prior to upload a Sample Data file <p>Requires WRITE or WRITE_DESCRIPTIVE_CONTENT permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_upload_sample_file_with_http_info(upload_business_object_definition_sample_data_file_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadBusinessObjectDefinitionSampleDataFileInitiationRequest upload_business_object_definition_sample_data_file_initiation_request: request to upload (required)
        :return: UploadBusinessObjectDefinitionSampleDataFileInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['upload_business_object_definition_sample_data_file_initiation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploadand_download_initiate_upload_sample_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upload_business_object_definition_sample_data_file_initiation_request' is set
        if ('upload_business_object_definition_sample_data_file_initiation_request' not in local_var_params or
                local_var_params['upload_business_object_definition_sample_data_file_initiation_request'] is None):
            raise ValueError("Missing the required parameter `upload_business_object_definition_sample_data_file_initiation_request` when calling `uploadand_download_initiate_upload_sample_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upload_business_object_definition_sample_data_file_initiation_request' in local_var_params:
            body_params = local_var_params['upload_business_object_definition_sample_data_file_initiation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upload/businessObjectDefinitionSampleDataFile/initiation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadBusinessObjectDefinitionSampleDataFileInitiationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploadand_download_initiate_upload_single(self, upload_single_initiation_request, **kwargs):  # noqa: E501
        """initiateUploadSingle  # noqa: E501

        Initiates a single file upload capability by creating the relative business object data instance in UPLOADING state and allowing write access to a specific location in S3_MANAGED_LOADING_DOCK storage. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_upload_single(upload_single_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadSingleInitiationRequest upload_single_initiation_request: the information needed to initiate a file upload (required)
        :return: UploadSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploadand_download_initiate_upload_single_with_http_info(upload_single_initiation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.uploadand_download_initiate_upload_single_with_http_info(upload_single_initiation_request, **kwargs)  # noqa: E501
            return data

    def uploadand_download_initiate_upload_single_with_http_info(self, upload_single_initiation_request, **kwargs):  # noqa: E501
        """initiateUploadSingle  # noqa: E501

        Initiates a single file upload capability by creating the relative business object data instance in UPLOADING state and allowing write access to a specific location in S3_MANAGED_LOADING_DOCK storage. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploadand_download_initiate_upload_single_with_http_info(upload_single_initiation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadSingleInitiationRequest upload_single_initiation_request: the information needed to initiate a file upload (required)
        :return: UploadSingleInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['upload_single_initiation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploadand_download_initiate_upload_single" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upload_single_initiation_request' is set
        if ('upload_single_initiation_request' not in local_var_params or
                local_var_params['upload_single_initiation_request'] is None):
            raise ValueError("Missing the required parameter `upload_single_initiation_request` when calling `uploadand_download_initiate_upload_single`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upload_single_initiation_request' in local_var_params:
            body_params = local_var_params['upload_single_initiation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upload/single/initiation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadSingleInitiationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
