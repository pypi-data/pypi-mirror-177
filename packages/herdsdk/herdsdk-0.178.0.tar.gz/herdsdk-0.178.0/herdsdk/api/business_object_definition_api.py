# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from herdsdk.api_client import ApiClient


class BusinessObjectDefinitionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def business_object_definition_create_business_object_definition(self, business_object_definition_create_request, **kwargs):  # noqa: E501
        """createBusinessObjectDefinition  # noqa: E501

        Creates a new business object definition. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_create_business_object_definition(business_object_definition_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectDefinitionCreateRequest business_object_definition_create_request: the information needed to create the business object definition. (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_create_business_object_definition_with_http_info(business_object_definition_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_create_business_object_definition_with_http_info(business_object_definition_create_request, **kwargs)  # noqa: E501
            return data

    def business_object_definition_create_business_object_definition_with_http_info(self, business_object_definition_create_request, **kwargs):  # noqa: E501
        """createBusinessObjectDefinition  # noqa: E501

        Creates a new business object definition. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_create_business_object_definition_with_http_info(business_object_definition_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectDefinitionCreateRequest business_object_definition_create_request: the information needed to create the business object definition. (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['business_object_definition_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_create_business_object_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'business_object_definition_create_request' is set
        if ('business_object_definition_create_request' not in local_var_params or
                local_var_params['business_object_definition_create_request'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_create_request` when calling `business_object_definition_create_business_object_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_definition_create_request' in local_var_params:
            body_params = local_var_params['business_object_definition_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_definition_delete_business_object_definition(self, namespace, business_object_definition_name, **kwargs):  # noqa: E501
        """deleteBusinessObjectDefinition  # noqa: E501

        Deletes an existing business object definition by key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_delete_business_object_definition(namespace, business_object_definition_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_delete_business_object_definition_with_http_info(namespace, business_object_definition_name, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_delete_business_object_definition_with_http_info(namespace, business_object_definition_name, **kwargs)  # noqa: E501
            return data

    def business_object_definition_delete_business_object_definition_with_http_info(self, namespace, business_object_definition_name, **kwargs):  # noqa: E501
        """deleteBusinessObjectDefinition  # noqa: E501

        Deletes an existing business object definition by key. <p>Requires WRITE permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_delete_business_object_definition_with_http_info(namespace, business_object_definition_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_delete_business_object_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_definition_delete_business_object_definition`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_definition_delete_business_object_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitions/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_definition_get_business_object_definition(self, namespace, business_object_definition_name, **kwargs):  # noqa: E501
        """getBusinessObjectDefinition  # noqa: E501

        Gets an existing business object definition by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_get_business_object_definition(namespace, business_object_definition_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param bool include_business_object_definition_update_history:
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_get_business_object_definition_with_http_info(namespace, business_object_definition_name, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_get_business_object_definition_with_http_info(namespace, business_object_definition_name, **kwargs)  # noqa: E501
            return data

    def business_object_definition_get_business_object_definition_with_http_info(self, namespace, business_object_definition_name, **kwargs):  # noqa: E501
        """getBusinessObjectDefinition  # noqa: E501

        Gets an existing business object definition by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_get_business_object_definition_with_http_info(namespace, business_object_definition_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param bool include_business_object_definition_update_history:
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'include_business_object_definition_update_history']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_get_business_object_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_definition_get_business_object_definition`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_definition_get_business_object_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501

        query_params = []
        if 'include_business_object_definition_update_history' in local_var_params:
            query_params.append(('includeBusinessObjectDefinitionUpdateHistory', local_var_params['include_business_object_definition_update_history']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitions/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_definition_get_business_object_definitions(self, **kwargs):  # noqa: E501
        """getBusinessObjectDefinitions  # noqa: E501

        Gets the list of business object definitions that are defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_get_business_object_definitions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BusinessObjectDefinitionKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_get_business_object_definitions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_get_business_object_definitions_with_http_info(**kwargs)  # noqa: E501
            return data

    def business_object_definition_get_business_object_definitions_with_http_info(self, **kwargs):  # noqa: E501
        """getBusinessObjectDefinitions  # noqa: E501

        Gets the list of business object definitions that are defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_get_business_object_definitions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BusinessObjectDefinitionKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_get_business_object_definitions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinitionKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_definition_get_business_object_definitions1(self, namespace, **kwargs):  # noqa: E501
        """getBusinessObjectDefinitions  # noqa: E501

        Gets the list of business object definitions that are defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_get_business_object_definitions1(namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :return: BusinessObjectDefinitionKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_get_business_object_definitions1_with_http_info(namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_get_business_object_definitions1_with_http_info(namespace, **kwargs)  # noqa: E501
            return data

    def business_object_definition_get_business_object_definitions1_with_http_info(self, namespace, **kwargs):  # noqa: E501
        """getBusinessObjectDefinitions  # noqa: E501

        Gets the list of business object definitions that are defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_get_business_object_definitions1_with_http_info(namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :return: BusinessObjectDefinitionKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_get_business_object_definitions1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_definition_get_business_object_definitions1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitions/namespaces/{namespace}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinitionKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_definition_search_business_object_definitions(self, business_object_definition_search_request, **kwargs):  # noqa: E501
        """searchBusinessObjectDefinitions  # noqa: E501

        Searches across all business object definitions that are defined in the system per specified search filters and keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_search_business_object_definitions(business_object_definition_search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectDefinitionSearchRequest business_object_definition_search_request: the information needed to search across the business object definitions (required)
        :param str fields: A comma-separated list of fields to be retrieved with each business object definition entity. Valid options: dataProviderName, shortDescription, displayName
        :return: BusinessObjectDefinitionSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_search_business_object_definitions_with_http_info(business_object_definition_search_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_search_business_object_definitions_with_http_info(business_object_definition_search_request, **kwargs)  # noqa: E501
            return data

    def business_object_definition_search_business_object_definitions_with_http_info(self, business_object_definition_search_request, **kwargs):  # noqa: E501
        """searchBusinessObjectDefinitions  # noqa: E501

        Searches across all business object definitions that are defined in the system per specified search filters and keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_search_business_object_definitions_with_http_info(business_object_definition_search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BusinessObjectDefinitionSearchRequest business_object_definition_search_request: the information needed to search across the business object definitions (required)
        :param str fields: A comma-separated list of fields to be retrieved with each business object definition entity. Valid options: dataProviderName, shortDescription, displayName
        :return: BusinessObjectDefinitionSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['business_object_definition_search_request', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_search_business_object_definitions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'business_object_definition_search_request' is set
        if ('business_object_definition_search_request' not in local_var_params or
                local_var_params['business_object_definition_search_request'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_search_request` when calling `business_object_definition_search_business_object_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_definition_search_request' in local_var_params:
            body_params = local_var_params['business_object_definition_search_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitions/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinitionSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_definition_update_business_object_definition(self, namespace, business_object_definition_name, business_object_definition_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectDefinition  # noqa: E501

        Updates an existing business object definition by key. <p>Requires WRITE permission on namespace</p> <p> If attributes are supplied in the request, this endpoint replaces the entire list of attributes on the business object definition with the contents of the request. Observe this example: <ol> <li>Three attributes present on the existing business object definition.</li> <li>This endpoint is called with a single attribute in the request with an updated value.</li> <li>After this operation the business object definition will have only one attribute – which is probably not the desired outcome.</li> <li>Instead, supply all existing attributes and provide updated values and additional attributes as needed. The only case when an existing attribute should be left out is to remove the attribute.</li> </ol> </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_update_business_object_definition(namespace, business_object_definition_name, business_object_definition_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the name of the business object definition to update (required)
        :param BusinessObjectDefinitionUpdateRequest business_object_definition_update_request: the information needed to update the business object definition (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_update_business_object_definition_with_http_info(namespace, business_object_definition_name, business_object_definition_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_update_business_object_definition_with_http_info(namespace, business_object_definition_name, business_object_definition_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_definition_update_business_object_definition_with_http_info(self, namespace, business_object_definition_name, business_object_definition_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectDefinition  # noqa: E501

        Updates an existing business object definition by key. <p>Requires WRITE permission on namespace</p> <p> If attributes are supplied in the request, this endpoint replaces the entire list of attributes on the business object definition with the contents of the request. Observe this example: <ol> <li>Three attributes present on the existing business object definition.</li> <li>This endpoint is called with a single attribute in the request with an updated value.</li> <li>After this operation the business object definition will have only one attribute – which is probably not the desired outcome.</li> <li>Instead, supply all existing attributes and provide updated values and additional attributes as needed. The only case when an existing attribute should be left out is to remove the attribute.</li> </ol> </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_update_business_object_definition_with_http_info(namespace, business_object_definition_name, business_object_definition_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the name of the business object definition to update (required)
        :param BusinessObjectDefinitionUpdateRequest business_object_definition_update_request: the information needed to update the business object definition (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_definition_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_update_business_object_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_definition_update_business_object_definition`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_definition_update_business_object_definition`")  # noqa: E501
        # verify the required parameter 'business_object_definition_update_request' is set
        if ('business_object_definition_update_request' not in local_var_params or
                local_var_params['business_object_definition_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_update_request` when calling `business_object_definition_update_business_object_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_definition_update_request' in local_var_params:
            body_params = local_var_params['business_object_definition_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitions/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def business_object_definition_update_business_object_definition_descriptive_information(self, namespace, business_object_definition_name, business_object_definition_descriptive_information_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectDefinitionDescriptiveInformation  # noqa: E501

        Updates an existing business object definition descriptive information by key. <p>Requires WRITE or WRITE_DESCRIPTIVE_CONTENT permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_update_business_object_definition_descriptive_information(namespace, business_object_definition_name, business_object_definition_descriptive_information_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the name of the business object definition to update (required)
        :param BusinessObjectDefinitionDescriptiveInformationUpdateRequest business_object_definition_descriptive_information_update_request: the information needed to update the business object definition (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.business_object_definition_update_business_object_definition_descriptive_information_with_http_info(namespace, business_object_definition_name, business_object_definition_descriptive_information_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.business_object_definition_update_business_object_definition_descriptive_information_with_http_info(namespace, business_object_definition_name, business_object_definition_descriptive_information_update_request, **kwargs)  # noqa: E501
            return data

    def business_object_definition_update_business_object_definition_descriptive_information_with_http_info(self, namespace, business_object_definition_name, business_object_definition_descriptive_information_update_request, **kwargs):  # noqa: E501
        """updateBusinessObjectDefinitionDescriptiveInformation  # noqa: E501

        Updates an existing business object definition descriptive information by key. <p>Requires WRITE or WRITE_DESCRIPTIVE_CONTENT permission on namespace</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.business_object_definition_update_business_object_definition_descriptive_information_with_http_info(namespace, business_object_definition_name, business_object_definition_descriptive_information_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the name of the business object definition to update (required)
        :param BusinessObjectDefinitionDescriptiveInformationUpdateRequest business_object_definition_descriptive_information_update_request: the information needed to update the business object definition (required)
        :return: BusinessObjectDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_definition_descriptive_information_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method business_object_definition_update_business_object_definition_descriptive_information" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `business_object_definition_update_business_object_definition_descriptive_information`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `business_object_definition_update_business_object_definition_descriptive_information`")  # noqa: E501
        # verify the required parameter 'business_object_definition_descriptive_information_update_request' is set
        if ('business_object_definition_descriptive_information_update_request' not in local_var_params or
                local_var_params['business_object_definition_descriptive_information_update_request'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_descriptive_information_update_request` when calling `business_object_definition_update_business_object_definition_descriptive_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_object_definition_descriptive_information_update_request' in local_var_params:
            body_params = local_var_params['business_object_definition_descriptive_information_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessObjectDefinitionDescriptiveInformation/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
