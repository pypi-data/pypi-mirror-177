# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from herdsdk.api_client import ApiClient


class ExpectedPartitionValueApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def expected_partition_value_create_expected_partition_values(self, expected_partition_values_create_request, **kwargs):  # noqa: E501
        """createExpectedPartitionValues  # noqa: E501

        Creates a list of expected partition values for an existing partition key group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_create_expected_partition_values(expected_partition_values_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExpectedPartitionValuesCreateRequest expected_partition_values_create_request: the information needed to create the expected partition values (required)
        :return: ExpectedPartitionValuesInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expected_partition_value_create_expected_partition_values_with_http_info(expected_partition_values_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.expected_partition_value_create_expected_partition_values_with_http_info(expected_partition_values_create_request, **kwargs)  # noqa: E501
            return data

    def expected_partition_value_create_expected_partition_values_with_http_info(self, expected_partition_values_create_request, **kwargs):  # noqa: E501
        """createExpectedPartitionValues  # noqa: E501

        Creates a list of expected partition values for an existing partition key group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_create_expected_partition_values_with_http_info(expected_partition_values_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExpectedPartitionValuesCreateRequest expected_partition_values_create_request: the information needed to create the expected partition values (required)
        :return: ExpectedPartitionValuesInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expected_partition_values_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expected_partition_value_create_expected_partition_values" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'expected_partition_values_create_request' is set
        if ('expected_partition_values_create_request' not in local_var_params or
                local_var_params['expected_partition_values_create_request'] is None):
            raise ValueError("Missing the required parameter `expected_partition_values_create_request` when calling `expected_partition_value_create_expected_partition_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'expected_partition_values_create_request' in local_var_params:
            body_params = local_var_params['expected_partition_values_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/expectedPartitionValues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpectedPartitionValuesInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expected_partition_value_delete_expected_partition_values(self, expected_partition_values_delete_request, **kwargs):  # noqa: E501
        """deleteExpectedPartitionValues  # noqa: E501

        Deletes specified expected partition values from an existing partition key group which is identified by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_delete_expected_partition_values(expected_partition_values_delete_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExpectedPartitionValuesDeleteRequest expected_partition_values_delete_request: the information needed to delete the expected partition values (required)
        :return: ExpectedPartitionValuesInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expected_partition_value_delete_expected_partition_values_with_http_info(expected_partition_values_delete_request, **kwargs)  # noqa: E501
        else:
            (data) = self.expected_partition_value_delete_expected_partition_values_with_http_info(expected_partition_values_delete_request, **kwargs)  # noqa: E501
            return data

    def expected_partition_value_delete_expected_partition_values_with_http_info(self, expected_partition_values_delete_request, **kwargs):  # noqa: E501
        """deleteExpectedPartitionValues  # noqa: E501

        Deletes specified expected partition values from an existing partition key group which is identified by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_delete_expected_partition_values_with_http_info(expected_partition_values_delete_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExpectedPartitionValuesDeleteRequest expected_partition_values_delete_request: the information needed to delete the expected partition values (required)
        :return: ExpectedPartitionValuesInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expected_partition_values_delete_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expected_partition_value_delete_expected_partition_values" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'expected_partition_values_delete_request' is set
        if ('expected_partition_values_delete_request' not in local_var_params or
                local_var_params['expected_partition_values_delete_request'] is None):
            raise ValueError("Missing the required parameter `expected_partition_values_delete_request` when calling `expected_partition_value_delete_expected_partition_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'expected_partition_values_delete_request' in local_var_params:
            body_params = local_var_params['expected_partition_values_delete_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/expectedPartitionValues', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpectedPartitionValuesInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expected_partition_value_get_expected_partition_value(self, partition_key_group_name, expected_partition_value, **kwargs):  # noqa: E501
        """getExpectedPartitionValue  # noqa: E501

        Retrieves an existing expected partition value plus/minus an optional offset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_get_expected_partition_value(partition_key_group_name, expected_partition_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partition_key_group_name: the partition key group name (required)
        :param str expected_partition_value: the expected partition value to retrieve plus/minus an optional offset (required)
        :param int offset: the optional positive or negative offset
        :return: ExpectedPartitionValueInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expected_partition_value_get_expected_partition_value_with_http_info(partition_key_group_name, expected_partition_value, **kwargs)  # noqa: E501
        else:
            (data) = self.expected_partition_value_get_expected_partition_value_with_http_info(partition_key_group_name, expected_partition_value, **kwargs)  # noqa: E501
            return data

    def expected_partition_value_get_expected_partition_value_with_http_info(self, partition_key_group_name, expected_partition_value, **kwargs):  # noqa: E501
        """getExpectedPartitionValue  # noqa: E501

        Retrieves an existing expected partition value plus/minus an optional offset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_get_expected_partition_value_with_http_info(partition_key_group_name, expected_partition_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partition_key_group_name: the partition key group name (required)
        :param str expected_partition_value: the expected partition value to retrieve plus/minus an optional offset (required)
        :param int offset: the optional positive or negative offset
        :return: ExpectedPartitionValueInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['partition_key_group_name', 'expected_partition_value', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expected_partition_value_get_expected_partition_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'partition_key_group_name' is set
        if ('partition_key_group_name' not in local_var_params or
                local_var_params['partition_key_group_name'] is None):
            raise ValueError("Missing the required parameter `partition_key_group_name` when calling `expected_partition_value_get_expected_partition_value`")  # noqa: E501
        # verify the required parameter 'expected_partition_value' is set
        if ('expected_partition_value' not in local_var_params or
                local_var_params['expected_partition_value'] is None):
            raise ValueError("Missing the required parameter `expected_partition_value` when calling `expected_partition_value_get_expected_partition_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partition_key_group_name' in local_var_params:
            path_params['partitionKeyGroupName'] = local_var_params['partition_key_group_name']  # noqa: E501
        if 'expected_partition_value' in local_var_params:
            path_params['expectedPartitionValue'] = local_var_params['expected_partition_value']  # noqa: E501

        query_params = []
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/expectedPartitionValues/partitionKeyGroups/{partitionKeyGroupName}/expectedPartitionValues/{expectedPartitionValue}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpectedPartitionValueInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expected_partition_value_get_expected_partition_values(self, partition_key_group_name, **kwargs):  # noqa: E501
        """getExpectedPartitionValues  # noqa: E501

        Retrieves a range of existing expected partition values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_get_expected_partition_values(partition_key_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partition_key_group_name: the partition key group name (required)
        :param str start_expected_partition_value: the start expected partition value for the expected partition value range
        :param str end_expected_partition_value: the end expected partition value for the expected partition value range
        :return: ExpectedPartitionValuesInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expected_partition_value_get_expected_partition_values_with_http_info(partition_key_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.expected_partition_value_get_expected_partition_values_with_http_info(partition_key_group_name, **kwargs)  # noqa: E501
            return data

    def expected_partition_value_get_expected_partition_values_with_http_info(self, partition_key_group_name, **kwargs):  # noqa: E501
        """getExpectedPartitionValues  # noqa: E501

        Retrieves a range of existing expected partition values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expected_partition_value_get_expected_partition_values_with_http_info(partition_key_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partition_key_group_name: the partition key group name (required)
        :param str start_expected_partition_value: the start expected partition value for the expected partition value range
        :param str end_expected_partition_value: the end expected partition value for the expected partition value range
        :return: ExpectedPartitionValuesInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['partition_key_group_name', 'start_expected_partition_value', 'end_expected_partition_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expected_partition_value_get_expected_partition_values" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'partition_key_group_name' is set
        if ('partition_key_group_name' not in local_var_params or
                local_var_params['partition_key_group_name'] is None):
            raise ValueError("Missing the required parameter `partition_key_group_name` when calling `expected_partition_value_get_expected_partition_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partition_key_group_name' in local_var_params:
            path_params['partitionKeyGroupName'] = local_var_params['partition_key_group_name']  # noqa: E501

        query_params = []
        if 'start_expected_partition_value' in local_var_params:
            query_params.append(('startExpectedPartitionValue', local_var_params['start_expected_partition_value']))  # noqa: E501
        if 'end_expected_partition_value' in local_var_params:
            query_params.append(('endExpectedPartitionValue', local_var_params['end_expected_partition_value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/expectedPartitionValues/partitionKeyGroups/{partitionKeyGroupName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpectedPartitionValuesInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
