# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from herdsdk.api_client import ApiClient


class RelationalTableRegistrationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def relational_table_registration_create_relational_table_registration(self, relational_table_registration_create_request, **kwargs):  # noqa: E501
        """createRelationalTableRegistration  # noqa: E501

        Creates relational table registration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.relational_table_registration_create_relational_table_registration(relational_table_registration_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RelationalTableRegistrationCreateRequest relational_table_registration_create_request: relational table registration create request (required)
        :param bool append_to_existing_business_object_definition: boolean flag that determines if the format should be appended to an existing business object definition
        :return: BusinessObjectData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.relational_table_registration_create_relational_table_registration_with_http_info(relational_table_registration_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.relational_table_registration_create_relational_table_registration_with_http_info(relational_table_registration_create_request, **kwargs)  # noqa: E501
            return data

    def relational_table_registration_create_relational_table_registration_with_http_info(self, relational_table_registration_create_request, **kwargs):  # noqa: E501
        """createRelationalTableRegistration  # noqa: E501

        Creates relational table registration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.relational_table_registration_create_relational_table_registration_with_http_info(relational_table_registration_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RelationalTableRegistrationCreateRequest relational_table_registration_create_request: relational table registration create request (required)
        :param bool append_to_existing_business_object_definition: boolean flag that determines if the format should be appended to an existing business object definition
        :return: BusinessObjectData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['relational_table_registration_create_request', 'append_to_existing_business_object_definition']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method relational_table_registration_create_relational_table_registration" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'relational_table_registration_create_request' is set
        if ('relational_table_registration_create_request' not in local_var_params or
                local_var_params['relational_table_registration_create_request'] is None):
            raise ValueError("Missing the required parameter `relational_table_registration_create_request` when calling `relational_table_registration_create_relational_table_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'append_to_existing_business_object_definition' in local_var_params:
            query_params.append(('appendToExistingBusinessObjectDefinition', local_var_params['append_to_existing_business_object_definition']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'relational_table_registration_create_request' in local_var_params:
            body_params = local_var_params['relational_table_registration_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relationalTableRegistrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BusinessObjectData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def relational_table_registration_delete_relational_table_registration(self, namespace, business_object_definition_name, business_object_format_usage, **kwargs):  # noqa: E501
        """deleteRelationalTableRegistration  # noqa: E501

        Delete a relational table registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.relational_table_registration_delete_relational_table_registration(namespace, business_object_definition_name, business_object_format_usage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :return: RelationalTableRegistrationDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.relational_table_registration_delete_relational_table_registration_with_http_info(namespace, business_object_definition_name, business_object_format_usage, **kwargs)  # noqa: E501
        else:
            (data) = self.relational_table_registration_delete_relational_table_registration_with_http_info(namespace, business_object_definition_name, business_object_format_usage, **kwargs)  # noqa: E501
            return data

    def relational_table_registration_delete_relational_table_registration_with_http_info(self, namespace, business_object_definition_name, business_object_format_usage, **kwargs):  # noqa: E501
        """deleteRelationalTableRegistration  # noqa: E501

        Delete a relational table registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.relational_table_registration_delete_relational_table_registration_with_http_info(namespace, business_object_definition_name, business_object_format_usage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str namespace: the namespace code (required)
        :param str business_object_definition_name: the business object definition name (required)
        :param str business_object_format_usage: the business object format usage (required)
        :return: RelationalTableRegistrationDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['namespace', 'business_object_definition_name', 'business_object_format_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method relational_table_registration_delete_relational_table_registration" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'namespace' is set
        if ('namespace' not in local_var_params or
                local_var_params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `relational_table_registration_delete_relational_table_registration`")  # noqa: E501
        # verify the required parameter 'business_object_definition_name' is set
        if ('business_object_definition_name' not in local_var_params or
                local_var_params['business_object_definition_name'] is None):
            raise ValueError("Missing the required parameter `business_object_definition_name` when calling `relational_table_registration_delete_relational_table_registration`")  # noqa: E501
        # verify the required parameter 'business_object_format_usage' is set
        if ('business_object_format_usage' not in local_var_params or
                local_var_params['business_object_format_usage'] is None):
            raise ValueError("Missing the required parameter `business_object_format_usage` when calling `relational_table_registration_delete_relational_table_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'namespace' in local_var_params:
            path_params['namespace'] = local_var_params['namespace']  # noqa: E501
        if 'business_object_definition_name' in local_var_params:
            path_params['businessObjectDefinitionName'] = local_var_params['business_object_definition_name']  # noqa: E501
        if 'business_object_format_usage' in local_var_params:
            path_params['businessObjectFormatUsage'] = local_var_params['business_object_format_usage']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relationalTableRegistrations/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelationalTableRegistrationDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
