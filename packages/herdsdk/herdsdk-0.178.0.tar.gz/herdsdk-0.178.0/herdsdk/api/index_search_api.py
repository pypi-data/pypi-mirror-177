# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from herdsdk.api_client import ApiClient


class IndexSearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def index_search_index_search(self, index_search_request, **kwargs):  # noqa: E501
        """indexSearch  # noqa: E501

        The index search POST method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_search_index_search(index_search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IndexSearchRequest index_search_request: the index search request (required)
        :param str fields: the set of fields that are to be returned in the index search response (accepts: displayname and shortdescription)
        :param str match: the set of match fields that the search will be restricted to (accepts: column)
        :return: IndexSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_search_index_search_with_http_info(index_search_request, **kwargs)  # noqa: E501
        else:
            (data) = self.index_search_index_search_with_http_info(index_search_request, **kwargs)  # noqa: E501
            return data

    def index_search_index_search_with_http_info(self, index_search_request, **kwargs):  # noqa: E501
        """indexSearch  # noqa: E501

        The index search POST method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_search_index_search_with_http_info(index_search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IndexSearchRequest index_search_request: the index search request (required)
        :param str fields: the set of fields that are to be returned in the index search response (accepts: displayname and shortdescription)
        :param str match: the set of match fields that the search will be restricted to (accepts: column)
        :return: IndexSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['index_search_request', 'fields', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_search_index_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'index_search_request' is set
        if ('index_search_request' not in local_var_params or
                local_var_params['index_search_request'] is None):
            raise ValueError("Missing the required parameter `index_search_request` when calling `index_search_index_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'match' in local_var_params:
            query_params.append(('match', local_var_params['match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'index_search_request' in local_var_params:
            body_params = local_var_params['index_search_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'oauthAuth']  # noqa: E501

        return self.api_client.call_api(
            '/indexSearch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
