# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StorageFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_path': 'str',
        'file_size_bytes': 'int',
        'row_count': 'int'
    }

    attribute_map = {
        'file_path': 'filePath',
        'file_size_bytes': 'fileSizeBytes',
        'row_count': 'rowCount'
    }

    def __init__(self, file_path=None, file_size_bytes=None, row_count=None):  # noqa: E501
        """StorageFile - a model defined in OpenAPI"""  # noqa: E501

        self._file_path = None
        self._file_size_bytes = None
        self._row_count = None
        self.discriminator = None

        self.file_path = file_path
        if file_size_bytes is not None:
            self.file_size_bytes = file_size_bytes
        if row_count is not None:
            self.row_count = row_count

    @property
    def file_path(self):
        """Gets the file_path of this StorageFile.  # noqa: E501

        The fully qualified file path to the data. When Storage Directory is specified, all Storage File paths should start with the                   Storage Directory path                  # noqa: E501

        :return: The file_path of this StorageFile.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this StorageFile.

        The fully qualified file path to the data. When Storage Directory is specified, all Storage File paths should start with the                   Storage Directory path                  # noqa: E501

        :param file_path: The file_path of this StorageFile.  # noqa: E501
        :type: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    @property
    def file_size_bytes(self):
        """Gets the file_size_bytes of this StorageFile.  # noqa: E501

        The file size in bytes  # noqa: E501

        :return: The file_size_bytes of this StorageFile.  # noqa: E501
        :rtype: int
        """
        return self._file_size_bytes

    @file_size_bytes.setter
    def file_size_bytes(self, file_size_bytes):
        """Sets the file_size_bytes of this StorageFile.

        The file size in bytes  # noqa: E501

        :param file_size_bytes: The file_size_bytes of this StorageFile.  # noqa: E501
        :type: int
        """

        self._file_size_bytes = file_size_bytes

    @property
    def row_count(self):
        """Gets the row_count of this StorageFile.  # noqa: E501

        The number of lines in the file  # noqa: E501

        :return: The row_count of this StorageFile.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this StorageFile.

        The number of lines in the file  # noqa: E501

        :param row_count: The row_count of this StorageFile.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
