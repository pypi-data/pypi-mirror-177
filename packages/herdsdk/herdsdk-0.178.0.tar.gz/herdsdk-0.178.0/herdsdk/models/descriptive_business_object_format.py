# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DescriptiveBusinessObjectFormat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'business_object_format_usage': 'str',
        'business_object_format_file_type': 'str',
        'business_object_format_version': 'int'
    }

    attribute_map = {
        'business_object_format_usage': 'businessObjectFormatUsage',
        'business_object_format_file_type': 'businessObjectFormatFileType',
        'business_object_format_version': 'businessObjectFormatVersion'
    }

    def __init__(self, business_object_format_usage=None, business_object_format_file_type=None, business_object_format_version=None):  # noqa: E501
        """DescriptiveBusinessObjectFormat - a model defined in OpenAPI"""  # noqa: E501

        self._business_object_format_usage = None
        self._business_object_format_file_type = None
        self._business_object_format_version = None
        self.discriminator = None

        self.business_object_format_usage = business_object_format_usage
        self.business_object_format_file_type = business_object_format_file_type
        if business_object_format_version is not None:
            self.business_object_format_version = business_object_format_version

    @property
    def business_object_format_usage(self):
        """Gets the business_object_format_usage of this DescriptiveBusinessObjectFormat.  # noqa: E501

        The Usage of this Business Object Format - a string describing how this format is used. Often used as a label for the Business                   Object Format                  # noqa: E501

        :return: The business_object_format_usage of this DescriptiveBusinessObjectFormat.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_usage

    @business_object_format_usage.setter
    def business_object_format_usage(self, business_object_format_usage):
        """Sets the business_object_format_usage of this DescriptiveBusinessObjectFormat.

        The Usage of this Business Object Format - a string describing how this format is used. Often used as a label for the Business                   Object Format                  # noqa: E501

        :param business_object_format_usage: The business_object_format_usage of this DescriptiveBusinessObjectFormat.  # noqa: E501
        :type: str
        """
        if business_object_format_usage is None:
            raise ValueError("Invalid value for `business_object_format_usage`, must not be `None`")  # noqa: E501

        self._business_object_format_usage = business_object_format_usage

    @property
    def business_object_format_file_type(self):
        """Gets the business_object_format_file_type of this DescriptiveBusinessObjectFormat.  # noqa: E501

        The File type for this Business Object Format  # noqa: E501

        :return: The business_object_format_file_type of this DescriptiveBusinessObjectFormat.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_file_type

    @business_object_format_file_type.setter
    def business_object_format_file_type(self, business_object_format_file_type):
        """Sets the business_object_format_file_type of this DescriptiveBusinessObjectFormat.

        The File type for this Business Object Format  # noqa: E501

        :param business_object_format_file_type: The business_object_format_file_type of this DescriptiveBusinessObjectFormat.  # noqa: E501
        :type: str
        """
        if business_object_format_file_type is None:
            raise ValueError("Invalid value for `business_object_format_file_type`, must not be `None`")  # noqa: E501

        self._business_object_format_file_type = business_object_format_file_type

    @property
    def business_object_format_version(self):
        """Gets the business_object_format_version of this DescriptiveBusinessObjectFormat.  # noqa: E501

        The numeric version of a Business Object Format. Each time a format is registered, the new version will be the previous version                   + 1                  # noqa: E501

        :return: The business_object_format_version of this DescriptiveBusinessObjectFormat.  # noqa: E501
        :rtype: int
        """
        return self._business_object_format_version

    @business_object_format_version.setter
    def business_object_format_version(self, business_object_format_version):
        """Sets the business_object_format_version of this DescriptiveBusinessObjectFormat.

        The numeric version of a Business Object Format. Each time a format is registered, the new version will be the previous version                   + 1                  # noqa: E501

        :param business_object_format_version: The business_object_format_version of this DescriptiveBusinessObjectFormat.  # noqa: E501
        :type: int
        """

        self._business_object_format_version = business_object_format_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescriptiveBusinessObjectFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
