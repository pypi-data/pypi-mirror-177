# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RegistrationDateRangeFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_registration_date': 'datetime',
        'end_registration_date': 'datetime'
    }

    attribute_map = {
        'start_registration_date': 'startRegistrationDate',
        'end_registration_date': 'endRegistrationDate'
    }

    def __init__(self, start_registration_date=None, end_registration_date=None):  # noqa: E501
        """RegistrationDateRangeFilter - a model defined in OpenAPI"""  # noqa: E501

        self._start_registration_date = None
        self._end_registration_date = None
        self.discriminator = None

        if start_registration_date is not None:
            self.start_registration_date = start_registration_date
        if end_registration_date is not None:
            self.end_registration_date = end_registration_date

    @property
    def start_registration_date(self):
        """Gets the start_registration_date of this RegistrationDateRangeFilter.  # noqa: E501

                           Business object data registration start datetime. The following formats are supported:                   \"yyyy-MM-dd\" eg. 2018-01-21                   \"yyyy-MM-dd'T'HH:mm\" eg. 2015-12-25T00:01                   \"yyyy-MM-dd'T'HH:mmZ\" eg. 2015-12-25T00:01+04:00                   \"yyyy-MM-dd'T'HH:mm:ss\" eg. 2018-02-03T10:00:02                   \"yyyy-MM-dd'T'HH:mm:ssZ\" eg. 2018-02-03T10:00:02+04:00                   \"yyyy-MM-dd HH:mm:ss\" eg. 2018-02-03 10:00:02                   \"yyyy-MM-dd HH:mm:ssZ\" eg. 2018-03-03 10:00:02+05:30                  # noqa: E501

        :return: The start_registration_date of this RegistrationDateRangeFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._start_registration_date

    @start_registration_date.setter
    def start_registration_date(self, start_registration_date):
        """Sets the start_registration_date of this RegistrationDateRangeFilter.

                           Business object data registration start datetime. The following formats are supported:                   \"yyyy-MM-dd\" eg. 2018-01-21                   \"yyyy-MM-dd'T'HH:mm\" eg. 2015-12-25T00:01                   \"yyyy-MM-dd'T'HH:mmZ\" eg. 2015-12-25T00:01+04:00                   \"yyyy-MM-dd'T'HH:mm:ss\" eg. 2018-02-03T10:00:02                   \"yyyy-MM-dd'T'HH:mm:ssZ\" eg. 2018-02-03T10:00:02+04:00                   \"yyyy-MM-dd HH:mm:ss\" eg. 2018-02-03 10:00:02                   \"yyyy-MM-dd HH:mm:ssZ\" eg. 2018-03-03 10:00:02+05:30                  # noqa: E501

        :param start_registration_date: The start_registration_date of this RegistrationDateRangeFilter.  # noqa: E501
        :type: datetime
        """

        self._start_registration_date = start_registration_date

    @property
    def end_registration_date(self):
        """Gets the end_registration_date of this RegistrationDateRangeFilter.  # noqa: E501

                           Business object data registration end datetime. The following formats are supported:                   \"yyyy-MM-dd\" eg. 2018-01-21                   \"yyyy-MM-dd'T'HH:mm\" eg. 2015-12-25T00:01                   \"yyyy-MM-dd'T'HH:mmZ\" eg. 2015-12-25T00:01+04:00                   \"yyyy-MM-dd'T'HH:mm:ss\" eg. 2018-02-03T10:00:02                   \"yyyy-MM-dd'T'HH:mm:ssZ\" eg. 2018-02-03T10:00:02+04:00                   \"yyyy-MM-dd HH:mm:ss\" eg. 2018-02-03 10:00:02                   \"yyyy-MM-dd HH:mm:ssZ\" eg. 2018-03-03 10:00:02+05:30                  # noqa: E501

        :return: The end_registration_date of this RegistrationDateRangeFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._end_registration_date

    @end_registration_date.setter
    def end_registration_date(self, end_registration_date):
        """Sets the end_registration_date of this RegistrationDateRangeFilter.

                           Business object data registration end datetime. The following formats are supported:                   \"yyyy-MM-dd\" eg. 2018-01-21                   \"yyyy-MM-dd'T'HH:mm\" eg. 2015-12-25T00:01                   \"yyyy-MM-dd'T'HH:mmZ\" eg. 2015-12-25T00:01+04:00                   \"yyyy-MM-dd'T'HH:mm:ss\" eg. 2018-02-03T10:00:02                   \"yyyy-MM-dd'T'HH:mm:ssZ\" eg. 2018-02-03T10:00:02+04:00                   \"yyyy-MM-dd HH:mm:ss\" eg. 2018-02-03 10:00:02                   \"yyyy-MM-dd HH:mm:ssZ\" eg. 2018-03-03 10:00:02+05:30                  # noqa: E501

        :param end_registration_date: The end_registration_date of this RegistrationDateRangeFilter.  # noqa: E501
        :type: datetime
        """

        self._end_registration_date = end_registration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationDateRangeFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
