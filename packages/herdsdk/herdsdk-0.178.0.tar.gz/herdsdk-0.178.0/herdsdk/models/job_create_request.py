# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JobCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'job_name': 'str',
        'parameters': 'list[Parameter]',
        's3_properties_location': 'S3PropertiesLocation'
    }

    attribute_map = {
        'namespace': 'namespace',
        'job_name': 'jobName',
        'parameters': 'parameters',
        's3_properties_location': 's3PropertiesLocation'
    }

    def __init__(self, namespace=None, job_name=None, parameters=None, s3_properties_location=None):  # noqa: E501
        """JobCreateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._job_name = None
        self._parameters = None
        self._s3_properties_location = None
        self.discriminator = None

        self.namespace = namespace
        self.job_name = job_name
        if parameters is not None:
            self.parameters = parameters
        if s3_properties_location is not None:
            self.s3_properties_location = s3_properties_location

    @property
    def namespace(self):
        """Gets the namespace of this JobCreateRequest.  # noqa: E501

        The namespace of the job  # noqa: E501

        :return: The namespace of this JobCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this JobCreateRequest.

        The namespace of the job  # noqa: E501

        :param namespace: The namespace of this JobCreateRequest.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def job_name(self):
        """Gets the job_name of this JobCreateRequest.  # noqa: E501

        The name of the job  # noqa: E501

        :return: The job_name of this JobCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this JobCreateRequest.

        The name of the job  # noqa: E501

        :param job_name: The job_name of this JobCreateRequest.  # noqa: E501
        :type: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")  # noqa: E501

        self._job_name = job_name

    @property
    def parameters(self):
        """Gets the parameters of this JobCreateRequest.  # noqa: E501

        List of key/value pairs that will be made available to the job when it is executed. These parameters will override any                   parameters defined as                   part of the job definition                  # noqa: E501

        :return: The parameters of this JobCreateRequest.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this JobCreateRequest.

        List of key/value pairs that will be made available to the job when it is executed. These parameters will override any                   parameters defined as                   part of the job definition                  # noqa: E501

        :param parameters: The parameters of this JobCreateRequest.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    @property
    def s3_properties_location(self):
        """Gets the s3_properties_location of this JobCreateRequest.  # noqa: E501


        :return: The s3_properties_location of this JobCreateRequest.  # noqa: E501
        :rtype: S3PropertiesLocation
        """
        return self._s3_properties_location

    @s3_properties_location.setter
    def s3_properties_location(self, s3_properties_location):
        """Sets the s3_properties_location of this JobCreateRequest.


        :param s3_properties_location: The s3_properties_location of this JobCreateRequest.  # noqa: E501
        :type: S3PropertiesLocation
        """

        self._s3_properties_location = s3_properties_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
