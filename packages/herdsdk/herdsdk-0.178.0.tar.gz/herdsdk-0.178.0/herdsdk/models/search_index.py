# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SearchIndex(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'search_index_key': 'SearchIndexKey',
        'search_index_type': 'str',
        'search_index_status': 'str',
        'active': 'bool',
        'search_index_statistics': 'SearchIndexStatistics',
        'created_by_user_id': 'str',
        'created_on': 'datetime',
        'last_updated_on': 'datetime'
    }

    attribute_map = {
        'search_index_key': 'searchIndexKey',
        'search_index_type': 'searchIndexType',
        'search_index_status': 'searchIndexStatus',
        'active': 'active',
        'search_index_statistics': 'searchIndexStatistics',
        'created_by_user_id': 'createdByUserId',
        'created_on': 'createdOn',
        'last_updated_on': 'lastUpdatedOn'
    }

    def __init__(self, search_index_key=None, search_index_type=None, search_index_status=None, active=None, search_index_statistics=None, created_by_user_id=None, created_on=None, last_updated_on=None):  # noqa: E501
        """SearchIndex - a model defined in OpenAPI"""  # noqa: E501

        self._search_index_key = None
        self._search_index_type = None
        self._search_index_status = None
        self._active = None
        self._search_index_statistics = None
        self._created_by_user_id = None
        self._created_on = None
        self._last_updated_on = None
        self.discriminator = None

        self.search_index_key = search_index_key
        self.search_index_type = search_index_type
        self.search_index_status = search_index_status
        if active is not None:
            self.active = active
        if search_index_statistics is not None:
            self.search_index_statistics = search_index_statistics
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if created_on is not None:
            self.created_on = created_on
        if last_updated_on is not None:
            self.last_updated_on = last_updated_on

    @property
    def search_index_key(self):
        """Gets the search_index_key of this SearchIndex.  # noqa: E501


        :return: The search_index_key of this SearchIndex.  # noqa: E501
        :rtype: SearchIndexKey
        """
        return self._search_index_key

    @search_index_key.setter
    def search_index_key(self, search_index_key):
        """Sets the search_index_key of this SearchIndex.


        :param search_index_key: The search_index_key of this SearchIndex.  # noqa: E501
        :type: SearchIndexKey
        """
        if search_index_key is None:
            raise ValueError("Invalid value for `search_index_key`, must not be `None`")  # noqa: E501

        self._search_index_key = search_index_key

    @property
    def search_index_type(self):
        """Gets the search_index_type of this SearchIndex.  # noqa: E501

        The type of this Search Index. One of the following values: BUS_OBJCT_DFNTN, TAG  # noqa: E501

        :return: The search_index_type of this SearchIndex.  # noqa: E501
        :rtype: str
        """
        return self._search_index_type

    @search_index_type.setter
    def search_index_type(self, search_index_type):
        """Sets the search_index_type of this SearchIndex.

        The type of this Search Index. One of the following values: BUS_OBJCT_DFNTN, TAG  # noqa: E501

        :param search_index_type: The search_index_type of this SearchIndex.  # noqa: E501
        :type: str
        """
        if search_index_type is None:
            raise ValueError("Invalid value for `search_index_type`, must not be `None`")  # noqa: E501

        self._search_index_type = search_index_type

    @property
    def search_index_status(self):
        """Gets the search_index_status of this SearchIndex.  # noqa: E501

        The status of this Search Index. One of the following values: BUILDING, READY  # noqa: E501

        :return: The search_index_status of this SearchIndex.  # noqa: E501
        :rtype: str
        """
        return self._search_index_status

    @search_index_status.setter
    def search_index_status(self, search_index_status):
        """Sets the search_index_status of this SearchIndex.

        The status of this Search Index. One of the following values: BUILDING, READY  # noqa: E501

        :param search_index_status: The search_index_status of this SearchIndex.  # noqa: E501
        :type: str
        """
        if search_index_status is None:
            raise ValueError("Invalid value for `search_index_status`, must not be `None`")  # noqa: E501

        self._search_index_status = search_index_status

    @property
    def active(self):
        """Gets the active of this SearchIndex.  # noqa: E501

        A flag to indicate if the index is active or not. If the index is active it will be included in the search results.                  # noqa: E501

        :return: The active of this SearchIndex.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SearchIndex.

        A flag to indicate if the index is active or not. If the index is active it will be included in the search results.                  # noqa: E501

        :param active: The active of this SearchIndex.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def search_index_statistics(self):
        """Gets the search_index_statistics of this SearchIndex.  # noqa: E501


        :return: The search_index_statistics of this SearchIndex.  # noqa: E501
        :rtype: SearchIndexStatistics
        """
        return self._search_index_statistics

    @search_index_statistics.setter
    def search_index_statistics(self, search_index_statistics):
        """Sets the search_index_statistics of this SearchIndex.


        :param search_index_statistics: The search_index_statistics of this SearchIndex.  # noqa: E501
        :type: SearchIndexStatistics
        """

        self._search_index_statistics = search_index_statistics

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this SearchIndex.  # noqa: E501

        The User ID of the user who created this Search Index  # noqa: E501

        :return: The created_by_user_id of this SearchIndex.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this SearchIndex.

        The User ID of the user who created this Search Index  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this SearchIndex.  # noqa: E501
        :type: str
        """

        self._created_by_user_id = created_by_user_id

    @property
    def created_on(self):
        """Gets the created_on of this SearchIndex.  # noqa: E501

        The timestamp when this Search Index was created on  # noqa: E501

        :return: The created_on of this SearchIndex.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SearchIndex.

        The timestamp when this Search Index was created on  # noqa: E501

        :param created_on: The created_on of this SearchIndex.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def last_updated_on(self):
        """Gets the last_updated_on of this SearchIndex.  # noqa: E501

        The timestamp when this Search Index was last updated on  # noqa: E501

        :return: The last_updated_on of this SearchIndex.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """Sets the last_updated_on of this SearchIndex.

        The timestamp when this Search Index was last updated on  # noqa: E501

        :param last_updated_on: The last_updated_on of this SearchIndex.  # noqa: E501
        :type: datetime
        """

        self._last_updated_on = last_updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchIndex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
