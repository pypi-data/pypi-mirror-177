# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SearchIndexStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index_creation_date': 'datetime',
        'index_number_of_active_documents': 'int',
        'index_number_of_deleted_documents': 'int',
        'index_uuid': 'str',
        'index_count': 'int'
    }

    attribute_map = {
        'index_creation_date': 'indexCreationDate',
        'index_number_of_active_documents': 'indexNumberOfActiveDocuments',
        'index_number_of_deleted_documents': 'indexNumberOfDeletedDocuments',
        'index_uuid': 'indexUuid',
        'index_count': 'indexCount'
    }

    def __init__(self, index_creation_date=None, index_number_of_active_documents=None, index_number_of_deleted_documents=None, index_uuid=None, index_count=None):  # noqa: E501
        """SearchIndexStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._index_creation_date = None
        self._index_number_of_active_documents = None
        self._index_number_of_deleted_documents = None
        self._index_uuid = None
        self._index_count = None
        self.discriminator = None

        if index_creation_date is not None:
            self.index_creation_date = index_creation_date
        if index_number_of_active_documents is not None:
            self.index_number_of_active_documents = index_number_of_active_documents
        if index_number_of_deleted_documents is not None:
            self.index_number_of_deleted_documents = index_number_of_deleted_documents
        if index_uuid is not None:
            self.index_uuid = index_uuid
        if index_count is not None:
            self.index_count = index_count

    @property
    def index_creation_date(self):
        """Gets the index_creation_date of this SearchIndexStatistics.  # noqa: E501

        The index creation date  # noqa: E501

        :return: The index_creation_date of this SearchIndexStatistics.  # noqa: E501
        :rtype: datetime
        """
        return self._index_creation_date

    @index_creation_date.setter
    def index_creation_date(self, index_creation_date):
        """Sets the index_creation_date of this SearchIndexStatistics.

        The index creation date  # noqa: E501

        :param index_creation_date: The index_creation_date of this SearchIndexStatistics.  # noqa: E501
        :type: datetime
        """

        self._index_creation_date = index_creation_date

    @property
    def index_number_of_active_documents(self):
        """Gets the index_number_of_active_documents of this SearchIndexStatistics.  # noqa: E501

        The number of active documents in this index  # noqa: E501

        :return: The index_number_of_active_documents of this SearchIndexStatistics.  # noqa: E501
        :rtype: int
        """
        return self._index_number_of_active_documents

    @index_number_of_active_documents.setter
    def index_number_of_active_documents(self, index_number_of_active_documents):
        """Sets the index_number_of_active_documents of this SearchIndexStatistics.

        The number of active documents in this index  # noqa: E501

        :param index_number_of_active_documents: The index_number_of_active_documents of this SearchIndexStatistics.  # noqa: E501
        :type: int
        """

        self._index_number_of_active_documents = index_number_of_active_documents

    @property
    def index_number_of_deleted_documents(self):
        """Gets the index_number_of_deleted_documents of this SearchIndexStatistics.  # noqa: E501

        The number of deleted documents in this index  # noqa: E501

        :return: The index_number_of_deleted_documents of this SearchIndexStatistics.  # noqa: E501
        :rtype: int
        """
        return self._index_number_of_deleted_documents

    @index_number_of_deleted_documents.setter
    def index_number_of_deleted_documents(self, index_number_of_deleted_documents):
        """Sets the index_number_of_deleted_documents of this SearchIndexStatistics.

        The number of deleted documents in this index  # noqa: E501

        :param index_number_of_deleted_documents: The index_number_of_deleted_documents of this SearchIndexStatistics.  # noqa: E501
        :type: int
        """

        self._index_number_of_deleted_documents = index_number_of_deleted_documents

    @property
    def index_uuid(self):
        """Gets the index_uuid of this SearchIndexStatistics.  # noqa: E501

        The UUID of the index  # noqa: E501

        :return: The index_uuid of this SearchIndexStatistics.  # noqa: E501
        :rtype: str
        """
        return self._index_uuid

    @index_uuid.setter
    def index_uuid(self, index_uuid):
        """Sets the index_uuid of this SearchIndexStatistics.

        The UUID of the index  # noqa: E501

        :param index_uuid: The index_uuid of this SearchIndexStatistics.  # noqa: E501
        :type: str
        """

        self._index_uuid = index_uuid

    @property
    def index_count(self):
        """Gets the index_count of this SearchIndexStatistics.  # noqa: E501

        The count of the index size from count query  # noqa: E501

        :return: The index_count of this SearchIndexStatistics.  # noqa: E501
        :rtype: int
        """
        return self._index_count

    @index_count.setter
    def index_count(self, index_count):
        """Sets the index_count of this SearchIndexStatistics.

        The count of the index size from count query  # noqa: E501

        :param index_count: The index_count of this SearchIndexStatistics.  # noqa: E501
        :type: int
        """

        self._index_count = index_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchIndexStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
