# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrClusterEbsBlockDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'volume_specification': 'EmrClusterVolumeSpecification',
        'device': 'str',
        'volumes_per_instance': 'int'
    }

    attribute_map = {
        'volume_specification': 'volumeSpecification',
        'device': 'device',
        'volumes_per_instance': 'volumesPerInstance'
    }

    def __init__(self, volume_specification=None, device=None, volumes_per_instance=None):  # noqa: E501
        """EmrClusterEbsBlockDevice - a model defined in OpenAPI"""  # noqa: E501

        self._volume_specification = None
        self._device = None
        self._volumes_per_instance = None
        self.discriminator = None

        if volume_specification is not None:
            self.volume_specification = volume_specification
        if device is not None:
            self.device = device
        if volumes_per_instance is not None:
            self.volumes_per_instance = volumes_per_instance

    @property
    def volume_specification(self):
        """Gets the volume_specification of this EmrClusterEbsBlockDevice.  # noqa: E501


        :return: The volume_specification of this EmrClusterEbsBlockDevice.  # noqa: E501
        :rtype: EmrClusterVolumeSpecification
        """
        return self._volume_specification

    @volume_specification.setter
    def volume_specification(self, volume_specification):
        """Sets the volume_specification of this EmrClusterEbsBlockDevice.


        :param volume_specification: The volume_specification of this EmrClusterEbsBlockDevice.  # noqa: E501
        :type: EmrClusterVolumeSpecification
        """

        self._volume_specification = volume_specification

    @property
    def device(self):
        """Gets the device of this EmrClusterEbsBlockDevice.  # noqa: E501

        The device name that is exposed to the instance, such as /dev/sdh.                  # noqa: E501

        :return: The device of this EmrClusterEbsBlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this EmrClusterEbsBlockDevice.

        The device name that is exposed to the instance, such as /dev/sdh.                  # noqa: E501

        :param device: The device of this EmrClusterEbsBlockDevice.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def volumes_per_instance(self):
        """Gets the volumes_per_instance of this EmrClusterEbsBlockDevice.  # noqa: E501

        Number of EBS volumes with a specific volume configuration that will be associated with every instance in the instance group                  # noqa: E501

        :return: The volumes_per_instance of this EmrClusterEbsBlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._volumes_per_instance

    @volumes_per_instance.setter
    def volumes_per_instance(self, volumes_per_instance):
        """Sets the volumes_per_instance of this EmrClusterEbsBlockDevice.

        Number of EBS volumes with a specific volume configuration that will be associated with every instance in the instance group                  # noqa: E501

        :param volumes_per_instance: The volumes_per_instance of this EmrClusterEbsBlockDevice.  # noqa: E501
        :type: int
        """

        self._volumes_per_instance = volumes_per_instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrClusterEbsBlockDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
