# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IndexSearchRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'search_term': 'str',
        'index_search_filters': 'list[IndexSearchFilter]',
        'facet_fields': 'list[str]',
        'enable_hit_highlighting': 'bool'
    }

    attribute_map = {
        'search_term': 'searchTerm',
        'index_search_filters': 'indexSearchFilters',
        'facet_fields': 'facetFields',
        'enable_hit_highlighting': 'enableHitHighlighting'
    }

    def __init__(self, search_term=None, index_search_filters=None, facet_fields=None, enable_hit_highlighting=None):  # noqa: E501
        """IndexSearchRequest - a model defined in OpenAPI"""  # noqa: E501

        self._search_term = None
        self._index_search_filters = None
        self._facet_fields = None
        self._enable_hit_highlighting = None
        self.discriminator = None

        if search_term is not None:
            self.search_term = search_term
        if index_search_filters is not None:
            self.index_search_filters = index_search_filters
        if facet_fields is not None:
            self.facet_fields = facet_fields
        if enable_hit_highlighting is not None:
            self.enable_hit_highlighting = enable_hit_highlighting

    @property
    def search_term(self):
        """Gets the search_term of this IndexSearchRequest.  # noqa: E501

        The search term upon which to search  # noqa: E501

        :return: The search_term of this IndexSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this IndexSearchRequest.

        The search term upon which to search  # noqa: E501

        :param search_term: The search_term of this IndexSearchRequest.  # noqa: E501
        :type: str
        """

        self._search_term = search_term

    @property
    def index_search_filters(self):
        """Gets the index_search_filters of this IndexSearchRequest.  # noqa: E501

        A list of index search filters. Multiple filters are supported which are AND-ed  # noqa: E501

        :return: The index_search_filters of this IndexSearchRequest.  # noqa: E501
        :rtype: list[IndexSearchFilter]
        """
        return self._index_search_filters

    @index_search_filters.setter
    def index_search_filters(self, index_search_filters):
        """Sets the index_search_filters of this IndexSearchRequest.

        A list of index search filters. Multiple filters are supported which are AND-ed  # noqa: E501

        :param index_search_filters: The index_search_filters of this IndexSearchRequest.  # noqa: E501
        :type: list[IndexSearchFilter]
        """

        self._index_search_filters = index_search_filters

    @property
    def facet_fields(self):
        """Gets the facet_fields of this IndexSearchRequest.  # noqa: E501

        A list of Facet Fields to be included with the response. Only Tag and ResultType facet information is supported                  # noqa: E501

        :return: The facet_fields of this IndexSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._facet_fields

    @facet_fields.setter
    def facet_fields(self, facet_fields):
        """Sets the facet_fields of this IndexSearchRequest.

        A list of Facet Fields to be included with the response. Only Tag and ResultType facet information is supported                  # noqa: E501

        :param facet_fields: The facet_fields of this IndexSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._facet_fields = facet_fields

    @property
    def enable_hit_highlighting(self):
        """Gets the enable_hit_highlighting of this IndexSearchRequest.  # noqa: E501

        An optional boolean flag that specifies if highlighting should be enabled on the matched terms or not                  # noqa: E501

        :return: The enable_hit_highlighting of this IndexSearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_hit_highlighting

    @enable_hit_highlighting.setter
    def enable_hit_highlighting(self, enable_hit_highlighting):
        """Sets the enable_hit_highlighting of this IndexSearchRequest.

        An optional boolean flag that specifies if highlighting should be enabled on the matched terms or not                  # noqa: E501

        :param enable_hit_highlighting: The enable_hit_highlighting of this IndexSearchRequest.  # noqa: E501
        :type: bool
        """

        self._enable_hit_highlighting = enable_hit_highlighting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
