# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadSingleInitiationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_business_object_data': 'BusinessObjectData',
        'target_business_object_data': 'BusinessObjectData',
        'file': 'file',
        'uuid': 'str',
        'aws_access_key': 'str',
        'aws_secret_key': 'str',
        'aws_session_token': 'str',
        'aws_session_expiration_time': 'datetime',
        'aws_kms_key_id': 'str',
        'target_storage_name': 'str'
    }

    attribute_map = {
        'source_business_object_data': 'sourceBusinessObjectData',
        'target_business_object_data': 'targetBusinessObjectData',
        'file': 'file',
        'uuid': 'uuid',
        'aws_access_key': 'awsAccessKey',
        'aws_secret_key': 'awsSecretKey',
        'aws_session_token': 'awsSessionToken',
        'aws_session_expiration_time': 'awsSessionExpirationTime',
        'aws_kms_key_id': 'awsKmsKeyId',
        'target_storage_name': 'targetStorageName'
    }

    def __init__(self, source_business_object_data=None, target_business_object_data=None, file=None, uuid=None, aws_access_key=None, aws_secret_key=None, aws_session_token=None, aws_session_expiration_time=None, aws_kms_key_id=None, target_storage_name=None):  # noqa: E501
        """UploadSingleInitiationResponse - a model defined in OpenAPI"""  # noqa: E501

        self._source_business_object_data = None
        self._target_business_object_data = None
        self._file = None
        self._uuid = None
        self._aws_access_key = None
        self._aws_secret_key = None
        self._aws_session_token = None
        self._aws_session_expiration_time = None
        self._aws_kms_key_id = None
        self._target_storage_name = None
        self.discriminator = None

        self.source_business_object_data = source_business_object_data
        self.target_business_object_data = target_business_object_data
        self.file = file
        self.uuid = uuid
        self.aws_access_key = aws_access_key
        self.aws_secret_key = aws_secret_key
        self.aws_session_token = aws_session_token
        self.aws_session_expiration_time = aws_session_expiration_time
        self.aws_kms_key_id = aws_kms_key_id
        self.target_storage_name = target_storage_name

    @property
    def source_business_object_data(self):
        """Gets the source_business_object_data of this UploadSingleInitiationResponse.  # noqa: E501


        :return: The source_business_object_data of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: BusinessObjectData
        """
        return self._source_business_object_data

    @source_business_object_data.setter
    def source_business_object_data(self, source_business_object_data):
        """Sets the source_business_object_data of this UploadSingleInitiationResponse.


        :param source_business_object_data: The source_business_object_data of this UploadSingleInitiationResponse.  # noqa: E501
        :type: BusinessObjectData
        """
        if source_business_object_data is None:
            raise ValueError("Invalid value for `source_business_object_data`, must not be `None`")  # noqa: E501

        self._source_business_object_data = source_business_object_data

    @property
    def target_business_object_data(self):
        """Gets the target_business_object_data of this UploadSingleInitiationResponse.  # noqa: E501


        :return: The target_business_object_data of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: BusinessObjectData
        """
        return self._target_business_object_data

    @target_business_object_data.setter
    def target_business_object_data(self, target_business_object_data):
        """Sets the target_business_object_data of this UploadSingleInitiationResponse.


        :param target_business_object_data: The target_business_object_data of this UploadSingleInitiationResponse.  # noqa: E501
        :type: BusinessObjectData
        """
        if target_business_object_data is None:
            raise ValueError("Invalid value for `target_business_object_data`, must not be `None`")  # noqa: E501

        self._target_business_object_data = target_business_object_data

    @property
    def file(self):
        """Gets the file of this UploadSingleInitiationResponse.  # noqa: E501


        :return: The file of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this UploadSingleInitiationResponse.


        :param file: The file of this UploadSingleInitiationResponse.  # noqa: E501
        :type: file
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def uuid(self):
        """Gets the uuid of this UploadSingleInitiationResponse.  # noqa: E501

        The UUID generated for this upload  # noqa: E501

        :return: The uuid of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this UploadSingleInitiationResponse.

        The UUID generated for this upload  # noqa: E501

        :param uuid: The uuid of this UploadSingleInitiationResponse.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def aws_access_key(self):
        """Gets the aws_access_key of this UploadSingleInitiationResponse.  # noqa: E501

        The AWS access key that must be used to upload to this object in S3  # noqa: E501

        :return: The aws_access_key of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key

    @aws_access_key.setter
    def aws_access_key(self, aws_access_key):
        """Sets the aws_access_key of this UploadSingleInitiationResponse.

        The AWS access key that must be used to upload to this object in S3  # noqa: E501

        :param aws_access_key: The aws_access_key of this UploadSingleInitiationResponse.  # noqa: E501
        :type: str
        """
        if aws_access_key is None:
            raise ValueError("Invalid value for `aws_access_key`, must not be `None`")  # noqa: E501

        self._aws_access_key = aws_access_key

    @property
    def aws_secret_key(self):
        """Gets the aws_secret_key of this UploadSingleInitiationResponse.  # noqa: E501

        The AWS secret key that must be used to upload to this object in S3  # noqa: E501

        :return: The aws_secret_key of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: str
        """
        return self._aws_secret_key

    @aws_secret_key.setter
    def aws_secret_key(self, aws_secret_key):
        """Sets the aws_secret_key of this UploadSingleInitiationResponse.

        The AWS secret key that must be used to upload to this object in S3  # noqa: E501

        :param aws_secret_key: The aws_secret_key of this UploadSingleInitiationResponse.  # noqa: E501
        :type: str
        """
        if aws_secret_key is None:
            raise ValueError("Invalid value for `aws_secret_key`, must not be `None`")  # noqa: E501

        self._aws_secret_key = aws_secret_key

    @property
    def aws_session_token(self):
        """Gets the aws_session_token of this UploadSingleInitiationResponse.  # noqa: E501

        The AWS session token that must be used to upload to this object in S3  # noqa: E501

        :return: The aws_session_token of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: str
        """
        return self._aws_session_token

    @aws_session_token.setter
    def aws_session_token(self, aws_session_token):
        """Sets the aws_session_token of this UploadSingleInitiationResponse.

        The AWS session token that must be used to upload to this object in S3  # noqa: E501

        :param aws_session_token: The aws_session_token of this UploadSingleInitiationResponse.  # noqa: E501
        :type: str
        """
        if aws_session_token is None:
            raise ValueError("Invalid value for `aws_session_token`, must not be `None`")  # noqa: E501

        self._aws_session_token = aws_session_token

    @property
    def aws_session_expiration_time(self):
        """Gets the aws_session_expiration_time of this UploadSingleInitiationResponse.  # noqa: E501

        The timestamp of when the provided AWS credentials will expire  # noqa: E501

        :return: The aws_session_expiration_time of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._aws_session_expiration_time

    @aws_session_expiration_time.setter
    def aws_session_expiration_time(self, aws_session_expiration_time):
        """Sets the aws_session_expiration_time of this UploadSingleInitiationResponse.

        The timestamp of when the provided AWS credentials will expire  # noqa: E501

        :param aws_session_expiration_time: The aws_session_expiration_time of this UploadSingleInitiationResponse.  # noqa: E501
        :type: datetime
        """
        if aws_session_expiration_time is None:
            raise ValueError("Invalid value for `aws_session_expiration_time`, must not be `None`")  # noqa: E501

        self._aws_session_expiration_time = aws_session_expiration_time

    @property
    def aws_kms_key_id(self):
        """Gets the aws_kms_key_id of this UploadSingleInitiationResponse.  # noqa: E501

        The KMS key ID that must be used to do SSE  # noqa: E501

        :return: The aws_kms_key_id of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: str
        """
        return self._aws_kms_key_id

    @aws_kms_key_id.setter
    def aws_kms_key_id(self, aws_kms_key_id):
        """Sets the aws_kms_key_id of this UploadSingleInitiationResponse.

        The KMS key ID that must be used to do SSE  # noqa: E501

        :param aws_kms_key_id: The aws_kms_key_id of this UploadSingleInitiationResponse.  # noqa: E501
        :type: str
        """
        if aws_kms_key_id is None:
            raise ValueError("Invalid value for `aws_kms_key_id`, must not be `None`")  # noqa: E501

        self._aws_kms_key_id = aws_kms_key_id

    @property
    def target_storage_name(self):
        """Gets the target_storage_name of this UploadSingleInitiationResponse.  # noqa: E501

        The target storage name  # noqa: E501

        :return: The target_storage_name of this UploadSingleInitiationResponse.  # noqa: E501
        :rtype: str
        """
        return self._target_storage_name

    @target_storage_name.setter
    def target_storage_name(self, target_storage_name):
        """Sets the target_storage_name of this UploadSingleInitiationResponse.

        The target storage name  # noqa: E501

        :param target_storage_name: The target_storage_name of this UploadSingleInitiationResponse.  # noqa: E501
        :type: str
        """
        if target_storage_name is None:
            raise ValueError("Invalid value for `target_storage_name`, must not be `None`")  # noqa: E501

        self._target_storage_name = target_storage_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadSingleInitiationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
