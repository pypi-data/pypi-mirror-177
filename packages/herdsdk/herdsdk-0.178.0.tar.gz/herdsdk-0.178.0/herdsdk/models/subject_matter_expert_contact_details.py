# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubjectMatterExpertContactDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'full_name': 'str',
        'job_title': 'str',
        'email_address': 'str',
        'telephone_number': 'str'
    }

    attribute_map = {
        'full_name': 'fullName',
        'job_title': 'jobTitle',
        'email_address': 'emailAddress',
        'telephone_number': 'telephoneNumber'
    }

    def __init__(self, full_name=None, job_title=None, email_address=None, telephone_number=None):  # noqa: E501
        """SubjectMatterExpertContactDetails - a model defined in OpenAPI"""  # noqa: E501

        self._full_name = None
        self._job_title = None
        self._email_address = None
        self._telephone_number = None
        self.discriminator = None

        if full_name is not None:
            self.full_name = full_name
        if job_title is not None:
            self.job_title = job_title
        if email_address is not None:
            self.email_address = email_address
        if telephone_number is not None:
            self.telephone_number = telephone_number

    @property
    def full_name(self):
        """Gets the full_name of this SubjectMatterExpertContactDetails.  # noqa: E501

        The full name of the Subject Matter Expert  # noqa: E501

        :return: The full_name of this SubjectMatterExpertContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SubjectMatterExpertContactDetails.

        The full name of the Subject Matter Expert  # noqa: E501

        :param full_name: The full_name of this SubjectMatterExpertContactDetails.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def job_title(self):
        """Gets the job_title of this SubjectMatterExpertContactDetails.  # noqa: E501

        The job title of the Subject Matter Expert  # noqa: E501

        :return: The job_title of this SubjectMatterExpertContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this SubjectMatterExpertContactDetails.

        The job title of the Subject Matter Expert  # noqa: E501

        :param job_title: The job_title of this SubjectMatterExpertContactDetails.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def email_address(self):
        """Gets the email_address of this SubjectMatterExpertContactDetails.  # noqa: E501

        The e-mail address of the Subject Matter Expert  # noqa: E501

        :return: The email_address of this SubjectMatterExpertContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this SubjectMatterExpertContactDetails.

        The e-mail address of the Subject Matter Expert  # noqa: E501

        :param email_address: The email_address of this SubjectMatterExpertContactDetails.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def telephone_number(self):
        """Gets the telephone_number of this SubjectMatterExpertContactDetails.  # noqa: E501

        The telephone number of the Subject Matter Expert  # noqa: E501

        :return: The telephone_number of this SubjectMatterExpertContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this SubjectMatterExpertContactDetails.

        The telephone number of the Subject Matter Expert  # noqa: E501

        :param telephone_number: The telephone_number of this SubjectMatterExpertContactDetails.  # noqa: E501
        :type: str
        """

        self._telephone_number = telephone_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubjectMatterExpertContactDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
