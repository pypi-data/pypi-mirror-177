# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmailSendRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to': 'str',
        'cc': 'str',
        'bcc': 'str',
        'subject': 'str',
        'text': 'str',
        'reply_to': 'str',
        'source': 'str'
    }

    attribute_map = {
        'to': 'to',
        'cc': 'cc',
        'bcc': 'bcc',
        'subject': 'subject',
        'text': 'text',
        'reply_to': 'replyTo',
        'source': 'source'
    }

    def __init__(self, to=None, cc=None, bcc=None, subject=None, text=None, reply_to=None, source=None):  # noqa: E501
        """EmailSendRequest - a model defined in OpenAPI"""  # noqa: E501

        self._to = None
        self._cc = None
        self._bcc = None
        self._subject = None
        self._text = None
        self._reply_to = None
        self._source = None
        self.discriminator = None

        if to is not None:
            self.to = to
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        self.subject = subject
        if text is not None:
            self.text = text
        if reply_to is not None:
            self.reply_to = reply_to
        if source is not None:
            self.source = source

    @property
    def to(self):
        """Gets the to of this EmailSendRequest.  # noqa: E501


        :return: The to of this EmailSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailSendRequest.


        :param to: The to of this EmailSendRequest.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def cc(self):
        """Gets the cc of this EmailSendRequest.  # noqa: E501


        :return: The cc of this EmailSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this EmailSendRequest.


        :param cc: The cc of this EmailSendRequest.  # noqa: E501
        :type: str
        """

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this EmailSendRequest.  # noqa: E501


        :return: The bcc of this EmailSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this EmailSendRequest.


        :param bcc: The bcc of this EmailSendRequest.  # noqa: E501
        :type: str
        """

        self._bcc = bcc

    @property
    def subject(self):
        """Gets the subject of this EmailSendRequest.  # noqa: E501


        :return: The subject of this EmailSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailSendRequest.


        :param subject: The subject of this EmailSendRequest.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def text(self):
        """Gets the text of this EmailSendRequest.  # noqa: E501


        :return: The text of this EmailSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EmailSendRequest.


        :param text: The text of this EmailSendRequest.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def reply_to(self):
        """Gets the reply_to of this EmailSendRequest.  # noqa: E501


        :return: The reply_to of this EmailSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this EmailSendRequest.


        :param reply_to: The reply_to of this EmailSendRequest.  # noqa: E501
        :type: str
        """

        self._reply_to = reply_to

    @property
    def source(self):
        """Gets the source of this EmailSendRequest.  # noqa: E501


        :return: The source of this EmailSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EmailSendRequest.


        :param source: The source of this EmailSendRequest.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailSendRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
