# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrPigStep(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'namespace': 'str',
        'emr_cluster_definition_name': 'str',
        'emr_cluster_name': 'str',
        'step_name': 'str',
        'script_location': 'str',
        'script_arguments': 'list[str]',
        'continue_on_error': 'bool',
        'emr_cluster_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'emr_cluster_definition_name': 'emrClusterDefinitionName',
        'emr_cluster_name': 'emrClusterName',
        'step_name': 'stepName',
        'script_location': 'scriptLocation',
        'script_arguments': 'scriptArguments',
        'continue_on_error': 'continueOnError',
        'emr_cluster_id': 'emrClusterId'
    }

    def __init__(self, id=None, namespace=None, emr_cluster_definition_name=None, emr_cluster_name=None, step_name=None, script_location=None, script_arguments=None, continue_on_error=None, emr_cluster_id=None):  # noqa: E501
        """EmrPigStep - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._namespace = None
        self._emr_cluster_definition_name = None
        self._emr_cluster_name = None
        self._step_name = None
        self._script_location = None
        self._script_arguments = None
        self._continue_on_error = None
        self._emr_cluster_id = None
        self.discriminator = None

        self.id = id
        self.namespace = namespace
        self.emr_cluster_definition_name = emr_cluster_definition_name
        self.emr_cluster_name = emr_cluster_name
        self.step_name = step_name
        self.script_location = script_location
        if script_arguments is not None:
            self.script_arguments = script_arguments
        if continue_on_error is not None:
            self.continue_on_error = continue_on_error
        if emr_cluster_id is not None:
            self.emr_cluster_id = emr_cluster_id

    @property
    def id(self):
        """Gets the id of this EmrPigStep.  # noqa: E501


        :return: The id of this EmrPigStep.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmrPigStep.


        :param id: The id of this EmrPigStep.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this EmrPigStep.  # noqa: E501


        :return: The namespace of this EmrPigStep.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EmrPigStep.


        :param namespace: The namespace of this EmrPigStep.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def emr_cluster_definition_name(self):
        """Gets the emr_cluster_definition_name of this EmrPigStep.  # noqa: E501


        :return: The emr_cluster_definition_name of this EmrPigStep.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_definition_name

    @emr_cluster_definition_name.setter
    def emr_cluster_definition_name(self, emr_cluster_definition_name):
        """Sets the emr_cluster_definition_name of this EmrPigStep.


        :param emr_cluster_definition_name: The emr_cluster_definition_name of this EmrPigStep.  # noqa: E501
        :type: str
        """
        if emr_cluster_definition_name is None:
            raise ValueError("Invalid value for `emr_cluster_definition_name`, must not be `None`")  # noqa: E501

        self._emr_cluster_definition_name = emr_cluster_definition_name

    @property
    def emr_cluster_name(self):
        """Gets the emr_cluster_name of this EmrPigStep.  # noqa: E501


        :return: The emr_cluster_name of this EmrPigStep.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_name

    @emr_cluster_name.setter
    def emr_cluster_name(self, emr_cluster_name):
        """Sets the emr_cluster_name of this EmrPigStep.


        :param emr_cluster_name: The emr_cluster_name of this EmrPigStep.  # noqa: E501
        :type: str
        """
        if emr_cluster_name is None:
            raise ValueError("Invalid value for `emr_cluster_name`, must not be `None`")  # noqa: E501

        self._emr_cluster_name = emr_cluster_name

    @property
    def step_name(self):
        """Gets the step_name of this EmrPigStep.  # noqa: E501


        :return: The step_name of this EmrPigStep.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this EmrPigStep.


        :param step_name: The step_name of this EmrPigStep.  # noqa: E501
        :type: str
        """
        if step_name is None:
            raise ValueError("Invalid value for `step_name`, must not be `None`")  # noqa: E501

        self._step_name = step_name

    @property
    def script_location(self):
        """Gets the script_location of this EmrPigStep.  # noqa: E501


        :return: The script_location of this EmrPigStep.  # noqa: E501
        :rtype: str
        """
        return self._script_location

    @script_location.setter
    def script_location(self, script_location):
        """Sets the script_location of this EmrPigStep.


        :param script_location: The script_location of this EmrPigStep.  # noqa: E501
        :type: str
        """
        if script_location is None:
            raise ValueError("Invalid value for `script_location`, must not be `None`")  # noqa: E501

        self._script_location = script_location

    @property
    def script_arguments(self):
        """Gets the script_arguments of this EmrPigStep.  # noqa: E501


        :return: The script_arguments of this EmrPigStep.  # noqa: E501
        :rtype: list[str]
        """
        return self._script_arguments

    @script_arguments.setter
    def script_arguments(self, script_arguments):
        """Sets the script_arguments of this EmrPigStep.


        :param script_arguments: The script_arguments of this EmrPigStep.  # noqa: E501
        :type: list[str]
        """

        self._script_arguments = script_arguments

    @property
    def continue_on_error(self):
        """Gets the continue_on_error of this EmrPigStep.  # noqa: E501


        :return: The continue_on_error of this EmrPigStep.  # noqa: E501
        :rtype: bool
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """Sets the continue_on_error of this EmrPigStep.


        :param continue_on_error: The continue_on_error of this EmrPigStep.  # noqa: E501
        :type: bool
        """

        self._continue_on_error = continue_on_error

    @property
    def emr_cluster_id(self):
        """Gets the emr_cluster_id of this EmrPigStep.  # noqa: E501


        :return: The emr_cluster_id of this EmrPigStep.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_id

    @emr_cluster_id.setter
    def emr_cluster_id(self, emr_cluster_id):
        """Sets the emr_cluster_id of this EmrPigStep.


        :param emr_cluster_id: The emr_cluster_id of this EmrPigStep.  # noqa: E501
        :type: str
        """

        self._emr_cluster_id = emr_cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrPigStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
