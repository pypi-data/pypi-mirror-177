# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NamespaceAuthorization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'namespace_permissions': 'list[str]'
    }

    attribute_map = {
        'namespace': 'namespace',
        'namespace_permissions': 'namespacePermissions'
    }

    def __init__(self, namespace=None, namespace_permissions=None):  # noqa: E501
        """NamespaceAuthorization - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._namespace_permissions = None
        self.discriminator = None

        self.namespace = namespace
        if namespace_permissions is not None:
            self.namespace_permissions = namespace_permissions

    @property
    def namespace(self):
        """Gets the namespace of this NamespaceAuthorization.  # noqa: E501

        The namespace  # noqa: E501

        :return: The namespace of this NamespaceAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this NamespaceAuthorization.

        The namespace  # noqa: E501

        :param namespace: The namespace of this NamespaceAuthorization.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def namespace_permissions(self):
        """Gets the namespace_permissions of this NamespaceAuthorization.  # noqa: E501

        The list of namespace permissions  # noqa: E501

        :return: The namespace_permissions of this NamespaceAuthorization.  # noqa: E501
        :rtype: list[str]
        """
        return self._namespace_permissions

    @namespace_permissions.setter
    def namespace_permissions(self, namespace_permissions):
        """Sets the namespace_permissions of this NamespaceAuthorization.

        The list of namespace permissions  # noqa: E501

        :param namespace_permissions: The namespace_permissions of this NamespaceAuthorization.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["READ", "WRITE", "EXECUTE", "GRANT", "WRITE_DESCRIPTIVE_CONTENT", "WRITE_ATTRIBUTE"]  # noqa: E501
        if not set(namespace_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `namespace_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(namespace_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._namespace_permissions = namespace_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamespaceAuthorization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
