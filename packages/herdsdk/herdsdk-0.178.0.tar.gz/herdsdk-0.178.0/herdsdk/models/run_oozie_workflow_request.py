# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RunOozieWorkflowRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'emr_cluster_definition_name': 'str',
        'emr_cluster_name': 'str',
        'workflow_location': 'str',
        'parameters': 'list[Parameter]',
        'emr_cluster_id': 'str',
        'account_id': 'str'
    }

    attribute_map = {
        'namespace': 'namespace',
        'emr_cluster_definition_name': 'emrClusterDefinitionName',
        'emr_cluster_name': 'emrClusterName',
        'workflow_location': 'workflowLocation',
        'parameters': 'parameters',
        'emr_cluster_id': 'emrClusterId',
        'account_id': 'accountId'
    }

    def __init__(self, namespace=None, emr_cluster_definition_name=None, emr_cluster_name=None, workflow_location=None, parameters=None, emr_cluster_id=None, account_id=None):  # noqa: E501
        """RunOozieWorkflowRequest - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._emr_cluster_definition_name = None
        self._emr_cluster_name = None
        self._workflow_location = None
        self._parameters = None
        self._emr_cluster_id = None
        self._account_id = None
        self.discriminator = None

        self.namespace = namespace
        self.emr_cluster_definition_name = emr_cluster_definition_name
        self.emr_cluster_name = emr_cluster_name
        self.workflow_location = workflow_location
        if parameters is not None:
            self.parameters = parameters
        if emr_cluster_id is not None:
            self.emr_cluster_id = emr_cluster_id
        if account_id is not None:
            self.account_id = account_id

    @property
    def namespace(self):
        """Gets the namespace of this RunOozieWorkflowRequest.  # noqa: E501


        :return: The namespace of this RunOozieWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this RunOozieWorkflowRequest.


        :param namespace: The namespace of this RunOozieWorkflowRequest.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def emr_cluster_definition_name(self):
        """Gets the emr_cluster_definition_name of this RunOozieWorkflowRequest.  # noqa: E501


        :return: The emr_cluster_definition_name of this RunOozieWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_definition_name

    @emr_cluster_definition_name.setter
    def emr_cluster_definition_name(self, emr_cluster_definition_name):
        """Sets the emr_cluster_definition_name of this RunOozieWorkflowRequest.


        :param emr_cluster_definition_name: The emr_cluster_definition_name of this RunOozieWorkflowRequest.  # noqa: E501
        :type: str
        """
        if emr_cluster_definition_name is None:
            raise ValueError("Invalid value for `emr_cluster_definition_name`, must not be `None`")  # noqa: E501

        self._emr_cluster_definition_name = emr_cluster_definition_name

    @property
    def emr_cluster_name(self):
        """Gets the emr_cluster_name of this RunOozieWorkflowRequest.  # noqa: E501


        :return: The emr_cluster_name of this RunOozieWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_name

    @emr_cluster_name.setter
    def emr_cluster_name(self, emr_cluster_name):
        """Sets the emr_cluster_name of this RunOozieWorkflowRequest.


        :param emr_cluster_name: The emr_cluster_name of this RunOozieWorkflowRequest.  # noqa: E501
        :type: str
        """
        if emr_cluster_name is None:
            raise ValueError("Invalid value for `emr_cluster_name`, must not be `None`")  # noqa: E501

        self._emr_cluster_name = emr_cluster_name

    @property
    def workflow_location(self):
        """Gets the workflow_location of this RunOozieWorkflowRequest.  # noqa: E501


        :return: The workflow_location of this RunOozieWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._workflow_location

    @workflow_location.setter
    def workflow_location(self, workflow_location):
        """Sets the workflow_location of this RunOozieWorkflowRequest.


        :param workflow_location: The workflow_location of this RunOozieWorkflowRequest.  # noqa: E501
        :type: str
        """
        if workflow_location is None:
            raise ValueError("Invalid value for `workflow_location`, must not be `None`")  # noqa: E501

        self._workflow_location = workflow_location

    @property
    def parameters(self):
        """Gets the parameters of this RunOozieWorkflowRequest.  # noqa: E501


        :return: The parameters of this RunOozieWorkflowRequest.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RunOozieWorkflowRequest.


        :param parameters: The parameters of this RunOozieWorkflowRequest.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    @property
    def emr_cluster_id(self):
        """Gets the emr_cluster_id of this RunOozieWorkflowRequest.  # noqa: E501


        :return: The emr_cluster_id of this RunOozieWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_id

    @emr_cluster_id.setter
    def emr_cluster_id(self, emr_cluster_id):
        """Sets the emr_cluster_id of this RunOozieWorkflowRequest.


        :param emr_cluster_id: The emr_cluster_id of this RunOozieWorkflowRequest.  # noqa: E501
        :type: str
        """

        self._emr_cluster_id = emr_cluster_id

    @property
    def account_id(self):
        """Gets the account_id of this RunOozieWorkflowRequest.  # noqa: E501


        :return: The account_id of this RunOozieWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RunOozieWorkflowRequest.


        :param account_id: The account_id of this RunOozieWorkflowRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunOozieWorkflowRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
