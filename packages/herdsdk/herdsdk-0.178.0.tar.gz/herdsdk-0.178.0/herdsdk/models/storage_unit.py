# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StorageUnit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storage': 'Storage',
        'storage_directory': 'StorageDirectory',
        'storage_files': 'list[StorageFile]',
        'storage_unit_status': 'str',
        'storage_unit_status_history': 'list[StorageUnitStatusChangeEvent]',
        'storage_policy_transition_failed_attempts': 'int',
        'restore_expiration_on': 'datetime'
    }

    attribute_map = {
        'storage': 'storage',
        'storage_directory': 'storageDirectory',
        'storage_files': 'storageFiles',
        'storage_unit_status': 'storageUnitStatus',
        'storage_unit_status_history': 'storageUnitStatusHistory',
        'storage_policy_transition_failed_attempts': 'storagePolicyTransitionFailedAttempts',
        'restore_expiration_on': 'restoreExpirationOn'
    }

    def __init__(self, storage=None, storage_directory=None, storage_files=None, storage_unit_status=None, storage_unit_status_history=None, storage_policy_transition_failed_attempts=None, restore_expiration_on=None):  # noqa: E501
        """StorageUnit - a model defined in OpenAPI"""  # noqa: E501

        self._storage = None
        self._storage_directory = None
        self._storage_files = None
        self._storage_unit_status = None
        self._storage_unit_status_history = None
        self._storage_policy_transition_failed_attempts = None
        self._restore_expiration_on = None
        self.discriminator = None

        self.storage = storage
        if storage_directory is not None:
            self.storage_directory = storage_directory
        if storage_files is not None:
            self.storage_files = storage_files
        if storage_unit_status is not None:
            self.storage_unit_status = storage_unit_status
        if storage_unit_status_history is not None:
            self.storage_unit_status_history = storage_unit_status_history
        if storage_policy_transition_failed_attempts is not None:
            self.storage_policy_transition_failed_attempts = storage_policy_transition_failed_attempts
        if restore_expiration_on is not None:
            self.restore_expiration_on = restore_expiration_on

    @property
    def storage(self):
        """Gets the storage of this StorageUnit.  # noqa: E501


        :return: The storage of this StorageUnit.  # noqa: E501
        :rtype: Storage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this StorageUnit.


        :param storage: The storage of this StorageUnit.  # noqa: E501
        :type: Storage
        """
        if storage is None:
            raise ValueError("Invalid value for `storage`, must not be `None`")  # noqa: E501

        self._storage = storage

    @property
    def storage_directory(self):
        """Gets the storage_directory of this StorageUnit.  # noqa: E501


        :return: The storage_directory of this StorageUnit.  # noqa: E501
        :rtype: StorageDirectory
        """
        return self._storage_directory

    @storage_directory.setter
    def storage_directory(self, storage_directory):
        """Sets the storage_directory of this StorageUnit.


        :param storage_directory: The storage_directory of this StorageUnit.  # noqa: E501
        :type: StorageDirectory
        """

        self._storage_directory = storage_directory

    @property
    def storage_files(self):
        """Gets the storage_files of this StorageUnit.  # noqa: E501

        A container of various Storage Files that reside within a specific Storage Unit  # noqa: E501

        :return: The storage_files of this StorageUnit.  # noqa: E501
        :rtype: list[StorageFile]
        """
        return self._storage_files

    @storage_files.setter
    def storage_files(self, storage_files):
        """Sets the storage_files of this StorageUnit.

        A container of various Storage Files that reside within a specific Storage Unit  # noqa: E501

        :param storage_files: The storage_files of this StorageUnit.  # noqa: E501
        :type: list[StorageFile]
        """

        self._storage_files = storage_files

    @property
    def storage_unit_status(self):
        """Gets the storage_unit_status of this StorageUnit.  # noqa: E501

        The status of this Storage Unit. One of the following values: ENABLED, DISABLED, ARCHIVING, or RESTORING  # noqa: E501

        :return: The storage_unit_status of this StorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._storage_unit_status

    @storage_unit_status.setter
    def storage_unit_status(self, storage_unit_status):
        """Sets the storage_unit_status of this StorageUnit.

        The status of this Storage Unit. One of the following values: ENABLED, DISABLED, ARCHIVING, or RESTORING  # noqa: E501

        :param storage_unit_status: The storage_unit_status of this StorageUnit.  # noqa: E501
        :type: str
        """

        self._storage_unit_status = storage_unit_status

    @property
    def storage_unit_status_history(self):
        """Gets the storage_unit_status_history of this StorageUnit.  # noqa: E501

        Lists all storage unit status change events for this storage unit  # noqa: E501

        :return: The storage_unit_status_history of this StorageUnit.  # noqa: E501
        :rtype: list[StorageUnitStatusChangeEvent]
        """
        return self._storage_unit_status_history

    @storage_unit_status_history.setter
    def storage_unit_status_history(self, storage_unit_status_history):
        """Sets the storage_unit_status_history of this StorageUnit.

        Lists all storage unit status change events for this storage unit  # noqa: E501

        :param storage_unit_status_history: The storage_unit_status_history of this StorageUnit.  # noqa: E501
        :type: list[StorageUnitStatusChangeEvent]
        """

        self._storage_unit_status_history = storage_unit_status_history

    @property
    def storage_policy_transition_failed_attempts(self):
        """Gets the storage_policy_transition_failed_attempts of this StorageUnit.  # noqa: E501

        The number of failed attempts to execute a storage policy transition such as archiving to Glacier  # noqa: E501

        :return: The storage_policy_transition_failed_attempts of this StorageUnit.  # noqa: E501
        :rtype: int
        """
        return self._storage_policy_transition_failed_attempts

    @storage_policy_transition_failed_attempts.setter
    def storage_policy_transition_failed_attempts(self, storage_policy_transition_failed_attempts):
        """Sets the storage_policy_transition_failed_attempts of this StorageUnit.

        The number of failed attempts to execute a storage policy transition such as archiving to Glacier  # noqa: E501

        :param storage_policy_transition_failed_attempts: The storage_policy_transition_failed_attempts of this StorageUnit.  # noqa: E501
        :type: int
        """

        self._storage_policy_transition_failed_attempts = storage_policy_transition_failed_attempts

    @property
    def restore_expiration_on(self):
        """Gets the restore_expiration_on of this StorageUnit.  # noqa: E501

        The restore expiration time if restored  # noqa: E501

        :return: The restore_expiration_on of this StorageUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._restore_expiration_on

    @restore_expiration_on.setter
    def restore_expiration_on(self, restore_expiration_on):
        """Sets the restore_expiration_on of this StorageUnit.

        The restore expiration time if restored  # noqa: E501

        :param restore_expiration_on: The restore_expiration_on of this StorageUnit.  # noqa: E501
        :type: datetime
        """

        self._restore_expiration_on = restore_expiration_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
