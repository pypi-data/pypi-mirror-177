# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GlobalAttributeDefinitionKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'global_attribute_definition_level': 'str',
        'global_attribute_definition_name': 'str'
    }

    attribute_map = {
        'global_attribute_definition_level': 'globalAttributeDefinitionLevel',
        'global_attribute_definition_name': 'globalAttributeDefinitionName'
    }

    def __init__(self, global_attribute_definition_level=None, global_attribute_definition_name=None):  # noqa: E501
        """GlobalAttributeDefinitionKey - a model defined in OpenAPI"""  # noqa: E501

        self._global_attribute_definition_level = None
        self._global_attribute_definition_name = None
        self.discriminator = None

        self.global_attribute_definition_level = global_attribute_definition_level
        self.global_attribute_definition_name = global_attribute_definition_name

    @property
    def global_attribute_definition_level(self):
        """Gets the global_attribute_definition_level of this GlobalAttributeDefinitionKey.  # noqa: E501

        The global attribute definition level. Only BUS_OBJCT_FRMT is currently supported.  # noqa: E501

        :return: The global_attribute_definition_level of this GlobalAttributeDefinitionKey.  # noqa: E501
        :rtype: str
        """
        return self._global_attribute_definition_level

    @global_attribute_definition_level.setter
    def global_attribute_definition_level(self, global_attribute_definition_level):
        """Sets the global_attribute_definition_level of this GlobalAttributeDefinitionKey.

        The global attribute definition level. Only BUS_OBJCT_FRMT is currently supported.  # noqa: E501

        :param global_attribute_definition_level: The global_attribute_definition_level of this GlobalAttributeDefinitionKey.  # noqa: E501
        :type: str
        """
        if global_attribute_definition_level is None:
            raise ValueError("Invalid value for `global_attribute_definition_level`, must not be `None`")  # noqa: E501

        self._global_attribute_definition_level = global_attribute_definition_level

    @property
    def global_attribute_definition_name(self):
        """Gets the global_attribute_definition_name of this GlobalAttributeDefinitionKey.  # noqa: E501

        The global attribute definition name to be associated with the level.  # noqa: E501

        :return: The global_attribute_definition_name of this GlobalAttributeDefinitionKey.  # noqa: E501
        :rtype: str
        """
        return self._global_attribute_definition_name

    @global_attribute_definition_name.setter
    def global_attribute_definition_name(self, global_attribute_definition_name):
        """Sets the global_attribute_definition_name of this GlobalAttributeDefinitionKey.

        The global attribute definition name to be associated with the level.  # noqa: E501

        :param global_attribute_definition_name: The global_attribute_definition_name of this GlobalAttributeDefinitionKey.  # noqa: E501
        :type: str
        """
        if global_attribute_definition_name is None:
            raise ValueError("Invalid value for `global_attribute_definition_name`, must not be `None`")  # noqa: E501

        self._global_attribute_definition_name = global_attribute_definition_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalAttributeDefinitionKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
