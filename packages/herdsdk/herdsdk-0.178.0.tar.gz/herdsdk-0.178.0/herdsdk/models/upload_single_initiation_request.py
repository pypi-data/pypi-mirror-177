# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadSingleInitiationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_business_object_format_key': 'BusinessObjectFormatKey',
        'target_business_object_format_key': 'BusinessObjectFormatKey',
        'business_object_data_attributes': 'list[Attribute]',
        'file': 'file',
        'target_storage_name': 'str'
    }

    attribute_map = {
        'source_business_object_format_key': 'sourceBusinessObjectFormatKey',
        'target_business_object_format_key': 'targetBusinessObjectFormatKey',
        'business_object_data_attributes': 'businessObjectDataAttributes',
        'file': 'file',
        'target_storage_name': 'targetStorageName'
    }

    def __init__(self, source_business_object_format_key=None, target_business_object_format_key=None, business_object_data_attributes=None, file=None, target_storage_name=None):  # noqa: E501
        """UploadSingleInitiationRequest - a model defined in OpenAPI"""  # noqa: E501

        self._source_business_object_format_key = None
        self._target_business_object_format_key = None
        self._business_object_data_attributes = None
        self._file = None
        self._target_storage_name = None
        self.discriminator = None

        self.source_business_object_format_key = source_business_object_format_key
        self.target_business_object_format_key = target_business_object_format_key
        if business_object_data_attributes is not None:
            self.business_object_data_attributes = business_object_data_attributes
        self.file = file
        if target_storage_name is not None:
            self.target_storage_name = target_storage_name

    @property
    def source_business_object_format_key(self):
        """Gets the source_business_object_format_key of this UploadSingleInitiationRequest.  # noqa: E501


        :return: The source_business_object_format_key of this UploadSingleInitiationRequest.  # noqa: E501
        :rtype: BusinessObjectFormatKey
        """
        return self._source_business_object_format_key

    @source_business_object_format_key.setter
    def source_business_object_format_key(self, source_business_object_format_key):
        """Sets the source_business_object_format_key of this UploadSingleInitiationRequest.


        :param source_business_object_format_key: The source_business_object_format_key of this UploadSingleInitiationRequest.  # noqa: E501
        :type: BusinessObjectFormatKey
        """
        if source_business_object_format_key is None:
            raise ValueError("Invalid value for `source_business_object_format_key`, must not be `None`")  # noqa: E501

        self._source_business_object_format_key = source_business_object_format_key

    @property
    def target_business_object_format_key(self):
        """Gets the target_business_object_format_key of this UploadSingleInitiationRequest.  # noqa: E501


        :return: The target_business_object_format_key of this UploadSingleInitiationRequest.  # noqa: E501
        :rtype: BusinessObjectFormatKey
        """
        return self._target_business_object_format_key

    @target_business_object_format_key.setter
    def target_business_object_format_key(self, target_business_object_format_key):
        """Sets the target_business_object_format_key of this UploadSingleInitiationRequest.


        :param target_business_object_format_key: The target_business_object_format_key of this UploadSingleInitiationRequest.  # noqa: E501
        :type: BusinessObjectFormatKey
        """
        if target_business_object_format_key is None:
            raise ValueError("Invalid value for `target_business_object_format_key`, must not be `None`")  # noqa: E501

        self._target_business_object_format_key = target_business_object_format_key

    @property
    def business_object_data_attributes(self):
        """Gets the business_object_data_attributes of this UploadSingleInitiationRequest.  # noqa: E501

        The business object data attributes  # noqa: E501

        :return: The business_object_data_attributes of this UploadSingleInitiationRequest.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._business_object_data_attributes

    @business_object_data_attributes.setter
    def business_object_data_attributes(self, business_object_data_attributes):
        """Sets the business_object_data_attributes of this UploadSingleInitiationRequest.

        The business object data attributes  # noqa: E501

        :param business_object_data_attributes: The business_object_data_attributes of this UploadSingleInitiationRequest.  # noqa: E501
        :type: list[Attribute]
        """

        self._business_object_data_attributes = business_object_data_attributes

    @property
    def file(self):
        """Gets the file of this UploadSingleInitiationRequest.  # noqa: E501


        :return: The file of this UploadSingleInitiationRequest.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this UploadSingleInitiationRequest.


        :param file: The file of this UploadSingleInitiationRequest.  # noqa: E501
        :type: file
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def target_storage_name(self):
        """Gets the target_storage_name of this UploadSingleInitiationRequest.  # noqa: E501

        The target storage name to move the encrypted file to  # noqa: E501

        :return: The target_storage_name of this UploadSingleInitiationRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_storage_name

    @target_storage_name.setter
    def target_storage_name(self, target_storage_name):
        """Sets the target_storage_name of this UploadSingleInitiationRequest.

        The target storage name to move the encrypted file to  # noqa: E501

        :param target_storage_name: The target_storage_name of this UploadSingleInitiationRequest.  # noqa: E501
        :type: str
        """

        self._target_storage_name = target_storage_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadSingleInitiationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
