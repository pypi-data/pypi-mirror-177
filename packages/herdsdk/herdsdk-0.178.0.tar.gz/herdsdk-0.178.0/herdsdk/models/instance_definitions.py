# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InstanceDefinitions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'master_instances': 'MasterInstanceDefinition',
        'core_instances': 'InstanceDefinition',
        'task_instances': 'InstanceDefinition'
    }

    attribute_map = {
        'master_instances': 'masterInstances',
        'core_instances': 'coreInstances',
        'task_instances': 'taskInstances'
    }

    def __init__(self, master_instances=None, core_instances=None, task_instances=None):  # noqa: E501
        """InstanceDefinitions - a model defined in OpenAPI"""  # noqa: E501

        self._master_instances = None
        self._core_instances = None
        self._task_instances = None
        self.discriminator = None

        if master_instances is not None:
            self.master_instances = master_instances
        if core_instances is not None:
            self.core_instances = core_instances
        if task_instances is not None:
            self.task_instances = task_instances

    @property
    def master_instances(self):
        """Gets the master_instances of this InstanceDefinitions.  # noqa: E501


        :return: The master_instances of this InstanceDefinitions.  # noqa: E501
        :rtype: MasterInstanceDefinition
        """
        return self._master_instances

    @master_instances.setter
    def master_instances(self, master_instances):
        """Sets the master_instances of this InstanceDefinitions.


        :param master_instances: The master_instances of this InstanceDefinitions.  # noqa: E501
        :type: MasterInstanceDefinition
        """

        self._master_instances = master_instances

    @property
    def core_instances(self):
        """Gets the core_instances of this InstanceDefinitions.  # noqa: E501


        :return: The core_instances of this InstanceDefinitions.  # noqa: E501
        :rtype: InstanceDefinition
        """
        return self._core_instances

    @core_instances.setter
    def core_instances(self, core_instances):
        """Sets the core_instances of this InstanceDefinitions.


        :param core_instances: The core_instances of this InstanceDefinitions.  # noqa: E501
        :type: InstanceDefinition
        """

        self._core_instances = core_instances

    @property
    def task_instances(self):
        """Gets the task_instances of this InstanceDefinitions.  # noqa: E501


        :return: The task_instances of this InstanceDefinitions.  # noqa: E501
        :rtype: InstanceDefinition
        """
        return self._task_instances

    @task_instances.setter
    def task_instances(self, task_instances):
        """Sets the task_instances of this InstanceDefinitions.


        :param task_instances: The task_instances of this InstanceDefinitions.  # noqa: E501
        :type: InstanceDefinition
        """

        self._task_instances = task_instances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceDefinitions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
