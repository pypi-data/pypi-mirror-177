# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Tag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'tag_key': 'TagKey',
        'display_name': 'str',
        'search_score_multiplier': 'float',
        'description': 'str',
        'user_id': 'str',
        'last_updated_by_user_id': 'str',
        'updated_time': 'datetime',
        'parent_tag_key': 'TagKey',
        'has_children': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'tag_key': 'tagKey',
        'display_name': 'displayName',
        'search_score_multiplier': 'searchScoreMultiplier',
        'description': 'description',
        'user_id': 'userId',
        'last_updated_by_user_id': 'lastUpdatedByUserId',
        'updated_time': 'updatedTime',
        'parent_tag_key': 'parentTagKey',
        'has_children': 'hasChildren'
    }

    def __init__(self, id=None, tag_key=None, display_name=None, search_score_multiplier=None, description=None, user_id=None, last_updated_by_user_id=None, updated_time=None, parent_tag_key=None, has_children=None):  # noqa: E501
        """Tag - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._tag_key = None
        self._display_name = None
        self._search_score_multiplier = None
        self._description = None
        self._user_id = None
        self._last_updated_by_user_id = None
        self._updated_time = None
        self._parent_tag_key = None
        self._has_children = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.tag_key = tag_key
        if display_name is not None:
            self.display_name = display_name
        if search_score_multiplier is not None:
            self.search_score_multiplier = search_score_multiplier
        if description is not None:
            self.description = description
        if user_id is not None:
            self.user_id = user_id
        if last_updated_by_user_id is not None:
            self.last_updated_by_user_id = last_updated_by_user_id
        if updated_time is not None:
            self.updated_time = updated_time
        if parent_tag_key is not None:
            self.parent_tag_key = parent_tag_key
        if has_children is not None:
            self.has_children = has_children

    @property
    def id(self):
        """Gets the id of this Tag.  # noqa: E501

        The internal identifier that uniquely references a Tag  # noqa: E501

        :return: The id of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.

        The internal identifier that uniquely references a Tag  # noqa: E501

        :param id: The id of this Tag.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tag_key(self):
        """Gets the tag_key of this Tag.  # noqa: E501


        :return: The tag_key of this Tag.  # noqa: E501
        :rtype: TagKey
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this Tag.


        :param tag_key: The tag_key of this Tag.  # noqa: E501
        :type: TagKey
        """
        if tag_key is None:
            raise ValueError("Invalid value for `tag_key`, must not be `None`")  # noqa: E501

        self._tag_key = tag_key

    @property
    def display_name(self):
        """Gets the display_name of this Tag.  # noqa: E501

        The tag's name in plain text for human readability  # noqa: E501

        :return: The display_name of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Tag.

        The tag's name in plain text for human readability  # noqa: E501

        :param display_name: The display_name of this Tag.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def search_score_multiplier(self):
        """Gets the search_score_multiplier of this Tag.  # noqa: E501

        An optional tag's search score multiplier. Search score multiplier is numeric and can be a decimal  # noqa: E501

        :return: The search_score_multiplier of this Tag.  # noqa: E501
        :rtype: float
        """
        return self._search_score_multiplier

    @search_score_multiplier.setter
    def search_score_multiplier(self, search_score_multiplier):
        """Sets the search_score_multiplier of this Tag.

        An optional tag's search score multiplier. Search score multiplier is numeric and can be a decimal  # noqa: E501

        :param search_score_multiplier: The search_score_multiplier of this Tag.  # noqa: E501
        :type: float
        """

        self._search_score_multiplier = search_score_multiplier

    @property
    def description(self):
        """Gets the description of this Tag.  # noqa: E501

        The tag's description  # noqa: E501

        :return: The description of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tag.

        The tag's description  # noqa: E501

        :param description: The description of this Tag.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def user_id(self):
        """Gets the user_id of this Tag.  # noqa: E501

        The User ID of the user who created this tag  # noqa: E501

        :return: The user_id of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Tag.

        The User ID of the user who created this tag  # noqa: E501

        :param user_id: The user_id of this Tag.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def last_updated_by_user_id(self):
        """Gets the last_updated_by_user_id of this Tag.  # noqa: E501

        The User ID of the user who last updated this tag  # noqa: E501

        :return: The last_updated_by_user_id of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by_user_id

    @last_updated_by_user_id.setter
    def last_updated_by_user_id(self, last_updated_by_user_id):
        """Sets the last_updated_by_user_id of this Tag.

        The User ID of the user who last updated this tag  # noqa: E501

        :param last_updated_by_user_id: The last_updated_by_user_id of this Tag.  # noqa: E501
        :type: str
        """

        self._last_updated_by_user_id = last_updated_by_user_id

    @property
    def updated_time(self):
        """Gets the updated_time of this Tag.  # noqa: E501

        The timestamp of when it is last updated  # noqa: E501

        :return: The updated_time of this Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Tag.

        The timestamp of when it is last updated  # noqa: E501

        :param updated_time: The updated_time of this Tag.  # noqa: E501
        :type: datetime
        """

        self._updated_time = updated_time

    @property
    def parent_tag_key(self):
        """Gets the parent_tag_key of this Tag.  # noqa: E501


        :return: The parent_tag_key of this Tag.  # noqa: E501
        :rtype: TagKey
        """
        return self._parent_tag_key

    @parent_tag_key.setter
    def parent_tag_key(self, parent_tag_key):
        """Sets the parent_tag_key of this Tag.


        :param parent_tag_key: The parent_tag_key of this Tag.  # noqa: E501
        :type: TagKey
        """

        self._parent_tag_key = parent_tag_key

    @property
    def has_children(self):
        """Gets the has_children of this Tag.  # noqa: E501

        A boolean flag that shows whether this tag has further children  # noqa: E501

        :return: The has_children of this Tag.  # noqa: E501
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this Tag.

        A boolean flag that shows whether this tag has further children  # noqa: E501

        :param has_children: The has_children of this Tag.  # noqa: E501
        :type: bool
        """

        self._has_children = has_children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
