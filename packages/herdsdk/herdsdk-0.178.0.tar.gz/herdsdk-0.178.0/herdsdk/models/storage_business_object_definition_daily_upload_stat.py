# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StorageBusinessObjectDefinitionDailyUploadStat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'upload_date': 'datetime',
        'namespace': 'str',
        'data_provider_name': 'str',
        'business_object_definition_name': 'str',
        'total_files': 'int',
        'total_bytes': 'int'
    }

    attribute_map = {
        'upload_date': 'uploadDate',
        'namespace': 'namespace',
        'data_provider_name': 'dataProviderName',
        'business_object_definition_name': 'businessObjectDefinitionName',
        'total_files': 'totalFiles',
        'total_bytes': 'totalBytes'
    }

    def __init__(self, upload_date=None, namespace=None, data_provider_name=None, business_object_definition_name=None, total_files=None, total_bytes=None):  # noqa: E501
        """StorageBusinessObjectDefinitionDailyUploadStat - a model defined in OpenAPI"""  # noqa: E501

        self._upload_date = None
        self._namespace = None
        self._data_provider_name = None
        self._business_object_definition_name = None
        self._total_files = None
        self._total_bytes = None
        self.discriminator = None

        self.upload_date = upload_date
        self.namespace = namespace
        self.data_provider_name = data_provider_name
        self.business_object_definition_name = business_object_definition_name
        if total_files is not None:
            self.total_files = total_files
        if total_bytes is not None:
            self.total_bytes = total_bytes

    @property
    def upload_date(self):
        """Gets the upload_date of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501

        The upload date in YYYY-MM-DD format  # noqa: E501

        :return: The upload_date of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this StorageBusinessObjectDefinitionDailyUploadStat.

        The upload date in YYYY-MM-DD format  # noqa: E501

        :param upload_date: The upload_date of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :type: datetime
        """
        if upload_date is None:
            raise ValueError("Invalid value for `upload_date`, must not be `None`")  # noqa: E501

        self._upload_date = upload_date

    @property
    def namespace(self):
        """Gets the namespace of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501

        The Namespace that Business Object Definition is associated with  # noqa: E501

        :return: The namespace of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this StorageBusinessObjectDefinitionDailyUploadStat.

        The Namespace that Business Object Definition is associated with  # noqa: E501

        :param namespace: The namespace of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def data_provider_name(self):
        """Gets the data_provider_name of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501

        The name of the Data Provider that Business Object Definition is associated with  # noqa: E501

        :return: The data_provider_name of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :rtype: str
        """
        return self._data_provider_name

    @data_provider_name.setter
    def data_provider_name(self, data_provider_name):
        """Sets the data_provider_name of this StorageBusinessObjectDefinitionDailyUploadStat.

        The name of the Data Provider that Business Object Definition is associated with  # noqa: E501

        :param data_provider_name: The data_provider_name of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :type: str
        """
        if data_provider_name is None:
            raise ValueError("Invalid value for `data_provider_name`, must not be `None`")  # noqa: E501

        self._data_provider_name = data_provider_name

    @property
    def business_object_definition_name(self):
        """Gets the business_object_definition_name of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501

        The name of the Business Object Definition  # noqa: E501

        :return: The business_object_definition_name of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_name

    @business_object_definition_name.setter
    def business_object_definition_name(self, business_object_definition_name):
        """Sets the business_object_definition_name of this StorageBusinessObjectDefinitionDailyUploadStat.

        The name of the Business Object Definition  # noqa: E501

        :param business_object_definition_name: The business_object_definition_name of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :type: str
        """
        if business_object_definition_name is None:
            raise ValueError("Invalid value for `business_object_definition_name`, must not be `None`")  # noqa: E501

        self._business_object_definition_name = business_object_definition_name

    @property
    def total_files(self):
        """Gets the total_files of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501

        The total number of files uploaded to the storage on the date specified  # noqa: E501

        :return: The total_files of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :rtype: int
        """
        return self._total_files

    @total_files.setter
    def total_files(self, total_files):
        """Sets the total_files of this StorageBusinessObjectDefinitionDailyUploadStat.

        The total number of files uploaded to the storage on the date specified  # noqa: E501

        :param total_files: The total_files of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :type: int
        """

        self._total_files = total_files

    @property
    def total_bytes(self):
        """Gets the total_bytes of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501

        The total number of bytes uploaded to the storage on the date specified  # noqa: E501

        :return: The total_bytes of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this StorageBusinessObjectDefinitionDailyUploadStat.

        The total number of bytes uploaded to the storage on the date specified  # noqa: E501

        :param total_bytes: The total_bytes of this StorageBusinessObjectDefinitionDailyUploadStat.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageBusinessObjectDefinitionDailyUploadStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
