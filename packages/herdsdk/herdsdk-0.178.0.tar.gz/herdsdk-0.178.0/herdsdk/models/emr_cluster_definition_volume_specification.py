# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrClusterDefinitionVolumeSpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'volume_type': 'str',
        'iops': 'int',
        'size_in_gb': 'int',
        'throughput': 'int'
    }

    attribute_map = {
        'volume_type': 'volumeType',
        'iops': 'iops',
        'size_in_gb': 'sizeInGB',
        'throughput': 'throughput'
    }

    def __init__(self, volume_type=None, iops=None, size_in_gb=None, throughput=None):  # noqa: E501
        """EmrClusterDefinitionVolumeSpecification - a model defined in OpenAPI"""  # noqa: E501

        self._volume_type = None
        self._iops = None
        self._size_in_gb = None
        self._throughput = None
        self.discriminator = None

        if volume_type is not None:
            self.volume_type = volume_type
        if iops is not None:
            self.iops = iops
        if size_in_gb is not None:
            self.size_in_gb = size_in_gb
        if throughput is not None:
            self.throughput = throughput

    @property
    def volume_type(self):
        """Gets the volume_type of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501

        The volume type. Volume types supported are gp2, io1, standard  # noqa: E501

        :return: The volume_type of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this EmrClusterDefinitionVolumeSpecification.

        The volume type. Volume types supported are gp2, io1, standard  # noqa: E501

        :param volume_type: The volume_type of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :type: str
        """

        self._volume_type = volume_type

    @property
    def iops(self):
        """Gets the iops of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501

        The number of I/O operations per second (IOPS) that the volume supports  # noqa: E501

        :return: The iops of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :rtype: int
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this EmrClusterDefinitionVolumeSpecification.

        The number of I/O operations per second (IOPS) that the volume supports  # noqa: E501

        :param iops: The iops of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :type: int
        """

        self._iops = iops

    @property
    def size_in_gb(self):
        """Gets the size_in_gb of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501

        The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value                   is 10                  # noqa: E501

        :return: The size_in_gb of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :rtype: int
        """
        return self._size_in_gb

    @size_in_gb.setter
    def size_in_gb(self, size_in_gb):
        """Sets the size_in_gb of this EmrClusterDefinitionVolumeSpecification.

        The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value                   is 10                  # noqa: E501

        :param size_in_gb: The size_in_gb of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :type: int
        """

        self._size_in_gb = size_in_gb

    @property
    def throughput(self):
        """Gets the throughput of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501

        The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for                   gp3 volumes                  # noqa: E501

        :return: The throughput of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this EmrClusterDefinitionVolumeSpecification.

        The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for                   gp3 volumes                  # noqa: E501

        :param throughput: The throughput of this EmrClusterDefinitionVolumeSpecification.  # noqa: E501
        :type: int
        """

        self._throughput = throughput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrClusterDefinitionVolumeSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
