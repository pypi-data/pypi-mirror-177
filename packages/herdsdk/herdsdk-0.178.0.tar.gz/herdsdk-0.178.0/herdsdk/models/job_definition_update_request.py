# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JobDefinitionUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'activiti_job_xml': 'str',
        'parameters': 'list[Parameter]',
        's3_properties_location': 'S3PropertiesLocation'
    }

    attribute_map = {
        'description': 'description',
        'activiti_job_xml': 'activitiJobXml',
        'parameters': 'parameters',
        's3_properties_location': 's3PropertiesLocation'
    }

    def __init__(self, description=None, activiti_job_xml=None, parameters=None, s3_properties_location=None):  # noqa: E501
        """JobDefinitionUpdateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._description = None
        self._activiti_job_xml = None
        self._parameters = None
        self._s3_properties_location = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.activiti_job_xml = activiti_job_xml
        if parameters is not None:
            self.parameters = parameters
        if s3_properties_location is not None:
            self.s3_properties_location = s3_properties_location

    @property
    def description(self):
        """Gets the description of this JobDefinitionUpdateRequest.  # noqa: E501

        An optional description of the job definition  # noqa: E501

        :return: The description of this JobDefinitionUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobDefinitionUpdateRequest.

        An optional description of the job definition  # noqa: E501

        :param description: The description of this JobDefinitionUpdateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def activiti_job_xml(self):
        """Gets the activiti_job_xml of this JobDefinitionUpdateRequest.  # noqa: E501

        Activiti workflow XML related to the job. Id should be named as \"{applicationName}.{jobName}\". Activiti XML can not contain a                   CDATA section                  # noqa: E501

        :return: The activiti_job_xml of this JobDefinitionUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._activiti_job_xml

    @activiti_job_xml.setter
    def activiti_job_xml(self, activiti_job_xml):
        """Sets the activiti_job_xml of this JobDefinitionUpdateRequest.

        Activiti workflow XML related to the job. Id should be named as \"{applicationName}.{jobName}\". Activiti XML can not contain a                   CDATA section                  # noqa: E501

        :param activiti_job_xml: The activiti_job_xml of this JobDefinitionUpdateRequest.  # noqa: E501
        :type: str
        """
        if activiti_job_xml is None:
            raise ValueError("Invalid value for `activiti_job_xml`, must not be `None`")  # noqa: E501

        self._activiti_job_xml = activiti_job_xml

    @property
    def parameters(self):
        """Gets the parameters of this JobDefinitionUpdateRequest.  # noqa: E501

        Default list of key/value pairs that will be made available to the job when it is executed. These values can be overridden by                   parameters                   specified during the job execution                  # noqa: E501

        :return: The parameters of this JobDefinitionUpdateRequest.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this JobDefinitionUpdateRequest.

        Default list of key/value pairs that will be made available to the job when it is executed. These values can be overridden by                   parameters                   specified during the job execution                  # noqa: E501

        :param parameters: The parameters of this JobDefinitionUpdateRequest.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    @property
    def s3_properties_location(self):
        """Gets the s3_properties_location of this JobDefinitionUpdateRequest.  # noqa: E501


        :return: The s3_properties_location of this JobDefinitionUpdateRequest.  # noqa: E501
        :rtype: S3PropertiesLocation
        """
        return self._s3_properties_location

    @s3_properties_location.setter
    def s3_properties_location(self, s3_properties_location):
        """Sets the s3_properties_location of this JobDefinitionUpdateRequest.


        :param s3_properties_location: The s3_properties_location of this JobDefinitionUpdateRequest.  # noqa: E501
        :type: S3PropertiesLocation
        """

        self._s3_properties_location = s3_properties_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDefinitionUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
