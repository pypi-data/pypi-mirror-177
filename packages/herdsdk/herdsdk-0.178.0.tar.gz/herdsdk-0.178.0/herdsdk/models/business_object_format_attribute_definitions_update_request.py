# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectFormatAttributeDefinitionsUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attribute_definitions': 'list[AttributeDefinition]',
        'enable_business_object_data_published_attributes_change_event_notification': 'bool'
    }

    attribute_map = {
        'attribute_definitions': 'attributeDefinitions',
        'enable_business_object_data_published_attributes_change_event_notification': 'enableBusinessObjectDataPublishedAttributesChangeEventNotification'
    }

    def __init__(self, attribute_definitions=None, enable_business_object_data_published_attributes_change_event_notification=None):  # noqa: E501
        """BusinessObjectFormatAttributeDefinitionsUpdateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._attribute_definitions = None
        self._enable_business_object_data_published_attributes_change_event_notification = None
        self.discriminator = None

        if attribute_definitions is not None:
            self.attribute_definitions = attribute_definitions
        if enable_business_object_data_published_attributes_change_event_notification is not None:
            self.enable_business_object_data_published_attributes_change_event_notification = enable_business_object_data_published_attributes_change_event_notification

    @property
    def attribute_definitions(self):
        """Gets the attribute_definitions of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.  # noqa: E501

        A list of attribute definitions that specify attributes which are required to be specified when registering Business Object                   Data against this format. Providing a list with no elements will remove all existing attributes for the business object format                  # noqa: E501

        :return: The attribute_definitions of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.  # noqa: E501
        :rtype: list[AttributeDefinition]
        """
        return self._attribute_definitions

    @attribute_definitions.setter
    def attribute_definitions(self, attribute_definitions):
        """Sets the attribute_definitions of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.

        A list of attribute definitions that specify attributes which are required to be specified when registering Business Object                   Data against this format. Providing a list with no elements will remove all existing attributes for the business object format                  # noqa: E501

        :param attribute_definitions: The attribute_definitions of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.  # noqa: E501
        :type: list[AttributeDefinition]
        """

        self._attribute_definitions = attribute_definitions

    @property
    def enable_business_object_data_published_attributes_change_event_notification(self):
        """Gets the enable_business_object_data_published_attributes_change_event_notification of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.  # noqa: E501

        If true, enables Business Object Data Published Attributes Change Event Notification for all business object data registered                   under this business object format version                  # noqa: E501

        :return: The enable_business_object_data_published_attributes_change_event_notification of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_business_object_data_published_attributes_change_event_notification

    @enable_business_object_data_published_attributes_change_event_notification.setter
    def enable_business_object_data_published_attributes_change_event_notification(self, enable_business_object_data_published_attributes_change_event_notification):
        """Sets the enable_business_object_data_published_attributes_change_event_notification of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.

        If true, enables Business Object Data Published Attributes Change Event Notification for all business object data registered                   under this business object format version                  # noqa: E501

        :param enable_business_object_data_published_attributes_change_event_notification: The enable_business_object_data_published_attributes_change_event_notification of this BusinessObjectFormatAttributeDefinitionsUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._enable_business_object_data_published_attributes_change_event_notification = enable_business_object_data_published_attributes_change_event_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectFormatAttributeDefinitionsUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
