# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectDataNotificationRegistrationUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'business_object_data_event_type': 'str',
        'business_object_data_notification_filter': 'BusinessObjectDataNotificationFilter',
        'job_actions': 'list[JobAction]',
        'notification_registration_status': 'str'
    }

    attribute_map = {
        'business_object_data_event_type': 'businessObjectDataEventType',
        'business_object_data_notification_filter': 'businessObjectDataNotificationFilter',
        'job_actions': 'jobActions',
        'notification_registration_status': 'notificationRegistrationStatus'
    }

    def __init__(self, business_object_data_event_type=None, business_object_data_notification_filter=None, job_actions=None, notification_registration_status=None):  # noqa: E501
        """BusinessObjectDataNotificationRegistrationUpdateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._business_object_data_event_type = None
        self._business_object_data_notification_filter = None
        self._job_actions = None
        self._notification_registration_status = None
        self.discriminator = None

        self.business_object_data_event_type = business_object_data_event_type
        self.business_object_data_notification_filter = business_object_data_notification_filter
        if job_actions is not None:
            self.job_actions = job_actions
        self.notification_registration_status = notification_registration_status

    @property
    def business_object_data_event_type(self):
        """Gets the business_object_data_event_type of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501

        The type of business object data event in which this notification should trigger  # noqa: E501

        :return: The business_object_data_event_type of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._business_object_data_event_type

    @business_object_data_event_type.setter
    def business_object_data_event_type(self, business_object_data_event_type):
        """Sets the business_object_data_event_type of this BusinessObjectDataNotificationRegistrationUpdateRequest.

        The type of business object data event in which this notification should trigger  # noqa: E501

        :param business_object_data_event_type: The business_object_data_event_type of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :type: str
        """
        if business_object_data_event_type is None:
            raise ValueError("Invalid value for `business_object_data_event_type`, must not be `None`")  # noqa: E501

        self._business_object_data_event_type = business_object_data_event_type

    @property
    def business_object_data_notification_filter(self):
        """Gets the business_object_data_notification_filter of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501


        :return: The business_object_data_notification_filter of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :rtype: BusinessObjectDataNotificationFilter
        """
        return self._business_object_data_notification_filter

    @business_object_data_notification_filter.setter
    def business_object_data_notification_filter(self, business_object_data_notification_filter):
        """Sets the business_object_data_notification_filter of this BusinessObjectDataNotificationRegistrationUpdateRequest.


        :param business_object_data_notification_filter: The business_object_data_notification_filter of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :type: BusinessObjectDataNotificationFilter
        """
        if business_object_data_notification_filter is None:
            raise ValueError("Invalid value for `business_object_data_notification_filter`, must not be `None`")  # noqa: E501

        self._business_object_data_notification_filter = business_object_data_notification_filter

    @property
    def job_actions(self):
        """Gets the job_actions of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501

        The list of jobs to execute when this notification is triggered  # noqa: E501

        :return: The job_actions of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :rtype: list[JobAction]
        """
        return self._job_actions

    @job_actions.setter
    def job_actions(self, job_actions):
        """Sets the job_actions of this BusinessObjectDataNotificationRegistrationUpdateRequest.

        The list of jobs to execute when this notification is triggered  # noqa: E501

        :param job_actions: The job_actions of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :type: list[JobAction]
        """

        self._job_actions = job_actions

    @property
    def notification_registration_status(self):
        """Gets the notification_registration_status of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501

        The status of the notification registration  # noqa: E501

        :return: The notification_registration_status of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._notification_registration_status

    @notification_registration_status.setter
    def notification_registration_status(self, notification_registration_status):
        """Sets the notification_registration_status of this BusinessObjectDataNotificationRegistrationUpdateRequest.

        The status of the notification registration  # noqa: E501

        :param notification_registration_status: The notification_registration_status of this BusinessObjectDataNotificationRegistrationUpdateRequest.  # noqa: E501
        :type: str
        """
        if notification_registration_status is None:
            raise ValueError("Invalid value for `notification_registration_status`, must not be `None`")  # noqa: E501

        self._notification_registration_status = notification_registration_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectDataNotificationRegistrationUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
