# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RelationalTableRegistrationCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'business_object_definition_name': 'str',
        'business_object_definition_display_name': 'str',
        'business_object_format_usage': 'str',
        'data_provider_name': 'str',
        'relational_schema_name': 'str',
        'relational_table_name': 'str',
        'storage_name': 'str'
    }

    attribute_map = {
        'namespace': 'namespace',
        'business_object_definition_name': 'businessObjectDefinitionName',
        'business_object_definition_display_name': 'businessObjectDefinitionDisplayName',
        'business_object_format_usage': 'businessObjectFormatUsage',
        'data_provider_name': 'dataProviderName',
        'relational_schema_name': 'relationalSchemaName',
        'relational_table_name': 'relationalTableName',
        'storage_name': 'storageName'
    }

    def __init__(self, namespace=None, business_object_definition_name=None, business_object_definition_display_name=None, business_object_format_usage=None, data_provider_name=None, relational_schema_name=None, relational_table_name=None, storage_name=None):  # noqa: E501
        """RelationalTableRegistrationCreateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._business_object_definition_name = None
        self._business_object_definition_display_name = None
        self._business_object_format_usage = None
        self._data_provider_name = None
        self._relational_schema_name = None
        self._relational_table_name = None
        self._storage_name = None
        self.discriminator = None

        self.namespace = namespace
        self.business_object_definition_name = business_object_definition_name
        if business_object_definition_display_name is not None:
            self.business_object_definition_display_name = business_object_definition_display_name
        self.business_object_format_usage = business_object_format_usage
        self.data_provider_name = data_provider_name
        self.relational_schema_name = relational_schema_name
        self.relational_table_name = relational_table_name
        self.storage_name = storage_name

    @property
    def namespace(self):
        """Gets the namespace of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The Namespace to which a Business Object Format is related  # noqa: E501

        :return: The namespace of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this RelationalTableRegistrationCreateRequest.

        The Namespace to which a Business Object Format is related  # noqa: E501

        :param namespace: The namespace of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def business_object_definition_name(self):
        """Gets the business_object_definition_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The name of the Business Object Definition to which a Business Object Format is related  # noqa: E501

        :return: The business_object_definition_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_name

    @business_object_definition_name.setter
    def business_object_definition_name(self, business_object_definition_name):
        """Sets the business_object_definition_name of this RelationalTableRegistrationCreateRequest.

        The name of the Business Object Definition to which a Business Object Format is related  # noqa: E501

        :param business_object_definition_name: The business_object_definition_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """
        if business_object_definition_name is None:
            raise ValueError("Invalid value for `business_object_definition_name`, must not be `None`")  # noqa: E501

        self._business_object_definition_name = business_object_definition_name

    @property
    def business_object_definition_display_name(self):
        """Gets the business_object_definition_display_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The display name of the business object definition                  # noqa: E501

        :return: The business_object_definition_display_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_display_name

    @business_object_definition_display_name.setter
    def business_object_definition_display_name(self, business_object_definition_display_name):
        """Sets the business_object_definition_display_name of this RelationalTableRegistrationCreateRequest.

        The display name of the business object definition                  # noqa: E501

        :param business_object_definition_display_name: The business_object_definition_display_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """

        self._business_object_definition_display_name = business_object_definition_display_name

    @property
    def business_object_format_usage(self):
        """Gets the business_object_format_usage of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The Usage of this Business Object Format - a string describing how this format is used. Often used as a label for the Business                   Object Format                  # noqa: E501

        :return: The business_object_format_usage of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_usage

    @business_object_format_usage.setter
    def business_object_format_usage(self, business_object_format_usage):
        """Sets the business_object_format_usage of this RelationalTableRegistrationCreateRequest.

        The Usage of this Business Object Format - a string describing how this format is used. Often used as a label for the Business                   Object Format                  # noqa: E501

        :param business_object_format_usage: The business_object_format_usage of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """
        if business_object_format_usage is None:
            raise ValueError("Invalid value for `business_object_format_usage`, must not be `None`")  # noqa: E501

        self._business_object_format_usage = business_object_format_usage

    @property
    def data_provider_name(self):
        """Gets the data_provider_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The name of the data provider  # noqa: E501

        :return: The data_provider_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_provider_name

    @data_provider_name.setter
    def data_provider_name(self, data_provider_name):
        """Sets the data_provider_name of this RelationalTableRegistrationCreateRequest.

        The name of the data provider  # noqa: E501

        :param data_provider_name: The data_provider_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """
        if data_provider_name is None:
            raise ValueError("Invalid value for `data_provider_name`, must not be `None`")  # noqa: E501

        self._data_provider_name = data_provider_name

    @property
    def relational_schema_name(self):
        """Gets the relational_schema_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The relational schema name. A schema name must match the actual schema name as it is stored in the relational database                  # noqa: E501

        :return: The relational_schema_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._relational_schema_name

    @relational_schema_name.setter
    def relational_schema_name(self, relational_schema_name):
        """Sets the relational_schema_name of this RelationalTableRegistrationCreateRequest.

        The relational schema name. A schema name must match the actual schema name as it is stored in the relational database                  # noqa: E501

        :param relational_schema_name: The relational_schema_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """
        if relational_schema_name is None:
            raise ValueError("Invalid value for `relational_schema_name`, must not be `None`")  # noqa: E501

        self._relational_schema_name = relational_schema_name

    @property
    def relational_table_name(self):
        """Gets the relational_table_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The relational table name. A table name must match the actual table name as it is stored in the relational database                  # noqa: E501

        :return: The relational_table_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._relational_table_name

    @relational_table_name.setter
    def relational_table_name(self, relational_table_name):
        """Sets the relational_table_name of this RelationalTableRegistrationCreateRequest.

        The relational table name. A table name must match the actual table name as it is stored in the relational database                  # noqa: E501

        :param relational_table_name: The relational_table_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """
        if relational_table_name is None:
            raise ValueError("Invalid value for `relational_table_name`, must not be `None`")  # noqa: E501

        self._relational_table_name = relational_table_name

    @property
    def storage_name(self):
        """Gets the storage_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501

        The name of the storage  # noqa: E501

        :return: The storage_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """Sets the storage_name of this RelationalTableRegistrationCreateRequest.

        The name of the storage  # noqa: E501

        :param storage_name: The storage_name of this RelationalTableRegistrationCreateRequest.  # noqa: E501
        :type: str
        """
        if storage_name is None:
            raise ValueError("Invalid value for `storage_name`, must not be `None`")  # noqa: E501

        self._storage_name = storage_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelationalTableRegistrationCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
