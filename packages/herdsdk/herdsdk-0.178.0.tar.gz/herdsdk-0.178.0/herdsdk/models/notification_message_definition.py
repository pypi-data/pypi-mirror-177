# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NotificationMessageDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message_type': 'str',
        'message_destination': 'str',
        'message_velocity_template': 'str',
        'message_header_definitions': 'list[MessageHeaderDefinition]'
    }

    attribute_map = {
        'message_type': 'messageType',
        'message_destination': 'messageDestination',
        'message_velocity_template': 'messageVelocityTemplate',
        'message_header_definitions': 'messageHeaderDefinitions'
    }

    def __init__(self, message_type=None, message_destination=None, message_velocity_template=None, message_header_definitions=None):  # noqa: E501
        """NotificationMessageDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._message_type = None
        self._message_destination = None
        self._message_velocity_template = None
        self._message_header_definitions = None
        self.discriminator = None

        if message_type is not None:
            self.message_type = message_type
        if message_destination is not None:
            self.message_destination = message_destination
        if message_velocity_template is not None:
            self.message_velocity_template = message_velocity_template
        if message_header_definitions is not None:
            self.message_header_definitions = message_header_definitions

    @property
    def message_type(self):
        """Gets the message_type of this NotificationMessageDefinition.  # noqa: E501


        :return: The message_type of this NotificationMessageDefinition.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this NotificationMessageDefinition.


        :param message_type: The message_type of this NotificationMessageDefinition.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def message_destination(self):
        """Gets the message_destination of this NotificationMessageDefinition.  # noqa: E501


        :return: The message_destination of this NotificationMessageDefinition.  # noqa: E501
        :rtype: str
        """
        return self._message_destination

    @message_destination.setter
    def message_destination(self, message_destination):
        """Sets the message_destination of this NotificationMessageDefinition.


        :param message_destination: The message_destination of this NotificationMessageDefinition.  # noqa: E501
        :type: str
        """

        self._message_destination = message_destination

    @property
    def message_velocity_template(self):
        """Gets the message_velocity_template of this NotificationMessageDefinition.  # noqa: E501


        :return: The message_velocity_template of this NotificationMessageDefinition.  # noqa: E501
        :rtype: str
        """
        return self._message_velocity_template

    @message_velocity_template.setter
    def message_velocity_template(self, message_velocity_template):
        """Sets the message_velocity_template of this NotificationMessageDefinition.


        :param message_velocity_template: The message_velocity_template of this NotificationMessageDefinition.  # noqa: E501
        :type: str
        """

        self._message_velocity_template = message_velocity_template

    @property
    def message_header_definitions(self):
        """Gets the message_header_definitions of this NotificationMessageDefinition.  # noqa: E501


        :return: The message_header_definitions of this NotificationMessageDefinition.  # noqa: E501
        :rtype: list[MessageHeaderDefinition]
        """
        return self._message_header_definitions

    @message_header_definitions.setter
    def message_header_definitions(self, message_header_definitions):
        """Sets the message_header_definitions of this NotificationMessageDefinition.


        :param message_header_definitions: The message_header_definitions of this NotificationMessageDefinition.  # noqa: E501
        :type: list[MessageHeaderDefinition]
        """

        self._message_header_definitions = message_header_definitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationMessageDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
