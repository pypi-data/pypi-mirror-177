# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'namespace': 'str',
        'business_object_definition_name': 'str',
        'business_object_format_usage': 'str',
        'business_object_format_file_type': 'str',
        'business_object_format_version': 'int',
        'partition_key': 'str',
        'partition_value': 'str',
        'sub_partition_values': 'list[str]',
        'version': 'int',
        'latest_version': 'bool',
        'status': 'str',
        'storage_units': 'list[StorageUnit]',
        'attributes': 'list[Attribute]',
        'business_object_data_parents': 'list[BusinessObjectDataKey]',
        'business_object_data_children': 'list[BusinessObjectDataKey]',
        'business_object_data_status_history': 'list[BusinessObjectDataStatusChangeEvent]',
        'legal_hold': 'bool',
        'retention_expiration_date': 'datetime',
        'created_by_user_id': 'str',
        'created_on': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'business_object_definition_name': 'businessObjectDefinitionName',
        'business_object_format_usage': 'businessObjectFormatUsage',
        'business_object_format_file_type': 'businessObjectFormatFileType',
        'business_object_format_version': 'businessObjectFormatVersion',
        'partition_key': 'partitionKey',
        'partition_value': 'partitionValue',
        'sub_partition_values': 'subPartitionValues',
        'version': 'version',
        'latest_version': 'latestVersion',
        'status': 'status',
        'storage_units': 'storageUnits',
        'attributes': 'attributes',
        'business_object_data_parents': 'businessObjectDataParents',
        'business_object_data_children': 'businessObjectDataChildren',
        'business_object_data_status_history': 'businessObjectDataStatusHistory',
        'legal_hold': 'legalHold',
        'retention_expiration_date': 'retentionExpirationDate',
        'created_by_user_id': 'createdByUserId',
        'created_on': 'createdOn'
    }

    def __init__(self, id=None, namespace=None, business_object_definition_name=None, business_object_format_usage=None, business_object_format_file_type=None, business_object_format_version=None, partition_key=None, partition_value=None, sub_partition_values=None, version=None, latest_version=None, status=None, storage_units=None, attributes=None, business_object_data_parents=None, business_object_data_children=None, business_object_data_status_history=None, legal_hold=None, retention_expiration_date=None, created_by_user_id=None, created_on=None):  # noqa: E501
        """BusinessObjectData - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._namespace = None
        self._business_object_definition_name = None
        self._business_object_format_usage = None
        self._business_object_format_file_type = None
        self._business_object_format_version = None
        self._partition_key = None
        self._partition_value = None
        self._sub_partition_values = None
        self._version = None
        self._latest_version = None
        self._status = None
        self._storage_units = None
        self._attributes = None
        self._business_object_data_parents = None
        self._business_object_data_children = None
        self._business_object_data_status_history = None
        self._legal_hold = None
        self._retention_expiration_date = None
        self._created_by_user_id = None
        self._created_on = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.namespace = namespace
        self.business_object_definition_name = business_object_definition_name
        self.business_object_format_usage = business_object_format_usage
        self.business_object_format_file_type = business_object_format_file_type
        if business_object_format_version is not None:
            self.business_object_format_version = business_object_format_version
        self.partition_key = partition_key
        self.partition_value = partition_value
        if sub_partition_values is not None:
            self.sub_partition_values = sub_partition_values
        if version is not None:
            self.version = version
        if latest_version is not None:
            self.latest_version = latest_version
        if status is not None:
            self.status = status
        if storage_units is not None:
            self.storage_units = storage_units
        if attributes is not None:
            self.attributes = attributes
        if business_object_data_parents is not None:
            self.business_object_data_parents = business_object_data_parents
        if business_object_data_children is not None:
            self.business_object_data_children = business_object_data_children
        if business_object_data_status_history is not None:
            self.business_object_data_status_history = business_object_data_status_history
        if legal_hold is not None:
            self.legal_hold = legal_hold
        if retention_expiration_date is not None:
            self.retention_expiration_date = retention_expiration_date
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if created_on is not None:
            self.created_on = created_on

    @property
    def id(self):
        """Gets the id of this BusinessObjectData.  # noqa: E501

        The internal Id that uniquely references the newly created Business Object Data  # noqa: E501

        :return: The id of this BusinessObjectData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BusinessObjectData.

        The internal Id that uniquely references the newly created Business Object Data  # noqa: E501

        :param id: The id of this BusinessObjectData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this BusinessObjectData.  # noqa: E501

        The Namespace to which a Business Object Format is related  # noqa: E501

        :return: The namespace of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BusinessObjectData.

        The Namespace to which a Business Object Format is related  # noqa: E501

        :param namespace: The namespace of this BusinessObjectData.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def business_object_definition_name(self):
        """Gets the business_object_definition_name of this BusinessObjectData.  # noqa: E501

        The name of the Business Object Definition to which a Business Object Format is related  # noqa: E501

        :return: The business_object_definition_name of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_name

    @business_object_definition_name.setter
    def business_object_definition_name(self, business_object_definition_name):
        """Sets the business_object_definition_name of this BusinessObjectData.

        The name of the Business Object Definition to which a Business Object Format is related  # noqa: E501

        :param business_object_definition_name: The business_object_definition_name of this BusinessObjectData.  # noqa: E501
        :type: str
        """
        if business_object_definition_name is None:
            raise ValueError("Invalid value for `business_object_definition_name`, must not be `None`")  # noqa: E501

        self._business_object_definition_name = business_object_definition_name

    @property
    def business_object_format_usage(self):
        """Gets the business_object_format_usage of this BusinessObjectData.  # noqa: E501

        The Usage of this Business Object Format - a string describing how this format is used. Often used as a label for the Business                   Object Format. Does not have to be unique in the system, the Usage string is frequently shared across formats for multiple Business Object                   Definitions                  # noqa: E501

        :return: The business_object_format_usage of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_usage

    @business_object_format_usage.setter
    def business_object_format_usage(self, business_object_format_usage):
        """Sets the business_object_format_usage of this BusinessObjectData.

        The Usage of this Business Object Format - a string describing how this format is used. Often used as a label for the Business                   Object Format. Does not have to be unique in the system, the Usage string is frequently shared across formats for multiple Business Object                   Definitions                  # noqa: E501

        :param business_object_format_usage: The business_object_format_usage of this BusinessObjectData.  # noqa: E501
        :type: str
        """
        if business_object_format_usage is None:
            raise ValueError("Invalid value for `business_object_format_usage`, must not be `None`")  # noqa: E501

        self._business_object_format_usage = business_object_format_usage

    @property
    def business_object_format_file_type(self):
        """Gets the business_object_format_file_type of this BusinessObjectData.  # noqa: E501

        A File Type known to the system that describes the file type of data stored under a Business Object Format  # noqa: E501

        :return: The business_object_format_file_type of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_file_type

    @business_object_format_file_type.setter
    def business_object_format_file_type(self, business_object_format_file_type):
        """Sets the business_object_format_file_type of this BusinessObjectData.

        A File Type known to the system that describes the file type of data stored under a Business Object Format  # noqa: E501

        :param business_object_format_file_type: The business_object_format_file_type of this BusinessObjectData.  # noqa: E501
        :type: str
        """
        if business_object_format_file_type is None:
            raise ValueError("Invalid value for `business_object_format_file_type`, must not be `None`")  # noqa: E501

        self._business_object_format_file_type = business_object_format_file_type

    @property
    def business_object_format_version(self):
        """Gets the business_object_format_version of this BusinessObjectData.  # noqa: E501

        The Business Object Format Version for a previously registered Business Object Format  # noqa: E501

        :return: The business_object_format_version of this BusinessObjectData.  # noqa: E501
        :rtype: int
        """
        return self._business_object_format_version

    @business_object_format_version.setter
    def business_object_format_version(self, business_object_format_version):
        """Sets the business_object_format_version of this BusinessObjectData.

        The Business Object Format Version for a previously registered Business Object Format  # noqa: E501

        :param business_object_format_version: The business_object_format_version of this BusinessObjectData.  # noqa: E501
        :type: int
        """

        self._business_object_format_version = business_object_format_version

    @property
    def partition_key(self):
        """Gets the partition_key of this BusinessObjectData.  # noqa: E501

        The Partition Key this Business Object Data is being registered with. This must be they Partition Key specified in the Business                   Object Format                  # noqa: E501

        :return: The partition_key of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._partition_key

    @partition_key.setter
    def partition_key(self, partition_key):
        """Sets the partition_key of this BusinessObjectData.

        The Partition Key this Business Object Data is being registered with. This must be they Partition Key specified in the Business                   Object Format                  # noqa: E501

        :param partition_key: The partition_key of this BusinessObjectData.  # noqa: E501
        :type: str
        """
        if partition_key is None:
            raise ValueError("Invalid value for `partition_key`, must not be `None`")  # noqa: E501

        self._partition_key = partition_key

    @property
    def partition_value(self):
        """Gets the partition_value of this BusinessObjectData.  # noqa: E501

        The Partition Value that this Business Object Data is associated with  # noqa: E501

        :return: The partition_value of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._partition_value

    @partition_value.setter
    def partition_value(self, partition_value):
        """Sets the partition_value of this BusinessObjectData.

        The Partition Value that this Business Object Data is associated with  # noqa: E501

        :param partition_value: The partition_value of this BusinessObjectData.  # noqa: E501
        :type: str
        """
        if partition_value is None:
            raise ValueError("Invalid value for `partition_value`, must not be `None`")  # noqa: E501

        self._partition_value = partition_value

    @property
    def sub_partition_values(self):
        """Gets the sub_partition_values of this BusinessObjectData.  # noqa: E501

        A list of Sub-Partition values associated with this Business Object Data  # noqa: E501

        :return: The sub_partition_values of this BusinessObjectData.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_partition_values

    @sub_partition_values.setter
    def sub_partition_values(self, sub_partition_values):
        """Sets the sub_partition_values of this BusinessObjectData.

        A list of Sub-Partition values associated with this Business Object Data  # noqa: E501

        :param sub_partition_values: The sub_partition_values of this BusinessObjectData.  # noqa: E501
        :type: list[str]
        """

        self._sub_partition_values = sub_partition_values

    @property
    def version(self):
        """Gets the version of this BusinessObjectData.  # noqa: E501

        The numeric version of a Business Object Data. Each time a new data object is registered, the new version will be the previous                   version + 1                  # noqa: E501

        :return: The version of this BusinessObjectData.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BusinessObjectData.

        The numeric version of a Business Object Data. Each time a new data object is registered, the new version will be the previous                   version + 1                  # noqa: E501

        :param version: The version of this BusinessObjectData.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def latest_version(self):
        """Gets the latest_version of this BusinessObjectData.  # noqa: E501

        *No longer in use* A boolean flag that shows whether this instance of data is the latest or not. Once a new version of data is                   registered, any previous versions will no longer be the latest                  # noqa: E501

        :return: The latest_version of this BusinessObjectData.  # noqa: E501
        :rtype: bool
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this BusinessObjectData.

        *No longer in use* A boolean flag that shows whether this instance of data is the latest or not. Once a new version of data is                   registered, any previous versions will no longer be the latest                  # noqa: E501

        :param latest_version: The latest_version of this BusinessObjectData.  # noqa: E501
        :type: bool
        """

        self._latest_version = latest_version

    @property
    def status(self):
        """Gets the status of this BusinessObjectData.  # noqa: E501

        The status of the Business Object Data. One of the following values: VALID, UPLOADING, PENDING_VALID, PROCESSING, INVALID,                   ARCHIVED, EXPIRED, or DELETED                  # noqa: E501

        :return: The status of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BusinessObjectData.

        The status of the Business Object Data. One of the following values: VALID, UPLOADING, PENDING_VALID, PROCESSING, INVALID,                   ARCHIVED, EXPIRED, or DELETED                  # noqa: E501

        :param status: The status of this BusinessObjectData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def storage_units(self):
        """Gets the storage_units of this BusinessObjectData.  # noqa: E501

        A container for the Storage Units associated with a Business Object Data  # noqa: E501

        :return: The storage_units of this BusinessObjectData.  # noqa: E501
        :rtype: list[StorageUnit]
        """
        return self._storage_units

    @storage_units.setter
    def storage_units(self, storage_units):
        """Sets the storage_units of this BusinessObjectData.

        A container for the Storage Units associated with a Business Object Data  # noqa: E501

        :param storage_units: The storage_units of this BusinessObjectData.  # noqa: E501
        :type: list[StorageUnit]
        """

        self._storage_units = storage_units

    @property
    def attributes(self):
        """Gets the attributes of this BusinessObjectData.  # noqa: E501

        Collection of name-value pairs. This can be used to store things such as S3 bucket names, validation flags, and custom                   user-defined meta-data about this storage. Attributes values are required for certain keys that are defined as Attribute Definitions in the                   Business Object Format                  # noqa: E501

        :return: The attributes of this BusinessObjectData.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this BusinessObjectData.

        Collection of name-value pairs. This can be used to store things such as S3 bucket names, validation flags, and custom                   user-defined meta-data about this storage. Attributes values are required for certain keys that are defined as Attribute Definitions in the                   Business Object Format                  # noqa: E501

        :param attributes: The attributes of this BusinessObjectData.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    @property
    def business_object_data_parents(self):
        """Gets the business_object_data_parents of this BusinessObjectData.  # noqa: E501

        A list of Business Object Data parents (i.e. predecessors) that were used/needed in the creation of this data. This is used for                   data lineage. Each parent consists of the key data that uniquely defines a reference to a single Business Object Data.                  # noqa: E501

        :return: The business_object_data_parents of this BusinessObjectData.  # noqa: E501
        :rtype: list[BusinessObjectDataKey]
        """
        return self._business_object_data_parents

    @business_object_data_parents.setter
    def business_object_data_parents(self, business_object_data_parents):
        """Sets the business_object_data_parents of this BusinessObjectData.

        A list of Business Object Data parents (i.e. predecessors) that were used/needed in the creation of this data. This is used for                   data lineage. Each parent consists of the key data that uniquely defines a reference to a single Business Object Data.                  # noqa: E501

        :param business_object_data_parents: The business_object_data_parents of this BusinessObjectData.  # noqa: E501
        :type: list[BusinessObjectDataKey]
        """

        self._business_object_data_parents = business_object_data_parents

    @property
    def business_object_data_children(self):
        """Gets the business_object_data_children of this BusinessObjectData.  # noqa: E501

        A list of Business Object Data children that were creation from this data. This is used for data lineage. Each child consists                   of the key data that uniquely defines a reference to a single Business Object Data.                  # noqa: E501

        :return: The business_object_data_children of this BusinessObjectData.  # noqa: E501
        :rtype: list[BusinessObjectDataKey]
        """
        return self._business_object_data_children

    @business_object_data_children.setter
    def business_object_data_children(self, business_object_data_children):
        """Sets the business_object_data_children of this BusinessObjectData.

        A list of Business Object Data children that were creation from this data. This is used for data lineage. Each child consists                   of the key data that uniquely defines a reference to a single Business Object Data.                  # noqa: E501

        :param business_object_data_children: The business_object_data_children of this BusinessObjectData.  # noqa: E501
        :type: list[BusinessObjectDataKey]
        """

        self._business_object_data_children = business_object_data_children

    @property
    def business_object_data_status_history(self):
        """Gets the business_object_data_status_history of this BusinessObjectData.  # noqa: E501

        Lists all business object data status change events for this business object data  # noqa: E501

        :return: The business_object_data_status_history of this BusinessObjectData.  # noqa: E501
        :rtype: list[BusinessObjectDataStatusChangeEvent]
        """
        return self._business_object_data_status_history

    @business_object_data_status_history.setter
    def business_object_data_status_history(self, business_object_data_status_history):
        """Sets the business_object_data_status_history of this BusinessObjectData.

        Lists all business object data status change events for this business object data  # noqa: E501

        :param business_object_data_status_history: The business_object_data_status_history of this BusinessObjectData.  # noqa: E501
        :type: list[BusinessObjectDataStatusChangeEvent]
        """

        self._business_object_data_status_history = business_object_data_status_history

    @property
    def legal_hold(self):
        """Gets the legal_hold of this BusinessObjectData.  # noqa: E501

        Indicate if this Business Object Data is under legal hold  # noqa: E501

        :return: The legal_hold of this BusinessObjectData.  # noqa: E501
        :rtype: bool
        """
        return self._legal_hold

    @legal_hold.setter
    def legal_hold(self, legal_hold):
        """Sets the legal_hold of this BusinessObjectData.

        Indicate if this Business Object Data is under legal hold  # noqa: E501

        :param legal_hold: The legal_hold of this BusinessObjectData.  # noqa: E501
        :type: bool
        """

        self._legal_hold = legal_hold

    @property
    def retention_expiration_date(self):
        """Gets the retention_expiration_date of this BusinessObjectData.  # noqa: E501

        The retention expiration date for this business object data  # noqa: E501

        :return: The retention_expiration_date of this BusinessObjectData.  # noqa: E501
        :rtype: datetime
        """
        return self._retention_expiration_date

    @retention_expiration_date.setter
    def retention_expiration_date(self, retention_expiration_date):
        """Sets the retention_expiration_date of this BusinessObjectData.

        The retention expiration date for this business object data  # noqa: E501

        :param retention_expiration_date: The retention_expiration_date of this BusinessObjectData.  # noqa: E501
        :type: datetime
        """

        self._retention_expiration_date = retention_expiration_date

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this BusinessObjectData.  # noqa: E501

        The User ID of the user who created this business object data  # noqa: E501

        :return: The created_by_user_id of this BusinessObjectData.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this BusinessObjectData.

        The User ID of the user who created this business object data  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this BusinessObjectData.  # noqa: E501
        :type: str
        """

        self._created_by_user_id = created_by_user_id

    @property
    def created_on(self):
        """Gets the created_on of this BusinessObjectData.  # noqa: E501

        The timestamp when this business object data was created on  # noqa: E501

        :return: The created_on of this BusinessObjectData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this BusinessObjectData.

        The timestamp when this business object data was created on  # noqa: E501

        :param created_on: The created_on of this BusinessObjectData.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
