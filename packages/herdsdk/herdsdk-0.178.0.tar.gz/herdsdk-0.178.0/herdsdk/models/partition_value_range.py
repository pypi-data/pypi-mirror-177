# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PartitionValueRange(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_partition_value': 'str',
        'end_partition_value': 'str'
    }

    attribute_map = {
        'start_partition_value': 'startPartitionValue',
        'end_partition_value': 'endPartitionValue'
    }

    def __init__(self, start_partition_value=None, end_partition_value=None):  # noqa: E501
        """PartitionValueRange - a model defined in OpenAPI"""  # noqa: E501

        self._start_partition_value = None
        self._end_partition_value = None
        self.discriminator = None

        self.start_partition_value = start_partition_value
        self.end_partition_value = end_partition_value

    @property
    def start_partition_value(self):
        """Gets the start_partition_value of this PartitionValueRange.  # noqa: E501

        The start partition value for the partition value range. Required when partitionValueRange is present  # noqa: E501

        :return: The start_partition_value of this PartitionValueRange.  # noqa: E501
        :rtype: str
        """
        return self._start_partition_value

    @start_partition_value.setter
    def start_partition_value(self, start_partition_value):
        """Sets the start_partition_value of this PartitionValueRange.

        The start partition value for the partition value range. Required when partitionValueRange is present  # noqa: E501

        :param start_partition_value: The start_partition_value of this PartitionValueRange.  # noqa: E501
        :type: str
        """
        if start_partition_value is None:
            raise ValueError("Invalid value for `start_partition_value`, must not be `None`")  # noqa: E501

        self._start_partition_value = start_partition_value

    @property
    def end_partition_value(self):
        """Gets the end_partition_value of this PartitionValueRange.  # noqa: E501

        The end partition value for the partition value range. Required when partitionValueRange is present  # noqa: E501

        :return: The end_partition_value of this PartitionValueRange.  # noqa: E501
        :rtype: str
        """
        return self._end_partition_value

    @end_partition_value.setter
    def end_partition_value(self, end_partition_value):
        """Sets the end_partition_value of this PartitionValueRange.

        The end partition value for the partition value range. Required when partitionValueRange is present  # noqa: E501

        :param end_partition_value: The end_partition_value of this PartitionValueRange.  # noqa: E501
        :type: str
        """
        if end_partition_value is None:
            raise ValueError("Invalid value for `end_partition_value`, must not be `None`")  # noqa: E501

        self._end_partition_value = end_partition_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartitionValueRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
