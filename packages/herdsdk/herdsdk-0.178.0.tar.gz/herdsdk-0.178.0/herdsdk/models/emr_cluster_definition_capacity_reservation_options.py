# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrClusterDefinitionCapacityReservationOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'usage_strategy': 'str',
        'capacity_reservation_preference': 'str',
        'capacity_reservation_resource_group_arn': 'str'
    }

    attribute_map = {
        'usage_strategy': 'usageStrategy',
        'capacity_reservation_preference': 'capacityReservationPreference',
        'capacity_reservation_resource_group_arn': 'capacityReservationResourceGroupArn'
    }

    def __init__(self, usage_strategy=None, capacity_reservation_preference=None, capacity_reservation_resource_group_arn=None):  # noqa: E501
        """EmrClusterDefinitionCapacityReservationOptions - a model defined in OpenAPI"""  # noqa: E501

        self._usage_strategy = None
        self._capacity_reservation_preference = None
        self._capacity_reservation_resource_group_arn = None
        self.discriminator = None

        if usage_strategy is not None:
            self.usage_strategy = usage_strategy
        if capacity_reservation_preference is not None:
            self.capacity_reservation_preference = capacity_reservation_preference
        if capacity_reservation_resource_group_arn is not None:
            self.capacity_reservation_resource_group_arn = capacity_reservation_resource_group_arn

    @property
    def usage_strategy(self):
        """Gets the usage_strategy of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501

        Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity                  # noqa: E501

        :return: The usage_strategy of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501
        :rtype: str
        """
        return self._usage_strategy

    @usage_strategy.setter
    def usage_strategy(self, usage_strategy):
        """Sets the usage_strategy of this EmrClusterDefinitionCapacityReservationOptions.

        Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity                  # noqa: E501

        :param usage_strategy: The usage_strategy of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501
        :type: str
        """

        self._usage_strategy = usage_strategy

    @property
    def capacity_reservation_preference(self):
        """Gets the capacity_reservation_preference of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501

        Indicates the instance's Capacity Reservation preferences                  # noqa: E501

        :return: The capacity_reservation_preference of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501
        :rtype: str
        """
        return self._capacity_reservation_preference

    @capacity_reservation_preference.setter
    def capacity_reservation_preference(self, capacity_reservation_preference):
        """Sets the capacity_reservation_preference of this EmrClusterDefinitionCapacityReservationOptions.

        Indicates the instance's Capacity Reservation preferences                  # noqa: E501

        :param capacity_reservation_preference: The capacity_reservation_preference of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501
        :type: str
        """

        self._capacity_reservation_preference = capacity_reservation_preference

    @property
    def capacity_reservation_resource_group_arn(self):
        """Gets the capacity_reservation_resource_group_arn of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501

        The ARN of the Capacity Reservation resource group in which to run the instance                  # noqa: E501

        :return: The capacity_reservation_resource_group_arn of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501
        :rtype: str
        """
        return self._capacity_reservation_resource_group_arn

    @capacity_reservation_resource_group_arn.setter
    def capacity_reservation_resource_group_arn(self, capacity_reservation_resource_group_arn):
        """Sets the capacity_reservation_resource_group_arn of this EmrClusterDefinitionCapacityReservationOptions.

        The ARN of the Capacity Reservation resource group in which to run the instance                  # noqa: E501

        :param capacity_reservation_resource_group_arn: The capacity_reservation_resource_group_arn of this EmrClusterDefinitionCapacityReservationOptions.  # noqa: E501
        :type: str
        """

        self._capacity_reservation_resource_group_arn = capacity_reservation_resource_group_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrClusterDefinitionCapacityReservationOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
