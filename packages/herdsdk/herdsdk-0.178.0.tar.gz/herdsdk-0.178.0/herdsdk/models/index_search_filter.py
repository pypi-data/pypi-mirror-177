# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IndexSearchFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_exclusion_search_filter': 'bool',
        'index_search_keys': 'list[IndexSearchKey]'
    }

    attribute_map = {
        'is_exclusion_search_filter': 'isExclusionSearchFilter',
        'index_search_keys': 'indexSearchKeys'
    }

    def __init__(self, is_exclusion_search_filter=None, index_search_keys=None):  # noqa: E501
        """IndexSearchFilter - a model defined in OpenAPI"""  # noqa: E501

        self._is_exclusion_search_filter = None
        self._index_search_keys = None
        self.discriminator = None

        if is_exclusion_search_filter is not None:
            self.is_exclusion_search_filter = is_exclusion_search_filter
        if index_search_keys is not None:
            self.index_search_keys = index_search_keys

    @property
    def is_exclusion_search_filter(self):
        """Gets the is_exclusion_search_filter of this IndexSearchFilter.  # noqa: E501

        An optional boolean flag that specifies if the search filter is an exclusion filter that excludes items from the search results                  # noqa: E501

        :return: The is_exclusion_search_filter of this IndexSearchFilter.  # noqa: E501
        :rtype: bool
        """
        return self._is_exclusion_search_filter

    @is_exclusion_search_filter.setter
    def is_exclusion_search_filter(self, is_exclusion_search_filter):
        """Sets the is_exclusion_search_filter of this IndexSearchFilter.

        An optional boolean flag that specifies if the search filter is an exclusion filter that excludes items from the search results                  # noqa: E501

        :param is_exclusion_search_filter: The is_exclusion_search_filter of this IndexSearchFilter.  # noqa: E501
        :type: bool
        """

        self._is_exclusion_search_filter = is_exclusion_search_filter

    @property
    def index_search_keys(self):
        """Gets the index_search_keys of this IndexSearchFilter.  # noqa: E501

        A list of index search keys. Multiple search keys are supported which are OR-ed  # noqa: E501

        :return: The index_search_keys of this IndexSearchFilter.  # noqa: E501
        :rtype: list[IndexSearchKey]
        """
        return self._index_search_keys

    @index_search_keys.setter
    def index_search_keys(self, index_search_keys):
        """Sets the index_search_keys of this IndexSearchFilter.

        A list of index search keys. Multiple search keys are supported which are OR-ed  # noqa: E501

        :param index_search_keys: The index_search_keys of this IndexSearchFilter.  # noqa: E501
        :type: list[IndexSearchKey]
        """

        self._index_search_keys = index_search_keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexSearchFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
