# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IndexSearchKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tag_key': 'TagKey',
        'index_search_result_type_key': 'IndexSearchResultTypeKey',
        'include_tag_hierarchy': 'bool'
    }

    attribute_map = {
        'tag_key': 'tagKey',
        'index_search_result_type_key': 'indexSearchResultTypeKey',
        'include_tag_hierarchy': 'includeTagHierarchy'
    }

    def __init__(self, tag_key=None, index_search_result_type_key=None, include_tag_hierarchy=None):  # noqa: E501
        """IndexSearchKey - a model defined in OpenAPI"""  # noqa: E501

        self._tag_key = None
        self._index_search_result_type_key = None
        self._include_tag_hierarchy = None
        self.discriminator = None

        if tag_key is not None:
            self.tag_key = tag_key
        if index_search_result_type_key is not None:
            self.index_search_result_type_key = index_search_result_type_key
        if include_tag_hierarchy is not None:
            self.include_tag_hierarchy = include_tag_hierarchy

    @property
    def tag_key(self):
        """Gets the tag_key of this IndexSearchKey.  # noqa: E501


        :return: The tag_key of this IndexSearchKey.  # noqa: E501
        :rtype: TagKey
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this IndexSearchKey.


        :param tag_key: The tag_key of this IndexSearchKey.  # noqa: E501
        :type: TagKey
        """

        self._tag_key = tag_key

    @property
    def index_search_result_type_key(self):
        """Gets the index_search_result_type_key of this IndexSearchKey.  # noqa: E501


        :return: The index_search_result_type_key of this IndexSearchKey.  # noqa: E501
        :rtype: IndexSearchResultTypeKey
        """
        return self._index_search_result_type_key

    @index_search_result_type_key.setter
    def index_search_result_type_key(self, index_search_result_type_key):
        """Sets the index_search_result_type_key of this IndexSearchKey.


        :param index_search_result_type_key: The index_search_result_type_key of this IndexSearchKey.  # noqa: E501
        :type: IndexSearchResultTypeKey
        """

        self._index_search_result_type_key = index_search_result_type_key

    @property
    def include_tag_hierarchy(self):
        """Gets the include_tag_hierarchy of this IndexSearchKey.  # noqa: E501

        An optional boolean flag that specifies if business object definition associated with entire tag hierarchy is to be retrieved                  # noqa: E501

        :return: The include_tag_hierarchy of this IndexSearchKey.  # noqa: E501
        :rtype: bool
        """
        return self._include_tag_hierarchy

    @include_tag_hierarchy.setter
    def include_tag_hierarchy(self, include_tag_hierarchy):
        """Sets the include_tag_hierarchy of this IndexSearchKey.

        An optional boolean flag that specifies if business object definition associated with entire tag hierarchy is to be retrieved                  # noqa: E501

        :param include_tag_hierarchy: The include_tag_hierarchy of this IndexSearchKey.  # noqa: E501
        :type: bool
        """

        self._include_tag_hierarchy = include_tag_hierarchy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexSearchKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
