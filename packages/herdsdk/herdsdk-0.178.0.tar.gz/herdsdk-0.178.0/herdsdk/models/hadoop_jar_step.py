# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HadoopJarStep(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'step_name': 'str',
        'jar_location': 'str',
        'main_class': 'str',
        'script_arguments': 'list[str]',
        'continue_on_error': 'bool'
    }

    attribute_map = {
        'step_name': 'stepName',
        'jar_location': 'jarLocation',
        'main_class': 'mainClass',
        'script_arguments': 'scriptArguments',
        'continue_on_error': 'continueOnError'
    }

    def __init__(self, step_name=None, jar_location=None, main_class=None, script_arguments=None, continue_on_error=None):  # noqa: E501
        """HadoopJarStep - a model defined in OpenAPI"""  # noqa: E501

        self._step_name = None
        self._jar_location = None
        self._main_class = None
        self._script_arguments = None
        self._continue_on_error = None
        self.discriminator = None

        self.step_name = step_name
        self.jar_location = jar_location
        if main_class is not None:
            self.main_class = main_class
        if script_arguments is not None:
            self.script_arguments = script_arguments
        if continue_on_error is not None:
            self.continue_on_error = continue_on_error

    @property
    def step_name(self):
        """Gets the step_name of this HadoopJarStep.  # noqa: E501


        :return: The step_name of this HadoopJarStep.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this HadoopJarStep.


        :param step_name: The step_name of this HadoopJarStep.  # noqa: E501
        :type: str
        """
        if step_name is None:
            raise ValueError("Invalid value for `step_name`, must not be `None`")  # noqa: E501

        self._step_name = step_name

    @property
    def jar_location(self):
        """Gets the jar_location of this HadoopJarStep.  # noqa: E501


        :return: The jar_location of this HadoopJarStep.  # noqa: E501
        :rtype: str
        """
        return self._jar_location

    @jar_location.setter
    def jar_location(self, jar_location):
        """Sets the jar_location of this HadoopJarStep.


        :param jar_location: The jar_location of this HadoopJarStep.  # noqa: E501
        :type: str
        """
        if jar_location is None:
            raise ValueError("Invalid value for `jar_location`, must not be `None`")  # noqa: E501

        self._jar_location = jar_location

    @property
    def main_class(self):
        """Gets the main_class of this HadoopJarStep.  # noqa: E501


        :return: The main_class of this HadoopJarStep.  # noqa: E501
        :rtype: str
        """
        return self._main_class

    @main_class.setter
    def main_class(self, main_class):
        """Sets the main_class of this HadoopJarStep.


        :param main_class: The main_class of this HadoopJarStep.  # noqa: E501
        :type: str
        """

        self._main_class = main_class

    @property
    def script_arguments(self):
        """Gets the script_arguments of this HadoopJarStep.  # noqa: E501


        :return: The script_arguments of this HadoopJarStep.  # noqa: E501
        :rtype: list[str]
        """
        return self._script_arguments

    @script_arguments.setter
    def script_arguments(self, script_arguments):
        """Sets the script_arguments of this HadoopJarStep.


        :param script_arguments: The script_arguments of this HadoopJarStep.  # noqa: E501
        :type: list[str]
        """

        self._script_arguments = script_arguments

    @property
    def continue_on_error(self):
        """Gets the continue_on_error of this HadoopJarStep.  # noqa: E501


        :return: The continue_on_error of this HadoopJarStep.  # noqa: E501
        :rtype: bool
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """Sets the continue_on_error of this HadoopJarStep.


        :param continue_on_error: The continue_on_error of this HadoopJarStep.  # noqa: E501
        :type: bool
        """

        self._continue_on_error = continue_on_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HadoopJarStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
