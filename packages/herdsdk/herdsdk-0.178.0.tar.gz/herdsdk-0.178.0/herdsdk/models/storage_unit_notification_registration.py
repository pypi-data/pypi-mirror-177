# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StorageUnitNotificationRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'storage_unit_notification_registration_key': 'NotificationRegistrationKey',
        'storage_unit_event_type': 'str',
        'storage_unit_notification_filter': 'StorageUnitNotificationFilter',
        'job_actions': 'list[JobAction]',
        'notification_registration_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'storage_unit_notification_registration_key': 'storageUnitNotificationRegistrationKey',
        'storage_unit_event_type': 'storageUnitEventType',
        'storage_unit_notification_filter': 'storageUnitNotificationFilter',
        'job_actions': 'jobActions',
        'notification_registration_status': 'notificationRegistrationStatus'
    }

    def __init__(self, id=None, storage_unit_notification_registration_key=None, storage_unit_event_type=None, storage_unit_notification_filter=None, job_actions=None, notification_registration_status=None):  # noqa: E501
        """StorageUnitNotificationRegistration - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._storage_unit_notification_registration_key = None
        self._storage_unit_event_type = None
        self._storage_unit_notification_filter = None
        self._job_actions = None
        self._notification_registration_status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.storage_unit_notification_registration_key = storage_unit_notification_registration_key
        self.storage_unit_event_type = storage_unit_event_type
        self.storage_unit_notification_filter = storage_unit_notification_filter
        if job_actions is not None:
            self.job_actions = job_actions
        self.notification_registration_status = notification_registration_status

    @property
    def id(self):
        """Gets the id of this StorageUnitNotificationRegistration.  # noqa: E501

        A system unique ID of this registration  # noqa: E501

        :return: The id of this StorageUnitNotificationRegistration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageUnitNotificationRegistration.

        A system unique ID of this registration  # noqa: E501

        :param id: The id of this StorageUnitNotificationRegistration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def storage_unit_notification_registration_key(self):
        """Gets the storage_unit_notification_registration_key of this StorageUnitNotificationRegistration.  # noqa: E501


        :return: The storage_unit_notification_registration_key of this StorageUnitNotificationRegistration.  # noqa: E501
        :rtype: NotificationRegistrationKey
        """
        return self._storage_unit_notification_registration_key

    @storage_unit_notification_registration_key.setter
    def storage_unit_notification_registration_key(self, storage_unit_notification_registration_key):
        """Sets the storage_unit_notification_registration_key of this StorageUnitNotificationRegistration.


        :param storage_unit_notification_registration_key: The storage_unit_notification_registration_key of this StorageUnitNotificationRegistration.  # noqa: E501
        :type: NotificationRegistrationKey
        """
        if storage_unit_notification_registration_key is None:
            raise ValueError("Invalid value for `storage_unit_notification_registration_key`, must not be `None`")  # noqa: E501

        self._storage_unit_notification_registration_key = storage_unit_notification_registration_key

    @property
    def storage_unit_event_type(self):
        """Gets the storage_unit_event_type of this StorageUnitNotificationRegistration.  # noqa: E501

        The type of storage unit event in which this notification should trigger. Supported event types: STRGE_UNIT_STTS_CHG                  # noqa: E501

        :return: The storage_unit_event_type of this StorageUnitNotificationRegistration.  # noqa: E501
        :rtype: str
        """
        return self._storage_unit_event_type

    @storage_unit_event_type.setter
    def storage_unit_event_type(self, storage_unit_event_type):
        """Sets the storage_unit_event_type of this StorageUnitNotificationRegistration.

        The type of storage unit event in which this notification should trigger. Supported event types: STRGE_UNIT_STTS_CHG                  # noqa: E501

        :param storage_unit_event_type: The storage_unit_event_type of this StorageUnitNotificationRegistration.  # noqa: E501
        :type: str
        """
        if storage_unit_event_type is None:
            raise ValueError("Invalid value for `storage_unit_event_type`, must not be `None`")  # noqa: E501

        self._storage_unit_event_type = storage_unit_event_type

    @property
    def storage_unit_notification_filter(self):
        """Gets the storage_unit_notification_filter of this StorageUnitNotificationRegistration.  # noqa: E501


        :return: The storage_unit_notification_filter of this StorageUnitNotificationRegistration.  # noqa: E501
        :rtype: StorageUnitNotificationFilter
        """
        return self._storage_unit_notification_filter

    @storage_unit_notification_filter.setter
    def storage_unit_notification_filter(self, storage_unit_notification_filter):
        """Sets the storage_unit_notification_filter of this StorageUnitNotificationRegistration.


        :param storage_unit_notification_filter: The storage_unit_notification_filter of this StorageUnitNotificationRegistration.  # noqa: E501
        :type: StorageUnitNotificationFilter
        """
        if storage_unit_notification_filter is None:
            raise ValueError("Invalid value for `storage_unit_notification_filter`, must not be `None`")  # noqa: E501

        self._storage_unit_notification_filter = storage_unit_notification_filter

    @property
    def job_actions(self):
        """Gets the job_actions of this StorageUnitNotificationRegistration.  # noqa: E501

        The list of jobs to execute when this notification is triggered  # noqa: E501

        :return: The job_actions of this StorageUnitNotificationRegistration.  # noqa: E501
        :rtype: list[JobAction]
        """
        return self._job_actions

    @job_actions.setter
    def job_actions(self, job_actions):
        """Sets the job_actions of this StorageUnitNotificationRegistration.

        The list of jobs to execute when this notification is triggered  # noqa: E501

        :param job_actions: The job_actions of this StorageUnitNotificationRegistration.  # noqa: E501
        :type: list[JobAction]
        """

        self._job_actions = job_actions

    @property
    def notification_registration_status(self):
        """Gets the notification_registration_status of this StorageUnitNotificationRegistration.  # noqa: E501

        The status of the notification registration. One of the following values: ENABLED or DISABLED  # noqa: E501

        :return: The notification_registration_status of this StorageUnitNotificationRegistration.  # noqa: E501
        :rtype: str
        """
        return self._notification_registration_status

    @notification_registration_status.setter
    def notification_registration_status(self, notification_registration_status):
        """Sets the notification_registration_status of this StorageUnitNotificationRegistration.

        The status of the notification registration. One of the following values: ENABLED or DISABLED  # noqa: E501

        :param notification_registration_status: The notification_registration_status of this StorageUnitNotificationRegistration.  # noqa: E501
        :type: str
        """
        if notification_registration_status is None:
            raise ValueError("Invalid value for `notification_registration_status`, must not be `None`")  # noqa: E501

        self._notification_registration_status = notification_registration_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageUnitNotificationRegistration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
