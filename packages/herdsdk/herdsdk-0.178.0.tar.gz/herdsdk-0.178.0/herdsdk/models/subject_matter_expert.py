# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubjectMatterExpert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subject_matter_expert_key': 'SubjectMatterExpertKey',
        'contact_details': 'SubjectMatterExpertContactDetails'
    }

    attribute_map = {
        'subject_matter_expert_key': 'subjectMatterExpertKey',
        'contact_details': 'contactDetails'
    }

    def __init__(self, subject_matter_expert_key=None, contact_details=None):  # noqa: E501
        """SubjectMatterExpert - a model defined in OpenAPI"""  # noqa: E501

        self._subject_matter_expert_key = None
        self._contact_details = None
        self.discriminator = None

        self.subject_matter_expert_key = subject_matter_expert_key
        self.contact_details = contact_details

    @property
    def subject_matter_expert_key(self):
        """Gets the subject_matter_expert_key of this SubjectMatterExpert.  # noqa: E501


        :return: The subject_matter_expert_key of this SubjectMatterExpert.  # noqa: E501
        :rtype: SubjectMatterExpertKey
        """
        return self._subject_matter_expert_key

    @subject_matter_expert_key.setter
    def subject_matter_expert_key(self, subject_matter_expert_key):
        """Sets the subject_matter_expert_key of this SubjectMatterExpert.


        :param subject_matter_expert_key: The subject_matter_expert_key of this SubjectMatterExpert.  # noqa: E501
        :type: SubjectMatterExpertKey
        """
        if subject_matter_expert_key is None:
            raise ValueError("Invalid value for `subject_matter_expert_key`, must not be `None`")  # noqa: E501

        self._subject_matter_expert_key = subject_matter_expert_key

    @property
    def contact_details(self):
        """Gets the contact_details of this SubjectMatterExpert.  # noqa: E501


        :return: The contact_details of this SubjectMatterExpert.  # noqa: E501
        :rtype: SubjectMatterExpertContactDetails
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this SubjectMatterExpert.


        :param contact_details: The contact_details of this SubjectMatterExpert.  # noqa: E501
        :type: SubjectMatterExpertContactDetails
        """
        if contact_details is None:
            raise ValueError("Invalid value for `contact_details`, must not be `None`")  # noqa: E501

        self._contact_details = contact_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubjectMatterExpert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
