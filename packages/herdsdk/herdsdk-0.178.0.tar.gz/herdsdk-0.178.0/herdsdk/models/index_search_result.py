# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IndexSearchResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index_search_result_type': 'str',
        'search_index_key': 'SearchIndexKey',
        'index_search_result_key': 'IndexSearchResultKey',
        'display_name': 'str',
        'short_description': 'str',
        'highlight': 'Highlight'
    }

    attribute_map = {
        'index_search_result_type': 'indexSearchResultType',
        'search_index_key': 'searchIndexKey',
        'index_search_result_key': 'indexSearchResultKey',
        'display_name': 'displayName',
        'short_description': 'shortDescription',
        'highlight': 'highlight'
    }

    def __init__(self, index_search_result_type=None, search_index_key=None, index_search_result_key=None, display_name=None, short_description=None, highlight=None):  # noqa: E501
        """IndexSearchResult - a model defined in OpenAPI"""  # noqa: E501

        self._index_search_result_type = None
        self._search_index_key = None
        self._index_search_result_key = None
        self._display_name = None
        self._short_description = None
        self._highlight = None
        self.discriminator = None

        self.index_search_result_type = index_search_result_type
        if search_index_key is not None:
            self.search_index_key = search_index_key
        self.index_search_result_key = index_search_result_key
        if display_name is not None:
            self.display_name = display_name
        if short_description is not None:
            self.short_description = short_description
        if highlight is not None:
            self.highlight = highlight

    @property
    def index_search_result_type(self):
        """Gets the index_search_result_type of this IndexSearchResult.  # noqa: E501

        The type of the index from which search results are fetched. One of the following values: BUS_OBJCT_DFNTN, TAG                  # noqa: E501

        :return: The index_search_result_type of this IndexSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._index_search_result_type

    @index_search_result_type.setter
    def index_search_result_type(self, index_search_result_type):
        """Sets the index_search_result_type of this IndexSearchResult.

        The type of the index from which search results are fetched. One of the following values: BUS_OBJCT_DFNTN, TAG                  # noqa: E501

        :param index_search_result_type: The index_search_result_type of this IndexSearchResult.  # noqa: E501
        :type: str
        """
        if index_search_result_type is None:
            raise ValueError("Invalid value for `index_search_result_type`, must not be `None`")  # noqa: E501

        self._index_search_result_type = index_search_result_type

    @property
    def search_index_key(self):
        """Gets the search_index_key of this IndexSearchResult.  # noqa: E501


        :return: The search_index_key of this IndexSearchResult.  # noqa: E501
        :rtype: SearchIndexKey
        """
        return self._search_index_key

    @search_index_key.setter
    def search_index_key(self, search_index_key):
        """Sets the search_index_key of this IndexSearchResult.


        :param search_index_key: The search_index_key of this IndexSearchResult.  # noqa: E501
        :type: SearchIndexKey
        """

        self._search_index_key = search_index_key

    @property
    def index_search_result_key(self):
        """Gets the index_search_result_key of this IndexSearchResult.  # noqa: E501


        :return: The index_search_result_key of this IndexSearchResult.  # noqa: E501
        :rtype: IndexSearchResultKey
        """
        return self._index_search_result_key

    @index_search_result_key.setter
    def index_search_result_key(self, index_search_result_key):
        """Sets the index_search_result_key of this IndexSearchResult.


        :param index_search_result_key: The index_search_result_key of this IndexSearchResult.  # noqa: E501
        :type: IndexSearchResultKey
        """
        if index_search_result_key is None:
            raise ValueError("Invalid value for `index_search_result_key`, must not be `None`")  # noqa: E501

        self._index_search_result_key = index_search_result_key

    @property
    def display_name(self):
        """Gets the display_name of this IndexSearchResult.  # noqa: E501

        The display name of the tag or business object definition  # noqa: E501

        :return: The display_name of this IndexSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IndexSearchResult.

        The display name of the tag or business object definition  # noqa: E501

        :param display_name: The display_name of this IndexSearchResult.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def short_description(self):
        """Gets the short_description of this IndexSearchResult.  # noqa: E501

        An optional short-description. This is actually the 'description' field truncated to a configurable number of characters                  # noqa: E501

        :return: The short_description of this IndexSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this IndexSearchResult.

        An optional short-description. This is actually the 'description' field truncated to a configurable number of characters                  # noqa: E501

        :param short_description: The short_description of this IndexSearchResult.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def highlight(self):
        """Gets the highlight of this IndexSearchResult.  # noqa: E501


        :return: The highlight of this IndexSearchResult.  # noqa: E501
        :rtype: Highlight
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this IndexSearchResult.


        :param highlight: The highlight of this IndexSearchResult.  # noqa: E501
        :type: Highlight
        """

        self._highlight = highlight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
