# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectDataStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'business_object_format_version': 'int',
        'partition_value': 'str',
        'sub_partition_values': 'list[str]',
        'business_object_data_version': 'int',
        'reason': 'str'
    }

    attribute_map = {
        'business_object_format_version': 'businessObjectFormatVersion',
        'partition_value': 'partitionValue',
        'sub_partition_values': 'subPartitionValues',
        'business_object_data_version': 'businessObjectDataVersion',
        'reason': 'reason'
    }

    def __init__(self, business_object_format_version=None, partition_value=None, sub_partition_values=None, business_object_data_version=None, reason=None):  # noqa: E501
        """BusinessObjectDataStatus - a model defined in OpenAPI"""  # noqa: E501

        self._business_object_format_version = None
        self._partition_value = None
        self._sub_partition_values = None
        self._business_object_data_version = None
        self._reason = None
        self.discriminator = None

        if business_object_format_version is not None:
            self.business_object_format_version = business_object_format_version
        self.partition_value = partition_value
        if sub_partition_values is not None:
            self.sub_partition_values = sub_partition_values
        if business_object_data_version is not None:
            self.business_object_data_version = business_object_data_version
        if reason is not None:
            self.reason = reason

    @property
    def business_object_format_version(self):
        """Gets the business_object_format_version of this BusinessObjectDataStatus.  # noqa: E501

        The Business Object Format Version for a previously registered Business Object Format  # noqa: E501

        :return: The business_object_format_version of this BusinessObjectDataStatus.  # noqa: E501
        :rtype: int
        """
        return self._business_object_format_version

    @business_object_format_version.setter
    def business_object_format_version(self, business_object_format_version):
        """Sets the business_object_format_version of this BusinessObjectDataStatus.

        The Business Object Format Version for a previously registered Business Object Format  # noqa: E501

        :param business_object_format_version: The business_object_format_version of this BusinessObjectDataStatus.  # noqa: E501
        :type: int
        """

        self._business_object_format_version = business_object_format_version

    @property
    def partition_value(self):
        """Gets the partition_value of this BusinessObjectDataStatus.  # noqa: E501

        The partition value that the Business Object Data is associated with  # noqa: E501

        :return: The partition_value of this BusinessObjectDataStatus.  # noqa: E501
        :rtype: str
        """
        return self._partition_value

    @partition_value.setter
    def partition_value(self, partition_value):
        """Sets the partition_value of this BusinessObjectDataStatus.

        The partition value that the Business Object Data is associated with  # noqa: E501

        :param partition_value: The partition_value of this BusinessObjectDataStatus.  # noqa: E501
        :type: str
        """
        if partition_value is None:
            raise ValueError("Invalid value for `partition_value`, must not be `None`")  # noqa: E501

        self._partition_value = partition_value

    @property
    def sub_partition_values(self):
        """Gets the sub_partition_values of this BusinessObjectDataStatus.  # noqa: E501

        A list of Sub-Partition values associated with a Business Object Data  # noqa: E501

        :return: The sub_partition_values of this BusinessObjectDataStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_partition_values

    @sub_partition_values.setter
    def sub_partition_values(self, sub_partition_values):
        """Sets the sub_partition_values of this BusinessObjectDataStatus.

        A list of Sub-Partition values associated with a Business Object Data  # noqa: E501

        :param sub_partition_values: The sub_partition_values of this BusinessObjectDataStatus.  # noqa: E501
        :type: list[str]
        """

        self._sub_partition_values = sub_partition_values

    @property
    def business_object_data_version(self):
        """Gets the business_object_data_version of this BusinessObjectDataStatus.  # noqa: E501

        The numeric version of a Business Object Data  # noqa: E501

        :return: The business_object_data_version of this BusinessObjectDataStatus.  # noqa: E501
        :rtype: int
        """
        return self._business_object_data_version

    @business_object_data_version.setter
    def business_object_data_version(self, business_object_data_version):
        """Sets the business_object_data_version of this BusinessObjectDataStatus.

        The numeric version of a Business Object Data  # noqa: E501

        :param business_object_data_version: The business_object_data_version of this BusinessObjectDataStatus.  # noqa: E501
        :type: int
        """

        self._business_object_data_version = business_object_data_version

    @property
    def reason(self):
        """Gets the reason of this BusinessObjectDataStatus.  # noqa: E501

        A reason for the Business Object Data not being available (NOT_REGISTERED, INVALID, etc...)  # noqa: E501

        :return: The reason of this BusinessObjectDataStatus.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this BusinessObjectDataStatus.

        A reason for the Business Object Data not being available (NOT_REGISTERED, INVALID, etc...)  # noqa: E501

        :param reason: The reason of this BusinessObjectDataStatus.  # noqa: E501
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectDataStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
