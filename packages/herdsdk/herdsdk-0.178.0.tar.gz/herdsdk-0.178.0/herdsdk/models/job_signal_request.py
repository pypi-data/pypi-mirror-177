# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JobSignalRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'receive_task_id': 'str',
        'parameters': 'list[Parameter]',
        's3_properties_location': 'S3PropertiesLocation'
    }

    attribute_map = {
        'id': 'id',
        'receive_task_id': 'receiveTaskId',
        'parameters': 'parameters',
        's3_properties_location': 's3PropertiesLocation'
    }

    def __init__(self, id=None, receive_task_id=None, parameters=None, s3_properties_location=None):  # noqa: E501
        """JobSignalRequest - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._receive_task_id = None
        self._parameters = None
        self._s3_properties_location = None
        self.discriminator = None

        self.id = id
        self.receive_task_id = receive_task_id
        if parameters is not None:
            self.parameters = parameters
        if s3_properties_location is not None:
            self.s3_properties_location = s3_properties_location

    @property
    def id(self):
        """Gets the id of this JobSignalRequest.  # noqa: E501

        The job id that uniquely identifies the previously submitted job  # noqa: E501

        :return: The id of this JobSignalRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobSignalRequest.

        The job id that uniquely identifies the previously submitted job  # noqa: E501

        :param id: The id of this JobSignalRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def receive_task_id(self):
        """Gets the receive_task_id of this JobSignalRequest.  # noqa: E501

        The task Id of the receive task in the job workflow to signal. The job must be waiting on this task at the time of this call                  # noqa: E501

        :return: The receive_task_id of this JobSignalRequest.  # noqa: E501
        :rtype: str
        """
        return self._receive_task_id

    @receive_task_id.setter
    def receive_task_id(self, receive_task_id):
        """Sets the receive_task_id of this JobSignalRequest.

        The task Id of the receive task in the job workflow to signal. The job must be waiting on this task at the time of this call                  # noqa: E501

        :param receive_task_id: The receive_task_id of this JobSignalRequest.  # noqa: E501
        :type: str
        """
        if receive_task_id is None:
            raise ValueError("Invalid value for `receive_task_id`, must not be `None`")  # noqa: E501

        self._receive_task_id = receive_task_id

    @property
    def parameters(self):
        """Gets the parameters of this JobSignalRequest.  # noqa: E501

        List of key/value pairs that will be made available to the job  # noqa: E501

        :return: The parameters of this JobSignalRequest.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this JobSignalRequest.

        List of key/value pairs that will be made available to the job  # noqa: E501

        :param parameters: The parameters of this JobSignalRequest.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    @property
    def s3_properties_location(self):
        """Gets the s3_properties_location of this JobSignalRequest.  # noqa: E501


        :return: The s3_properties_location of this JobSignalRequest.  # noqa: E501
        :rtype: S3PropertiesLocation
        """
        return self._s3_properties_location

    @s3_properties_location.setter
    def s3_properties_location(self, s3_properties_location):
        """Sets the s3_properties_location of this JobSignalRequest.


        :param s3_properties_location: The s3_properties_location of this JobSignalRequest.  # noqa: E501
        :type: S3PropertiesLocation
        """

        self._s3_properties_location = s3_properties_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSignalRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
