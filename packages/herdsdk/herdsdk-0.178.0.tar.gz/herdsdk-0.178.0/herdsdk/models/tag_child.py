# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TagChild(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tag_key': 'TagKey',
        'has_children': 'bool'
    }

    attribute_map = {
        'tag_key': 'tagKey',
        'has_children': 'hasChildren'
    }

    def __init__(self, tag_key=None, has_children=None):  # noqa: E501
        """TagChild - a model defined in OpenAPI"""  # noqa: E501

        self._tag_key = None
        self._has_children = None
        self.discriminator = None

        self.tag_key = tag_key
        if has_children is not None:
            self.has_children = has_children

    @property
    def tag_key(self):
        """Gets the tag_key of this TagChild.  # noqa: E501


        :return: The tag_key of this TagChild.  # noqa: E501
        :rtype: TagKey
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this TagChild.


        :param tag_key: The tag_key of this TagChild.  # noqa: E501
        :type: TagKey
        """
        if tag_key is None:
            raise ValueError("Invalid value for `tag_key`, must not be `None`")  # noqa: E501

        self._tag_key = tag_key

    @property
    def has_children(self):
        """Gets the has_children of this TagChild.  # noqa: E501

        A boolean flag that shows whether this tag has further children  # noqa: E501

        :return: The has_children of this TagChild.  # noqa: E501
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this TagChild.

        A boolean flag that shows whether this tag has further children  # noqa: E501

        :param has_children: The has_children of this TagChild.  # noqa: E501
        :type: bool
        """

        self._has_children = has_children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
