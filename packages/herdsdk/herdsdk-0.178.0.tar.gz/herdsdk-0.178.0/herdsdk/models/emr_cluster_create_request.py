# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrClusterCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'emr_cluster_definition_name': 'str',
        'emr_cluster_name': 'str',
        'dry_run': 'bool',
        'emr_cluster_definition_override': 'EmrClusterDefinition'
    }

    attribute_map = {
        'namespace': 'namespace',
        'emr_cluster_definition_name': 'emrClusterDefinitionName',
        'emr_cluster_name': 'emrClusterName',
        'dry_run': 'dryRun',
        'emr_cluster_definition_override': 'emrClusterDefinitionOverride'
    }

    def __init__(self, namespace=None, emr_cluster_definition_name=None, emr_cluster_name=None, dry_run=None, emr_cluster_definition_override=None):  # noqa: E501
        """EmrClusterCreateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._emr_cluster_definition_name = None
        self._emr_cluster_name = None
        self._dry_run = None
        self._emr_cluster_definition_override = None
        self.discriminator = None

        self.namespace = namespace
        self.emr_cluster_definition_name = emr_cluster_definition_name
        self.emr_cluster_name = emr_cluster_name
        if dry_run is not None:
            self.dry_run = dry_run
        if emr_cluster_definition_override is not None:
            self.emr_cluster_definition_override = emr_cluster_definition_override

    @property
    def namespace(self):
        """Gets the namespace of this EmrClusterCreateRequest.  # noqa: E501


        :return: The namespace of this EmrClusterCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EmrClusterCreateRequest.


        :param namespace: The namespace of this EmrClusterCreateRequest.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def emr_cluster_definition_name(self):
        """Gets the emr_cluster_definition_name of this EmrClusterCreateRequest.  # noqa: E501


        :return: The emr_cluster_definition_name of this EmrClusterCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_definition_name

    @emr_cluster_definition_name.setter
    def emr_cluster_definition_name(self, emr_cluster_definition_name):
        """Sets the emr_cluster_definition_name of this EmrClusterCreateRequest.


        :param emr_cluster_definition_name: The emr_cluster_definition_name of this EmrClusterCreateRequest.  # noqa: E501
        :type: str
        """
        if emr_cluster_definition_name is None:
            raise ValueError("Invalid value for `emr_cluster_definition_name`, must not be `None`")  # noqa: E501

        self._emr_cluster_definition_name = emr_cluster_definition_name

    @property
    def emr_cluster_name(self):
        """Gets the emr_cluster_name of this EmrClusterCreateRequest.  # noqa: E501


        :return: The emr_cluster_name of this EmrClusterCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._emr_cluster_name

    @emr_cluster_name.setter
    def emr_cluster_name(self, emr_cluster_name):
        """Sets the emr_cluster_name of this EmrClusterCreateRequest.


        :param emr_cluster_name: The emr_cluster_name of this EmrClusterCreateRequest.  # noqa: E501
        :type: str
        """
        if emr_cluster_name is None:
            raise ValueError("Invalid value for `emr_cluster_name`, must not be `None`")  # noqa: E501

        self._emr_cluster_name = emr_cluster_name

    @property
    def dry_run(self):
        """Gets the dry_run of this EmrClusterCreateRequest.  # noqa: E501


        :return: The dry_run of this EmrClusterCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this EmrClusterCreateRequest.


        :param dry_run: The dry_run of this EmrClusterCreateRequest.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def emr_cluster_definition_override(self):
        """Gets the emr_cluster_definition_override of this EmrClusterCreateRequest.  # noqa: E501


        :return: The emr_cluster_definition_override of this EmrClusterCreateRequest.  # noqa: E501
        :rtype: EmrClusterDefinition
        """
        return self._emr_cluster_definition_override

    @emr_cluster_definition_override.setter
    def emr_cluster_definition_override(self, emr_cluster_definition_override):
        """Sets the emr_cluster_definition_override of this EmrClusterCreateRequest.


        :param emr_cluster_definition_override: The emr_cluster_definition_override of this EmrClusterCreateRequest.  # noqa: E501
        :type: EmrClusterDefinition
        """

        self._emr_cluster_definition_override = emr_cluster_definition_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrClusterCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
