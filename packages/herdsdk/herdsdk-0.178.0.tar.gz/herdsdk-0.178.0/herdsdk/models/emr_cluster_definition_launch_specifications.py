# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrClusterDefinitionLaunchSpecifications(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'spot_specification': 'EmrClusterDefinitionSpotSpecification',
        'on_demand_specification': 'EmrClusterDefinitionOnDemandSpecification'
    }

    attribute_map = {
        'spot_specification': 'spotSpecification',
        'on_demand_specification': 'onDemandSpecification'
    }

    def __init__(self, spot_specification=None, on_demand_specification=None):  # noqa: E501
        """EmrClusterDefinitionLaunchSpecifications - a model defined in OpenAPI"""  # noqa: E501

        self._spot_specification = None
        self._on_demand_specification = None
        self.discriminator = None

        if spot_specification is not None:
            self.spot_specification = spot_specification
        if on_demand_specification is not None:
            self.on_demand_specification = on_demand_specification

    @property
    def spot_specification(self):
        """Gets the spot_specification of this EmrClusterDefinitionLaunchSpecifications.  # noqa: E501


        :return: The spot_specification of this EmrClusterDefinitionLaunchSpecifications.  # noqa: E501
        :rtype: EmrClusterDefinitionSpotSpecification
        """
        return self._spot_specification

    @spot_specification.setter
    def spot_specification(self, spot_specification):
        """Sets the spot_specification of this EmrClusterDefinitionLaunchSpecifications.


        :param spot_specification: The spot_specification of this EmrClusterDefinitionLaunchSpecifications.  # noqa: E501
        :type: EmrClusterDefinitionSpotSpecification
        """

        self._spot_specification = spot_specification

    @property
    def on_demand_specification(self):
        """Gets the on_demand_specification of this EmrClusterDefinitionLaunchSpecifications.  # noqa: E501


        :return: The on_demand_specification of this EmrClusterDefinitionLaunchSpecifications.  # noqa: E501
        :rtype: EmrClusterDefinitionOnDemandSpecification
        """
        return self._on_demand_specification

    @on_demand_specification.setter
    def on_demand_specification(self, on_demand_specification):
        """Sets the on_demand_specification of this EmrClusterDefinitionLaunchSpecifications.


        :param on_demand_specification: The on_demand_specification of this EmrClusterDefinitionLaunchSpecifications.  # noqa: E501
        :type: EmrClusterDefinitionOnDemandSpecification
        """

        self._on_demand_specification = on_demand_specification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrClusterDefinitionLaunchSpecifications):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
