# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectFormatRetentionInformationUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'record_flag': 'bool',
        'retention_period_in_days': 'int',
        'retention_type': 'str'
    }

    attribute_map = {
        'record_flag': 'recordFlag',
        'retention_period_in_days': 'retentionPeriodInDays',
        'retention_type': 'retentionType'
    }

    def __init__(self, record_flag=None, retention_period_in_days=None, retention_type=None):  # noqa: E501
        """BusinessObjectFormatRetentionInformationUpdateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._record_flag = None
        self._retention_period_in_days = None
        self._retention_type = None
        self.discriminator = None

        if record_flag is not None:
            self.record_flag = record_flag
        if retention_period_in_days is not None:
            self.retention_period_in_days = retention_period_in_days
        if retention_type is not None:
            self.retention_type = retention_type

    @property
    def record_flag(self):
        """Gets the record_flag of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501

        Indicates if business object data registered with this format is a record                  # noqa: E501

        :return: The record_flag of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._record_flag

    @record_flag.setter
    def record_flag(self, record_flag):
        """Sets the record_flag of this BusinessObjectFormatRetentionInformationUpdateRequest.

        Indicates if business object data registered with this format is a record                  # noqa: E501

        :param record_flag: The record_flag of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._record_flag = record_flag

    @property
    def retention_period_in_days(self):
        """Gets the retention_period_in_days of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501

        Retention period (in days) for business object data registered with this format. This value must only be specified for                   PARTITION_VALUE retention type                  # noqa: E501

        :return: The retention_period_in_days of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._retention_period_in_days

    @retention_period_in_days.setter
    def retention_period_in_days(self, retention_period_in_days):
        """Sets the retention_period_in_days of this BusinessObjectFormatRetentionInformationUpdateRequest.

        Retention period (in days) for business object data registered with this format. This value must only be specified for                   PARTITION_VALUE retention type                  # noqa: E501

        :param retention_period_in_days: The retention_period_in_days of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501
        :type: int
        """

        self._retention_period_in_days = retention_period_in_days

    @property
    def retention_type(self):
        """Gets the retention_type of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501

        Retention type. Supported retention types are: PARTITION_VALUE, BDATA_RETENTION_DATE                  # noqa: E501

        :return: The retention_type of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._retention_type

    @retention_type.setter
    def retention_type(self, retention_type):
        """Sets the retention_type of this BusinessObjectFormatRetentionInformationUpdateRequest.

        Retention type. Supported retention types are: PARTITION_VALUE, BDATA_RETENTION_DATE                  # noqa: E501

        :param retention_type: The retention_type of this BusinessObjectFormatRetentionInformationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._retention_type = retention_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectFormatRetentionInformationUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
