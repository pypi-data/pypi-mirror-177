# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectDefinitionSampleDataFileKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'business_object_definition_name': 'str',
        'directory_path': 'str',
        'file_name': 'str'
    }

    attribute_map = {
        'namespace': 'namespace',
        'business_object_definition_name': 'businessObjectDefinitionName',
        'directory_path': 'directoryPath',
        'file_name': 'fileName'
    }

    def __init__(self, namespace=None, business_object_definition_name=None, directory_path=None, file_name=None):  # noqa: E501
        """BusinessObjectDefinitionSampleDataFileKey - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._business_object_definition_name = None
        self._directory_path = None
        self._file_name = None
        self.discriminator = None

        self.namespace = namespace
        self.business_object_definition_name = business_object_definition_name
        self.directory_path = directory_path
        self.file_name = file_name

    @property
    def namespace(self):
        """Gets the namespace of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501

        The namespace of the business object definition                  # noqa: E501

        :return: The namespace of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BusinessObjectDefinitionSampleDataFileKey.

        The namespace of the business object definition                  # noqa: E501

        :param namespace: The namespace of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def business_object_definition_name(self):
        """Gets the business_object_definition_name of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501

        The business object definition name                  # noqa: E501

        :return: The business_object_definition_name of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_name

    @business_object_definition_name.setter
    def business_object_definition_name(self, business_object_definition_name):
        """Sets the business_object_definition_name of this BusinessObjectDefinitionSampleDataFileKey.

        The business object definition name                  # noqa: E501

        :param business_object_definition_name: The business_object_definition_name of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :type: str
        """
        if business_object_definition_name is None:
            raise ValueError("Invalid value for `business_object_definition_name`, must not be `None`")  # noqa: E501

        self._business_object_definition_name = business_object_definition_name

    @property
    def directory_path(self):
        """Gets the directory_path of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501

        The directory path of the sample data file. Note                   that directory path will contain a trailing \"directory\" separator,                   thus the caller needs to concatenate the directory path and the                   file name as is in order to construct a fully qualified path for                   the sample data file                  # noqa: E501

        :return: The directory_path of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :rtype: str
        """
        return self._directory_path

    @directory_path.setter
    def directory_path(self, directory_path):
        """Sets the directory_path of this BusinessObjectDefinitionSampleDataFileKey.

        The directory path of the sample data file. Note                   that directory path will contain a trailing \"directory\" separator,                   thus the caller needs to concatenate the directory path and the                   file name as is in order to construct a fully qualified path for                   the sample data file                  # noqa: E501

        :param directory_path: The directory_path of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :type: str
        """
        if directory_path is None:
            raise ValueError("Invalid value for `directory_path`, must not be `None`")  # noqa: E501

        self._directory_path = directory_path

    @property
    def file_name(self):
        """Gets the file_name of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501

        The name of the sample data file                  # noqa: E501

        :return: The file_name of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this BusinessObjectDefinitionSampleDataFileKey.

        The name of the sample data file                  # noqa: E501

        :param file_name: The file_name of this BusinessObjectDefinitionSampleDataFileKey.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectDefinitionSampleDataFileKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
