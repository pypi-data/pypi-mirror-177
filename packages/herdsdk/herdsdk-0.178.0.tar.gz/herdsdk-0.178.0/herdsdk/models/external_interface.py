# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExternalInterface(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'external_interface_key': 'ExternalInterfaceKey',
        'display_name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'external_interface_key': 'externalInterfaceKey',
        'display_name': 'displayName',
        'description': 'description'
    }

    def __init__(self, external_interface_key=None, display_name=None, description=None):  # noqa: E501
        """ExternalInterface - a model defined in OpenAPI"""  # noqa: E501

        self._external_interface_key = None
        self._display_name = None
        self._description = None
        self.discriminator = None

        self.external_interface_key = external_interface_key
        self.display_name = display_name
        if description is not None:
            self.description = description

    @property
    def external_interface_key(self):
        """Gets the external_interface_key of this ExternalInterface.  # noqa: E501


        :return: The external_interface_key of this ExternalInterface.  # noqa: E501
        :rtype: ExternalInterfaceKey
        """
        return self._external_interface_key

    @external_interface_key.setter
    def external_interface_key(self, external_interface_key):
        """Sets the external_interface_key of this ExternalInterface.


        :param external_interface_key: The external_interface_key of this ExternalInterface.  # noqa: E501
        :type: ExternalInterfaceKey
        """
        if external_interface_key is None:
            raise ValueError("Invalid value for `external_interface_key`, must not be `None`")  # noqa: E501

        self._external_interface_key = external_interface_key

    @property
    def display_name(self):
        """Gets the display_name of this ExternalInterface.  # noqa: E501

        The external interface display name  # noqa: E501

        :return: The display_name of this ExternalInterface.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ExternalInterface.

        The external interface display name  # noqa: E501

        :param display_name: The display_name of this ExternalInterface.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ExternalInterface.  # noqa: E501

        The external interface description  # noqa: E501

        :return: The description of this ExternalInterface.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExternalInterface.

        The external interface description  # noqa: E501

        :param description: The description of this ExternalInterface.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
