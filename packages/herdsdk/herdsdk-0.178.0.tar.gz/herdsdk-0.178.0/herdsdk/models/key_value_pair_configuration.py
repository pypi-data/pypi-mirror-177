# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class KeyValuePairConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_value_shortcut': 'str',
        'attrib_key': 'str',
        'attrib_val': 'str'
    }

    attribute_map = {
        'key_value_shortcut': 'keyValueShortcut',
        'attrib_key': 'attribKey',
        'attrib_val': 'attribVal'
    }

    def __init__(self, key_value_shortcut=None, attrib_key=None, attrib_val=None):  # noqa: E501
        """KeyValuePairConfiguration - a model defined in OpenAPI"""  # noqa: E501

        self._key_value_shortcut = None
        self._attrib_key = None
        self._attrib_val = None
        self.discriminator = None

        self.key_value_shortcut = key_value_shortcut
        self.attrib_key = attrib_key
        self.attrib_val = attrib_val

    @property
    def key_value_shortcut(self):
        """Gets the key_value_shortcut of this KeyValuePairConfiguration.  # noqa: E501


        :return: The key_value_shortcut of this KeyValuePairConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._key_value_shortcut

    @key_value_shortcut.setter
    def key_value_shortcut(self, key_value_shortcut):
        """Sets the key_value_shortcut of this KeyValuePairConfiguration.


        :param key_value_shortcut: The key_value_shortcut of this KeyValuePairConfiguration.  # noqa: E501
        :type: str
        """
        if key_value_shortcut is None:
            raise ValueError("Invalid value for `key_value_shortcut`, must not be `None`")  # noqa: E501

        self._key_value_shortcut = key_value_shortcut

    @property
    def attrib_key(self):
        """Gets the attrib_key of this KeyValuePairConfiguration.  # noqa: E501


        :return: The attrib_key of this KeyValuePairConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._attrib_key

    @attrib_key.setter
    def attrib_key(self, attrib_key):
        """Sets the attrib_key of this KeyValuePairConfiguration.


        :param attrib_key: The attrib_key of this KeyValuePairConfiguration.  # noqa: E501
        :type: str
        """
        if attrib_key is None:
            raise ValueError("Invalid value for `attrib_key`, must not be `None`")  # noqa: E501

        self._attrib_key = attrib_key

    @property
    def attrib_val(self):
        """Gets the attrib_val of this KeyValuePairConfiguration.  # noqa: E501


        :return: The attrib_val of this KeyValuePairConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._attrib_val

    @attrib_val.setter
    def attrib_val(self, attrib_val):
        """Sets the attrib_val of this KeyValuePairConfiguration.


        :param attrib_val: The attrib_val of this KeyValuePairConfiguration.  # noqa: E501
        :type: str
        """
        if attrib_val is None:
            raise ValueError("Invalid value for `attrib_val`, must not be `None`")  # noqa: E501

        self._attrib_val = attrib_val

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyValuePairConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
