# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StoragePolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'storage_policy_key': 'StoragePolicyKey',
        'storage_policy_rule': 'StoragePolicyRule',
        'storage_policy_filter': 'StoragePolicyFilter',
        'storage_policy_transition': 'StoragePolicyTransition',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'storage_policy_key': 'storagePolicyKey',
        'storage_policy_rule': 'storagePolicyRule',
        'storage_policy_filter': 'storagePolicyFilter',
        'storage_policy_transition': 'storagePolicyTransition',
        'status': 'status'
    }

    def __init__(self, id=None, storage_policy_key=None, storage_policy_rule=None, storage_policy_filter=None, storage_policy_transition=None, status=None):  # noqa: E501
        """StoragePolicy - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._storage_policy_key = None
        self._storage_policy_rule = None
        self._storage_policy_filter = None
        self._storage_policy_transition = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.storage_policy_key = storage_policy_key
        self.storage_policy_rule = storage_policy_rule
        self.storage_policy_filter = storage_policy_filter
        self.storage_policy_transition = storage_policy_transition
        self.status = status

    @property
    def id(self):
        """Gets the id of this StoragePolicy.  # noqa: E501

        A system unique ID of this storage policy  # noqa: E501

        :return: The id of this StoragePolicy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoragePolicy.

        A system unique ID of this storage policy  # noqa: E501

        :param id: The id of this StoragePolicy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def storage_policy_key(self):
        """Gets the storage_policy_key of this StoragePolicy.  # noqa: E501


        :return: The storage_policy_key of this StoragePolicy.  # noqa: E501
        :rtype: StoragePolicyKey
        """
        return self._storage_policy_key

    @storage_policy_key.setter
    def storage_policy_key(self, storage_policy_key):
        """Sets the storage_policy_key of this StoragePolicy.


        :param storage_policy_key: The storage_policy_key of this StoragePolicy.  # noqa: E501
        :type: StoragePolicyKey
        """
        if storage_policy_key is None:
            raise ValueError("Invalid value for `storage_policy_key`, must not be `None`")  # noqa: E501

        self._storage_policy_key = storage_policy_key

    @property
    def storage_policy_rule(self):
        """Gets the storage_policy_rule of this StoragePolicy.  # noqa: E501


        :return: The storage_policy_rule of this StoragePolicy.  # noqa: E501
        :rtype: StoragePolicyRule
        """
        return self._storage_policy_rule

    @storage_policy_rule.setter
    def storage_policy_rule(self, storage_policy_rule):
        """Sets the storage_policy_rule of this StoragePolicy.


        :param storage_policy_rule: The storage_policy_rule of this StoragePolicy.  # noqa: E501
        :type: StoragePolicyRule
        """
        if storage_policy_rule is None:
            raise ValueError("Invalid value for `storage_policy_rule`, must not be `None`")  # noqa: E501

        self._storage_policy_rule = storage_policy_rule

    @property
    def storage_policy_filter(self):
        """Gets the storage_policy_filter of this StoragePolicy.  # noqa: E501


        :return: The storage_policy_filter of this StoragePolicy.  # noqa: E501
        :rtype: StoragePolicyFilter
        """
        return self._storage_policy_filter

    @storage_policy_filter.setter
    def storage_policy_filter(self, storage_policy_filter):
        """Sets the storage_policy_filter of this StoragePolicy.


        :param storage_policy_filter: The storage_policy_filter of this StoragePolicy.  # noqa: E501
        :type: StoragePolicyFilter
        """
        if storage_policy_filter is None:
            raise ValueError("Invalid value for `storage_policy_filter`, must not be `None`")  # noqa: E501

        self._storage_policy_filter = storage_policy_filter

    @property
    def storage_policy_transition(self):
        """Gets the storage_policy_transition of this StoragePolicy.  # noqa: E501


        :return: The storage_policy_transition of this StoragePolicy.  # noqa: E501
        :rtype: StoragePolicyTransition
        """
        return self._storage_policy_transition

    @storage_policy_transition.setter
    def storage_policy_transition(self, storage_policy_transition):
        """Sets the storage_policy_transition of this StoragePolicy.


        :param storage_policy_transition: The storage_policy_transition of this StoragePolicy.  # noqa: E501
        :type: StoragePolicyTransition
        """
        if storage_policy_transition is None:
            raise ValueError("Invalid value for `storage_policy_transition`, must not be `None`")  # noqa: E501

        self._storage_policy_transition = storage_policy_transition

    @property
    def status(self):
        """Gets the status of this StoragePolicy.  # noqa: E501

        The status of the storage policy  # noqa: E501

        :return: The status of this StoragePolicy.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StoragePolicy.

        The status of the storage policy  # noqa: E501

        :param status: The status of this StoragePolicy.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
