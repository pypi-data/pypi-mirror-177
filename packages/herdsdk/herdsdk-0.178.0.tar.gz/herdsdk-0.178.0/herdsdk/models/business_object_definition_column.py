# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectDefinitionColumn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'business_object_definition_column_key': 'BusinessObjectDefinitionColumnKey',
        'schema_column_name': 'str',
        'description': 'str',
        'business_object_definition_column_change_events': 'list[BusinessObjectDefinitionColumnChangeEvent]'
    }

    attribute_map = {
        'id': 'id',
        'business_object_definition_column_key': 'businessObjectDefinitionColumnKey',
        'schema_column_name': 'schemaColumnName',
        'description': 'description',
        'business_object_definition_column_change_events': 'businessObjectDefinitionColumnChangeEvents'
    }

    def __init__(self, id=None, business_object_definition_column_key=None, schema_column_name=None, description=None, business_object_definition_column_change_events=None):  # noqa: E501
        """BusinessObjectDefinitionColumn - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._business_object_definition_column_key = None
        self._schema_column_name = None
        self._description = None
        self._business_object_definition_column_change_events = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.business_object_definition_column_key = business_object_definition_column_key
        if schema_column_name is not None:
            self.schema_column_name = schema_column_name
        if description is not None:
            self.description = description
        if business_object_definition_column_change_events is not None:
            self.business_object_definition_column_change_events = business_object_definition_column_change_events

    @property
    def id(self):
        """Gets the id of this BusinessObjectDefinitionColumn.  # noqa: E501

        The internal Id that uniquely references a Business Object Definition Column  # noqa: E501

        :return: The id of this BusinessObjectDefinitionColumn.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BusinessObjectDefinitionColumn.

        The internal Id that uniquely references a Business Object Definition Column  # noqa: E501

        :param id: The id of this BusinessObjectDefinitionColumn.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def business_object_definition_column_key(self):
        """Gets the business_object_definition_column_key of this BusinessObjectDefinitionColumn.  # noqa: E501


        :return: The business_object_definition_column_key of this BusinessObjectDefinitionColumn.  # noqa: E501
        :rtype: BusinessObjectDefinitionColumnKey
        """
        return self._business_object_definition_column_key

    @business_object_definition_column_key.setter
    def business_object_definition_column_key(self, business_object_definition_column_key):
        """Sets the business_object_definition_column_key of this BusinessObjectDefinitionColumn.


        :param business_object_definition_column_key: The business_object_definition_column_key of this BusinessObjectDefinitionColumn.  # noqa: E501
        :type: BusinessObjectDefinitionColumnKey
        """
        if business_object_definition_column_key is None:
            raise ValueError("Invalid value for `business_object_definition_column_key`, must not be `None`")  # noqa: E501

        self._business_object_definition_column_key = business_object_definition_column_key

    @property
    def schema_column_name(self):
        """Gets the schema_column_name of this BusinessObjectDefinitionColumn.  # noqa: E501

        The name of the schema column  # noqa: E501

        :return: The schema_column_name of this BusinessObjectDefinitionColumn.  # noqa: E501
        :rtype: str
        """
        return self._schema_column_name

    @schema_column_name.setter
    def schema_column_name(self, schema_column_name):
        """Sets the schema_column_name of this BusinessObjectDefinitionColumn.

        The name of the schema column  # noqa: E501

        :param schema_column_name: The schema_column_name of this BusinessObjectDefinitionColumn.  # noqa: E501
        :type: str
        """

        self._schema_column_name = schema_column_name

    @property
    def description(self):
        """Gets the description of this BusinessObjectDefinitionColumn.  # noqa: E501

        Description of the Business Object Definition Column  # noqa: E501

        :return: The description of this BusinessObjectDefinitionColumn.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BusinessObjectDefinitionColumn.

        Description of the Business Object Definition Column  # noqa: E501

        :param description: The description of this BusinessObjectDefinitionColumn.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def business_object_definition_column_change_events(self):
        """Gets the business_object_definition_column_change_events of this BusinessObjectDefinitionColumn.  # noqa: E501

        A list of business object definition column change events  # noqa: E501

        :return: The business_object_definition_column_change_events of this BusinessObjectDefinitionColumn.  # noqa: E501
        :rtype: list[BusinessObjectDefinitionColumnChangeEvent]
        """
        return self._business_object_definition_column_change_events

    @business_object_definition_column_change_events.setter
    def business_object_definition_column_change_events(self, business_object_definition_column_change_events):
        """Sets the business_object_definition_column_change_events of this BusinessObjectDefinitionColumn.

        A list of business object definition column change events  # noqa: E501

        :param business_object_definition_column_change_events: The business_object_definition_column_change_events of this BusinessObjectDefinitionColumn.  # noqa: E501
        :type: list[BusinessObjectDefinitionColumnChangeEvent]
        """

        self._business_object_definition_column_change_events = business_object_definition_column_change_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectDefinitionColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
