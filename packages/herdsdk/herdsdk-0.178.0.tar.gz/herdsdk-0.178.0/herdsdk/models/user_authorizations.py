# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserAuthorizations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'namespace_authorizations': 'list[NamespaceAuthorization]',
        'security_roles': 'list[str]',
        'security_functions': 'list[str]'
    }

    attribute_map = {
        'user_id': 'userId',
        'namespace_authorizations': 'namespaceAuthorizations',
        'security_roles': 'securityRoles',
        'security_functions': 'securityFunctions'
    }

    def __init__(self, user_id=None, namespace_authorizations=None, security_roles=None, security_functions=None):  # noqa: E501
        """UserAuthorizations - a model defined in OpenAPI"""  # noqa: E501

        self._user_id = None
        self._namespace_authorizations = None
        self._security_roles = None
        self._security_functions = None
        self.discriminator = None

        self.user_id = user_id
        if namespace_authorizations is not None:
            self.namespace_authorizations = namespace_authorizations
        if security_roles is not None:
            self.security_roles = security_roles
        if security_functions is not None:
            self.security_functions = security_functions

    @property
    def user_id(self):
        """Gets the user_id of this UserAuthorizations.  # noqa: E501

        The user id  # noqa: E501

        :return: The user_id of this UserAuthorizations.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserAuthorizations.

        The user id  # noqa: E501

        :param user_id: The user_id of this UserAuthorizations.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def namespace_authorizations(self):
        """Gets the namespace_authorizations of this UserAuthorizations.  # noqa: E501

        The list of namespace authorizations  # noqa: E501

        :return: The namespace_authorizations of this UserAuthorizations.  # noqa: E501
        :rtype: list[NamespaceAuthorization]
        """
        return self._namespace_authorizations

    @namespace_authorizations.setter
    def namespace_authorizations(self, namespace_authorizations):
        """Sets the namespace_authorizations of this UserAuthorizations.

        The list of namespace authorizations  # noqa: E501

        :param namespace_authorizations: The namespace_authorizations of this UserAuthorizations.  # noqa: E501
        :type: list[NamespaceAuthorization]
        """

        self._namespace_authorizations = namespace_authorizations

    @property
    def security_roles(self):
        """Gets the security_roles of this UserAuthorizations.  # noqa: E501

        The list of security roles  # noqa: E501

        :return: The security_roles of this UserAuthorizations.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_roles

    @security_roles.setter
    def security_roles(self, security_roles):
        """Sets the security_roles of this UserAuthorizations.

        The list of security roles  # noqa: E501

        :param security_roles: The security_roles of this UserAuthorizations.  # noqa: E501
        :type: list[str]
        """

        self._security_roles = security_roles

    @property
    def security_functions(self):
        """Gets the security_functions of this UserAuthorizations.  # noqa: E501

        The list of security functions  # noqa: E501

        :return: The security_functions of this UserAuthorizations.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_functions

    @security_functions.setter
    def security_functions(self, security_functions):
        """Sets the security_functions of this UserAuthorizations.

        The list of security functions  # noqa: E501

        :param security_functions: The security_functions of this UserAuthorizations.  # noqa: E501
        :type: list[str]
        """

        self._security_functions = security_functions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAuthorizations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
