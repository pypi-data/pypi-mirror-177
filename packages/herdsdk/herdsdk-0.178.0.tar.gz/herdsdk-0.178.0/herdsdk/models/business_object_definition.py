# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'namespace': 'str',
        'business_object_definition_name': 'str',
        'data_provider_name': 'str',
        'description': 'str',
        'short_description': 'str',
        'display_name': 'str',
        'attributes': 'list[Attribute]',
        'descriptive_business_object_format': 'DescriptiveBusinessObjectFormat',
        'sample_data_files': 'list[SampleDataFile]',
        'created_by_user_id': 'str',
        'last_updated_by_user_id': 'str',
        'last_updated_on': 'datetime',
        'business_object_definition_change_events': 'list[BusinessObjectDefinitionChangeEvent]'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'business_object_definition_name': 'businessObjectDefinitionName',
        'data_provider_name': 'dataProviderName',
        'description': 'description',
        'short_description': 'shortDescription',
        'display_name': 'displayName',
        'attributes': 'attributes',
        'descriptive_business_object_format': 'descriptiveBusinessObjectFormat',
        'sample_data_files': 'sampleDataFiles',
        'created_by_user_id': 'createdByUserId',
        'last_updated_by_user_id': 'lastUpdatedByUserId',
        'last_updated_on': 'lastUpdatedOn',
        'business_object_definition_change_events': 'businessObjectDefinitionChangeEvents'
    }

    def __init__(self, id=None, namespace=None, business_object_definition_name=None, data_provider_name=None, description=None, short_description=None, display_name=None, attributes=None, descriptive_business_object_format=None, sample_data_files=None, created_by_user_id=None, last_updated_by_user_id=None, last_updated_on=None, business_object_definition_change_events=None):  # noqa: E501
        """BusinessObjectDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._namespace = None
        self._business_object_definition_name = None
        self._data_provider_name = None
        self._description = None
        self._short_description = None
        self._display_name = None
        self._attributes = None
        self._descriptive_business_object_format = None
        self._sample_data_files = None
        self._created_by_user_id = None
        self._last_updated_by_user_id = None
        self._last_updated_on = None
        self._business_object_definition_change_events = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.namespace = namespace
        self.business_object_definition_name = business_object_definition_name
        if data_provider_name is not None:
            self.data_provider_name = data_provider_name
        if description is not None:
            self.description = description
        if short_description is not None:
            self.short_description = short_description
        if display_name is not None:
            self.display_name = display_name
        if attributes is not None:
            self.attributes = attributes
        if descriptive_business_object_format is not None:
            self.descriptive_business_object_format = descriptive_business_object_format
        if sample_data_files is not None:
            self.sample_data_files = sample_data_files
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if last_updated_by_user_id is not None:
            self.last_updated_by_user_id = last_updated_by_user_id
        if last_updated_on is not None:
            self.last_updated_on = last_updated_on
        if business_object_definition_change_events is not None:
            self.business_object_definition_change_events = business_object_definition_change_events

    @property
    def id(self):
        """Gets the id of this BusinessObjectDefinition.  # noqa: E501

        The internal identifier that uniquely references a Business Object Definition  # noqa: E501

        :return: The id of this BusinessObjectDefinition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BusinessObjectDefinition.

        The internal identifier that uniquely references a Business Object Definition  # noqa: E501

        :param id: The id of this BusinessObjectDefinition.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this BusinessObjectDefinition.  # noqa: E501

        The name of a valid Namespace known by the system  # noqa: E501

        :return: The namespace of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BusinessObjectDefinition.

        The name of a valid Namespace known by the system  # noqa: E501

        :param namespace: The namespace of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def business_object_definition_name(self):
        """Gets the business_object_definition_name of this BusinessObjectDefinition.  # noqa: E501

        The name for this Business Object Definition  # noqa: E501

        :return: The business_object_definition_name of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_name

    @business_object_definition_name.setter
    def business_object_definition_name(self, business_object_definition_name):
        """Sets the business_object_definition_name of this BusinessObjectDefinition.

        The name for this Business Object Definition  # noqa: E501

        :param business_object_definition_name: The business_object_definition_name of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """
        if business_object_definition_name is None:
            raise ValueError("Invalid value for `business_object_definition_name`, must not be `None`")  # noqa: E501

        self._business_object_definition_name = business_object_definition_name

    @property
    def data_provider_name(self):
        """Gets the data_provider_name of this BusinessObjectDefinition.  # noqa: E501

        The name of a valid Data Provider known by the system  # noqa: E501

        :return: The data_provider_name of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._data_provider_name

    @data_provider_name.setter
    def data_provider_name(self, data_provider_name):
        """Sets the data_provider_name of this BusinessObjectDefinition.

        The name of a valid Data Provider known by the system  # noqa: E501

        :param data_provider_name: The data_provider_name of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """

        self._data_provider_name = data_provider_name

    @property
    def description(self):
        """Gets the description of this BusinessObjectDefinition.  # noqa: E501

        An optional description  # noqa: E501

        :return: The description of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BusinessObjectDefinition.

        An optional description  # noqa: E501

        :param description: The description of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def short_description(self):
        """Gets the short_description of this BusinessObjectDefinition.  # noqa: E501

        An optional short-description. This is actually the 'description' field truncated to a configurable number of characters                  # noqa: E501

        :return: The short_description of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this BusinessObjectDefinition.

        An optional short-description. This is actually the 'description' field truncated to a configurable number of characters                  # noqa: E501

        :param short_description: The short_description of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def display_name(self):
        """Gets the display_name of this BusinessObjectDefinition.  # noqa: E501

        An optional business friendly name  # noqa: E501

        :return: The display_name of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BusinessObjectDefinition.

        An optional business friendly name  # noqa: E501

        :param display_name: The display_name of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def attributes(self):
        """Gets the attributes of this BusinessObjectDefinition.  # noqa: E501

        Custom user-defined metadata associated with this Business Object Definition. \"name\" is the attribute name (i.e. the key) and                   \"value\" is the attribute value                  # noqa: E501

        :return: The attributes of this BusinessObjectDefinition.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this BusinessObjectDefinition.

        Custom user-defined metadata associated with this Business Object Definition. \"name\" is the attribute name (i.e. the key) and                   \"value\" is the attribute value                  # noqa: E501

        :param attributes: The attributes of this BusinessObjectDefinition.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    @property
    def descriptive_business_object_format(self):
        """Gets the descriptive_business_object_format of this BusinessObjectDefinition.  # noqa: E501


        :return: The descriptive_business_object_format of this BusinessObjectDefinition.  # noqa: E501
        :rtype: DescriptiveBusinessObjectFormat
        """
        return self._descriptive_business_object_format

    @descriptive_business_object_format.setter
    def descriptive_business_object_format(self, descriptive_business_object_format):
        """Sets the descriptive_business_object_format of this BusinessObjectDefinition.


        :param descriptive_business_object_format: The descriptive_business_object_format of this BusinessObjectDefinition.  # noqa: E501
        :type: DescriptiveBusinessObjectFormat
        """

        self._descriptive_business_object_format = descriptive_business_object_format

    @property
    def sample_data_files(self):
        """Gets the sample_data_files of this BusinessObjectDefinition.  # noqa: E501

        An optional list of sample data files associated with the Business Object Definition  # noqa: E501

        :return: The sample_data_files of this BusinessObjectDefinition.  # noqa: E501
        :rtype: list[SampleDataFile]
        """
        return self._sample_data_files

    @sample_data_files.setter
    def sample_data_files(self, sample_data_files):
        """Sets the sample_data_files of this BusinessObjectDefinition.

        An optional list of sample data files associated with the Business Object Definition  # noqa: E501

        :param sample_data_files: The sample_data_files of this BusinessObjectDefinition.  # noqa: E501
        :type: list[SampleDataFile]
        """

        self._sample_data_files = sample_data_files

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this BusinessObjectDefinition.  # noqa: E501

        The User ID of the user who created this business object definition  # noqa: E501

        :return: The created_by_user_id of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this BusinessObjectDefinition.

        The User ID of the user who created this business object definition  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """

        self._created_by_user_id = created_by_user_id

    @property
    def last_updated_by_user_id(self):
        """Gets the last_updated_by_user_id of this BusinessObjectDefinition.  # noqa: E501

        The User ID of the user who last updated this business object definition  # noqa: E501

        :return: The last_updated_by_user_id of this BusinessObjectDefinition.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by_user_id

    @last_updated_by_user_id.setter
    def last_updated_by_user_id(self, last_updated_by_user_id):
        """Sets the last_updated_by_user_id of this BusinessObjectDefinition.

        The User ID of the user who last updated this business object definition  # noqa: E501

        :param last_updated_by_user_id: The last_updated_by_user_id of this BusinessObjectDefinition.  # noqa: E501
        :type: str
        """

        self._last_updated_by_user_id = last_updated_by_user_id

    @property
    def last_updated_on(self):
        """Gets the last_updated_on of this BusinessObjectDefinition.  # noqa: E501

        The timestamp when this business object definition was last updated on  # noqa: E501

        :return: The last_updated_on of this BusinessObjectDefinition.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """Sets the last_updated_on of this BusinessObjectDefinition.

        The timestamp when this business object definition was last updated on  # noqa: E501

        :param last_updated_on: The last_updated_on of this BusinessObjectDefinition.  # noqa: E501
        :type: datetime
        """

        self._last_updated_on = last_updated_on

    @property
    def business_object_definition_change_events(self):
        """Gets the business_object_definition_change_events of this BusinessObjectDefinition.  # noqa: E501

        A list of business object definition change events  # noqa: E501

        :return: The business_object_definition_change_events of this BusinessObjectDefinition.  # noqa: E501
        :rtype: list[BusinessObjectDefinitionChangeEvent]
        """
        return self._business_object_definition_change_events

    @business_object_definition_change_events.setter
    def business_object_definition_change_events(self, business_object_definition_change_events):
        """Sets the business_object_definition_change_events of this BusinessObjectDefinition.

        A list of business object definition change events  # noqa: E501

        :param business_object_definition_change_events: The business_object_definition_change_events of this BusinessObjectDefinition.  # noqa: E501
        :type: list[BusinessObjectDefinitionChangeEvent]
        """

        self._business_object_definition_change_events = business_object_definition_change_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
