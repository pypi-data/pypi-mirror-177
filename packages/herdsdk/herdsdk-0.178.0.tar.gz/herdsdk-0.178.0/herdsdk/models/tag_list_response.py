# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TagListResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tag_key': 'TagKey',
        'parent_tag_key': 'TagKey',
        'tag_children': 'list[TagChild]'
    }

    attribute_map = {
        'tag_key': 'tagKey',
        'parent_tag_key': 'parentTagKey',
        'tag_children': 'tagChildren'
    }

    def __init__(self, tag_key=None, parent_tag_key=None, tag_children=None):  # noqa: E501
        """TagListResponse - a model defined in OpenAPI"""  # noqa: E501

        self._tag_key = None
        self._parent_tag_key = None
        self._tag_children = None
        self.discriminator = None

        if tag_key is not None:
            self.tag_key = tag_key
        if parent_tag_key is not None:
            self.parent_tag_key = parent_tag_key
        if tag_children is not None:
            self.tag_children = tag_children

    @property
    def tag_key(self):
        """Gets the tag_key of this TagListResponse.  # noqa: E501


        :return: The tag_key of this TagListResponse.  # noqa: E501
        :rtype: TagKey
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this TagListResponse.


        :param tag_key: The tag_key of this TagListResponse.  # noqa: E501
        :type: TagKey
        """

        self._tag_key = tag_key

    @property
    def parent_tag_key(self):
        """Gets the parent_tag_key of this TagListResponse.  # noqa: E501


        :return: The parent_tag_key of this TagListResponse.  # noqa: E501
        :rtype: TagKey
        """
        return self._parent_tag_key

    @parent_tag_key.setter
    def parent_tag_key(self, parent_tag_key):
        """Sets the parent_tag_key of this TagListResponse.


        :param parent_tag_key: The parent_tag_key of this TagListResponse.  # noqa: E501
        :type: TagKey
        """

        self._parent_tag_key = parent_tag_key

    @property
    def tag_children(self):
        """Gets the tag_children of this TagListResponse.  # noqa: E501

        The list of children tags  # noqa: E501

        :return: The tag_children of this TagListResponse.  # noqa: E501
        :rtype: list[TagChild]
        """
        return self._tag_children

    @tag_children.setter
    def tag_children(self, tag_children):
        """Sets the tag_children of this TagListResponse.

        The list of children tags  # noqa: E501

        :param tag_children: The tag_children of this TagListResponse.  # noqa: E501
        :type: list[TagChild]
        """

        self._tag_children = tag_children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagListResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
