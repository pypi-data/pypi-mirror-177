# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Facet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'facet_display_name': 'str',
        'facet_count': 'int',
        'facet_type': 'str',
        'facet_id': 'str',
        'facets': 'list[Facet]'
    }

    attribute_map = {
        'facet_display_name': 'facetDisplayName',
        'facet_count': 'facetCount',
        'facet_type': 'facetType',
        'facet_id': 'facetId',
        'facets': 'facets'
    }

    def __init__(self, facet_display_name=None, facet_count=None, facet_type=None, facet_id=None, facets=None):  # noqa: E501
        """Facet - a model defined in OpenAPI"""  # noqa: E501

        self._facet_display_name = None
        self._facet_count = None
        self._facet_type = None
        self._facet_id = None
        self._facets = None
        self.discriminator = None

        if facet_display_name is not None:
            self.facet_display_name = facet_display_name
        if facet_count is not None:
            self.facet_count = facet_count
        if facet_type is not None:
            self.facet_type = facet_type
        if facet_id is not None:
            self.facet_id = facet_id
        if facets is not None:
            self.facets = facets

    @property
    def facet_display_name(self):
        """Gets the facet_display_name of this Facet.  # noqa: E501

        Display name of the facet  # noqa: E501

        :return: The facet_display_name of this Facet.  # noqa: E501
        :rtype: str
        """
        return self._facet_display_name

    @facet_display_name.setter
    def facet_display_name(self, facet_display_name):
        """Sets the facet_display_name of this Facet.

        Display name of the facet  # noqa: E501

        :param facet_display_name: The facet_display_name of this Facet.  # noqa: E501
        :type: str
        """

        self._facet_display_name = facet_display_name

    @property
    def facet_count(self):
        """Gets the facet_count of this Facet.  # noqa: E501

        count of the facet  # noqa: E501

        :return: The facet_count of this Facet.  # noqa: E501
        :rtype: int
        """
        return self._facet_count

    @facet_count.setter
    def facet_count(self, facet_count):
        """Sets the facet_count of this Facet.

        count of the facet  # noqa: E501

        :param facet_count: The facet_count of this Facet.  # noqa: E501
        :type: int
        """

        self._facet_count = facet_count

    @property
    def facet_type(self):
        """Gets the facet_type of this Facet.  # noqa: E501

        Type of the facet  # noqa: E501

        :return: The facet_type of this Facet.  # noqa: E501
        :rtype: str
        """
        return self._facet_type

    @facet_type.setter
    def facet_type(self, facet_type):
        """Sets the facet_type of this Facet.

        Type of the facet  # noqa: E501

        :param facet_type: The facet_type of this Facet.  # noqa: E501
        :type: str
        """

        self._facet_type = facet_type

    @property
    def facet_id(self):
        """Gets the facet_id of this Facet.  # noqa: E501

        unique identifier of the facet  # noqa: E501

        :return: The facet_id of this Facet.  # noqa: E501
        :rtype: str
        """
        return self._facet_id

    @facet_id.setter
    def facet_id(self, facet_id):
        """Sets the facet_id of this Facet.

        unique identifier of the facet  # noqa: E501

        :param facet_id: The facet_id of this Facet.  # noqa: E501
        :type: str
        """

        self._facet_id = facet_id

    @property
    def facets(self):
        """Gets the facets of this Facet.  # noqa: E501

        list of facets  # noqa: E501

        :return: The facets of this Facet.  # noqa: E501
        :rtype: list[Facet]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this Facet.

        list of facets  # noqa: E501

        :param facets: The facets of this Facet.  # noqa: E501
        :type: list[Facet]
        """

        self._facets = facets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Facet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
