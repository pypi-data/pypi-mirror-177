# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrClusterDefinitionInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'emr_cluster_definition_key': 'EmrClusterDefinitionKey',
        'emr_cluster_definition': 'EmrClusterDefinition'
    }

    attribute_map = {
        'id': 'id',
        'emr_cluster_definition_key': 'emrClusterDefinitionKey',
        'emr_cluster_definition': 'emrClusterDefinition'
    }

    def __init__(self, id=None, emr_cluster_definition_key=None, emr_cluster_definition=None):  # noqa: E501
        """EmrClusterDefinitionInformation - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._emr_cluster_definition_key = None
        self._emr_cluster_definition = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.emr_cluster_definition_key = emr_cluster_definition_key
        self.emr_cluster_definition = emr_cluster_definition

    @property
    def id(self):
        """Gets the id of this EmrClusterDefinitionInformation.  # noqa: E501


        :return: The id of this EmrClusterDefinitionInformation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmrClusterDefinitionInformation.


        :param id: The id of this EmrClusterDefinitionInformation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def emr_cluster_definition_key(self):
        """Gets the emr_cluster_definition_key of this EmrClusterDefinitionInformation.  # noqa: E501


        :return: The emr_cluster_definition_key of this EmrClusterDefinitionInformation.  # noqa: E501
        :rtype: EmrClusterDefinitionKey
        """
        return self._emr_cluster_definition_key

    @emr_cluster_definition_key.setter
    def emr_cluster_definition_key(self, emr_cluster_definition_key):
        """Sets the emr_cluster_definition_key of this EmrClusterDefinitionInformation.


        :param emr_cluster_definition_key: The emr_cluster_definition_key of this EmrClusterDefinitionInformation.  # noqa: E501
        :type: EmrClusterDefinitionKey
        """
        if emr_cluster_definition_key is None:
            raise ValueError("Invalid value for `emr_cluster_definition_key`, must not be `None`")  # noqa: E501

        self._emr_cluster_definition_key = emr_cluster_definition_key

    @property
    def emr_cluster_definition(self):
        """Gets the emr_cluster_definition of this EmrClusterDefinitionInformation.  # noqa: E501


        :return: The emr_cluster_definition of this EmrClusterDefinitionInformation.  # noqa: E501
        :rtype: EmrClusterDefinition
        """
        return self._emr_cluster_definition

    @emr_cluster_definition.setter
    def emr_cluster_definition(self, emr_cluster_definition):
        """Sets the emr_cluster_definition of this EmrClusterDefinitionInformation.


        :param emr_cluster_definition: The emr_cluster_definition of this EmrClusterDefinitionInformation.  # noqa: E501
        :type: EmrClusterDefinition
        """
        if emr_cluster_definition is None:
            raise ValueError("Invalid value for `emr_cluster_definition`, must not be `None`")  # noqa: E501

        self._emr_cluster_definition = emr_cluster_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrClusterDefinitionInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
