# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StorageUnitCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storage_name': 'str',
        'storage_directory': 'StorageDirectory',
        'storage_files': 'list[StorageFile]',
        'discover_storage_files': 'bool'
    }

    attribute_map = {
        'storage_name': 'storageName',
        'storage_directory': 'storageDirectory',
        'storage_files': 'storageFiles',
        'discover_storage_files': 'discoverStorageFiles'
    }

    def __init__(self, storage_name=None, storage_directory=None, storage_files=None, discover_storage_files=None):  # noqa: E501
        """StorageUnitCreateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._storage_name = None
        self._storage_directory = None
        self._storage_files = None
        self._discover_storage_files = None
        self.discriminator = None

        self.storage_name = storage_name
        if storage_directory is not None:
            self.storage_directory = storage_directory
        if storage_files is not None:
            self.storage_files = storage_files
        if discover_storage_files is not None:
            self.discover_storage_files = discover_storage_files

    @property
    def storage_name(self):
        """Gets the storage_name of this StorageUnitCreateRequest.  # noqa: E501

        The name of the Storage that this Storage Unit is associated with. The Storage must be pre-existing in the system. Required                   when storageUnit is present                  # noqa: E501

        :return: The storage_name of this StorageUnitCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """Sets the storage_name of this StorageUnitCreateRequest.

        The name of the Storage that this Storage Unit is associated with. The Storage must be pre-existing in the system. Required                   when storageUnit is present                  # noqa: E501

        :param storage_name: The storage_name of this StorageUnitCreateRequest.  # noqa: E501
        :type: str
        """
        if storage_name is None:
            raise ValueError("Invalid value for `storage_name`, must not be `None`")  # noqa: E501

        self._storage_name = storage_name

    @property
    def storage_directory(self):
        """Gets the storage_directory of this StorageUnitCreateRequest.  # noqa: E501


        :return: The storage_directory of this StorageUnitCreateRequest.  # noqa: E501
        :rtype: StorageDirectory
        """
        return self._storage_directory

    @storage_directory.setter
    def storage_directory(self, storage_directory):
        """Sets the storage_directory of this StorageUnitCreateRequest.


        :param storage_directory: The storage_directory of this StorageUnitCreateRequest.  # noqa: E501
        :type: StorageDirectory
        """

        self._storage_directory = storage_directory

    @property
    def storage_files(self):
        """Gets the storage_files of this StorageUnitCreateRequest.  # noqa: E501

        A container of various Storage Files that reside within a specific Storage Unit. Required when storageUnit is present and                   storageDirectory is not. Note: storageFiles cannot be specified when discoverStorageFiles is enabled.                  # noqa: E501

        :return: The storage_files of this StorageUnitCreateRequest.  # noqa: E501
        :rtype: list[StorageFile]
        """
        return self._storage_files

    @storage_files.setter
    def storage_files(self, storage_files):
        """Sets the storage_files of this StorageUnitCreateRequest.

        A container of various Storage Files that reside within a specific Storage Unit. Required when storageUnit is present and                   storageDirectory is not. Note: storageFiles cannot be specified when discoverStorageFiles is enabled.                  # noqa: E501

        :param storage_files: The storage_files of this StorageUnitCreateRequest.  # noqa: E501
        :type: list[StorageFile]
        """

        self._storage_files = storage_files

    @property
    def discover_storage_files(self):
        """Gets the discover_storage_files of this StorageUnitCreateRequest.  # noqa: E501

        If true, enables the auto-discovery of all Storage Files in the specified Storage Directory. See notes on S3 consistency for                   important information                  # noqa: E501

        :return: The discover_storage_files of this StorageUnitCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._discover_storage_files

    @discover_storage_files.setter
    def discover_storage_files(self, discover_storage_files):
        """Sets the discover_storage_files of this StorageUnitCreateRequest.

        If true, enables the auto-discovery of all Storage Files in the specified Storage Directory. See notes on S3 consistency for                   important information                  # noqa: E501

        :param discover_storage_files: The discover_storage_files of this StorageUnitCreateRequest.  # noqa: E501
        :type: bool
        """

        self._discover_storage_files = discover_storage_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageUnitCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
