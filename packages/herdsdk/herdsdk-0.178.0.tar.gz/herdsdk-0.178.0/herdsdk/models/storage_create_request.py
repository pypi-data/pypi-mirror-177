# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StorageCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'storage_platform_name': 'str',
        'attributes': 'list[Attribute]'
    }

    attribute_map = {
        'name': 'name',
        'storage_platform_name': 'storagePlatformName',
        'attributes': 'attributes'
    }

    def __init__(self, name=None, storage_platform_name=None, attributes=None):  # noqa: E501
        """StorageCreateRequest - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._storage_platform_name = None
        self._attributes = None
        self.discriminator = None

        self.name = name
        self.storage_platform_name = storage_platform_name
        if attributes is not None:
            self.attributes = attributes

    @property
    def name(self):
        """Gets the name of this StorageCreateRequest.  # noqa: E501

        Name of Storage  # noqa: E501

        :return: The name of this StorageCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageCreateRequest.

        Name of Storage  # noqa: E501

        :param name: The name of this StorageCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def storage_platform_name(self):
        """Gets the storage_platform_name of this StorageCreateRequest.  # noqa: E501

        Name of Storage Platform (eg S3) associated with this Storage  # noqa: E501

        :return: The storage_platform_name of this StorageCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_platform_name

    @storage_platform_name.setter
    def storage_platform_name(self, storage_platform_name):
        """Sets the storage_platform_name of this StorageCreateRequest.

        Name of Storage Platform (eg S3) associated with this Storage  # noqa: E501

        :param storage_platform_name: The storage_platform_name of this StorageCreateRequest.  # noqa: E501
        :type: str
        """
        if storage_platform_name is None:
            raise ValueError("Invalid value for `storage_platform_name`, must not be `None`")  # noqa: E501

        self._storage_platform_name = storage_platform_name

    @property
    def attributes(self):
        """Gets the attributes of this StorageCreateRequest.  # noqa: E501

        Collection of name-value pairs. This can be used to store things such as S3 bucket names, validation flags, and custom                   user-defined meta-data about this storage                  # noqa: E501

        :return: The attributes of this StorageCreateRequest.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this StorageCreateRequest.

        Collection of name-value pairs. This can be used to store things such as S3 bucket names, validation flags, and custom                   user-defined meta-data about this storage                  # noqa: E501

        :param attributes: The attributes of this StorageCreateRequest.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
