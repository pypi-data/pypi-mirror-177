# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmrClusterDefinitionKerberosAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ad_domain_join_password': 'str',
        'ad_domain_join_user': 'str',
        'cross_realm_trust_principal_password': 'str',
        'kdc_admin_password': 'str',
        'realm': 'str'
    }

    attribute_map = {
        'ad_domain_join_password': 'adDomainJoinPassword',
        'ad_domain_join_user': 'adDomainJoinUser',
        'cross_realm_trust_principal_password': 'crossRealmTrustPrincipalPassword',
        'kdc_admin_password': 'kdcAdminPassword',
        'realm': 'realm'
    }

    def __init__(self, ad_domain_join_password=None, ad_domain_join_user=None, cross_realm_trust_principal_password=None, kdc_admin_password=None, realm=None):  # noqa: E501
        """EmrClusterDefinitionKerberosAttributes - a model defined in OpenAPI"""  # noqa: E501

        self._ad_domain_join_password = None
        self._ad_domain_join_user = None
        self._cross_realm_trust_principal_password = None
        self._kdc_admin_password = None
        self._realm = None
        self.discriminator = None

        if ad_domain_join_password is not None:
            self.ad_domain_join_password = ad_domain_join_password
        if ad_domain_join_user is not None:
            self.ad_domain_join_user = ad_domain_join_user
        if cross_realm_trust_principal_password is not None:
            self.cross_realm_trust_principal_password = cross_realm_trust_principal_password
        if kdc_admin_password is not None:
            self.kdc_admin_password = kdc_admin_password
        if realm is not None:
            self.realm = realm

    @property
    def ad_domain_join_password(self):
        """Gets the ad_domain_join_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501


        :return: The ad_domain_join_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :rtype: str
        """
        return self._ad_domain_join_password

    @ad_domain_join_password.setter
    def ad_domain_join_password(self, ad_domain_join_password):
        """Sets the ad_domain_join_password of this EmrClusterDefinitionKerberosAttributes.


        :param ad_domain_join_password: The ad_domain_join_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :type: str
        """

        self._ad_domain_join_password = ad_domain_join_password

    @property
    def ad_domain_join_user(self):
        """Gets the ad_domain_join_user of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501


        :return: The ad_domain_join_user of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :rtype: str
        """
        return self._ad_domain_join_user

    @ad_domain_join_user.setter
    def ad_domain_join_user(self, ad_domain_join_user):
        """Sets the ad_domain_join_user of this EmrClusterDefinitionKerberosAttributes.


        :param ad_domain_join_user: The ad_domain_join_user of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :type: str
        """

        self._ad_domain_join_user = ad_domain_join_user

    @property
    def cross_realm_trust_principal_password(self):
        """Gets the cross_realm_trust_principal_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501

        Required only when establishing a cross-realm trust with a KDC in a different realm  # noqa: E501

        :return: The cross_realm_trust_principal_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :rtype: str
        """
        return self._cross_realm_trust_principal_password

    @cross_realm_trust_principal_password.setter
    def cross_realm_trust_principal_password(self, cross_realm_trust_principal_password):
        """Sets the cross_realm_trust_principal_password of this EmrClusterDefinitionKerberosAttributes.

        Required only when establishing a cross-realm trust with a KDC in a different realm  # noqa: E501

        :param cross_realm_trust_principal_password: The cross_realm_trust_principal_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :type: str
        """

        self._cross_realm_trust_principal_password = cross_realm_trust_principal_password

    @property
    def kdc_admin_password(self):
        """Gets the kdc_admin_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501

        The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals,                   password policies, and keytabs for the cluster                  # noqa: E501

        :return: The kdc_admin_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :rtype: str
        """
        return self._kdc_admin_password

    @kdc_admin_password.setter
    def kdc_admin_password(self, kdc_admin_password):
        """Sets the kdc_admin_password of this EmrClusterDefinitionKerberosAttributes.

        The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals,                   password policies, and keytabs for the cluster                  # noqa: E501

        :param kdc_admin_password: The kdc_admin_password of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :type: str
        """

        self._kdc_admin_password = kdc_admin_password

    @property
    def realm(self):
        """Gets the realm of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501

        The name of the Kerberos realm to which all nodes in a cluster belong  # noqa: E501

        :return: The realm of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this EmrClusterDefinitionKerberosAttributes.

        The name of the Kerberos realm to which all nodes in a cluster belong  # noqa: E501

        :param realm: The realm of this EmrClusterDefinitionKerberosAttributes.  # noqa: E501
        :type: str
        """

        self._realm = realm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmrClusterDefinitionKerberosAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
