# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StoragePolicyFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'business_object_definition_name': 'str',
        'business_object_format_usage': 'str',
        'business_object_format_file_type': 'str',
        'storage_name': 'str',
        'do_not_transition_latest_valid': 'bool'
    }

    attribute_map = {
        'namespace': 'namespace',
        'business_object_definition_name': 'businessObjectDefinitionName',
        'business_object_format_usage': 'businessObjectFormatUsage',
        'business_object_format_file_type': 'businessObjectFormatFileType',
        'storage_name': 'storageName',
        'do_not_transition_latest_valid': 'doNotTransitionLatestValid'
    }

    def __init__(self, namespace=None, business_object_definition_name=None, business_object_format_usage=None, business_object_format_file_type=None, storage_name=None, do_not_transition_latest_valid=None):  # noqa: E501
        """StoragePolicyFilter - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._business_object_definition_name = None
        self._business_object_format_usage = None
        self._business_object_format_file_type = None
        self._storage_name = None
        self._do_not_transition_latest_valid = None
        self.discriminator = None

        if namespace is not None:
            self.namespace = namespace
        if business_object_definition_name is not None:
            self.business_object_definition_name = business_object_definition_name
        if business_object_format_usage is not None:
            self.business_object_format_usage = business_object_format_usage
        if business_object_format_file_type is not None:
            self.business_object_format_file_type = business_object_format_file_type
        self.storage_name = storage_name
        if do_not_transition_latest_valid is not None:
            self.do_not_transition_latest_valid = do_not_transition_latest_valid

    @property
    def namespace(self):
        """Gets the namespace of this StoragePolicyFilter.  # noqa: E501

        The namespace of the registered business object definition. It is required when businessObjectDefinitionName is present                  # noqa: E501

        :return: The namespace of this StoragePolicyFilter.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this StoragePolicyFilter.

        The namespace of the registered business object definition. It is required when businessObjectDefinitionName is present                  # noqa: E501

        :param namespace: The namespace of this StoragePolicyFilter.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def business_object_definition_name(self):
        """Gets the business_object_definition_name of this StoragePolicyFilter.  # noqa: E501

        The name of the registered business object definition. It is required when namespace is present  # noqa: E501

        :return: The business_object_definition_name of this StoragePolicyFilter.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_name

    @business_object_definition_name.setter
    def business_object_definition_name(self, business_object_definition_name):
        """Sets the business_object_definition_name of this StoragePolicyFilter.

        The name of the registered business object definition. It is required when namespace is present  # noqa: E501

        :param business_object_definition_name: The business_object_definition_name of this StoragePolicyFilter.  # noqa: E501
        :type: str
        """

        self._business_object_definition_name = business_object_definition_name

    @property
    def business_object_format_usage(self):
        """Gets the business_object_format_usage of this StoragePolicyFilter.  # noqa: E501

        The business object format usage. The usage does not need to exist in the system. It is required when                   businessObjectFormatFileType is present                  # noqa: E501

        :return: The business_object_format_usage of this StoragePolicyFilter.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_usage

    @business_object_format_usage.setter
    def business_object_format_usage(self, business_object_format_usage):
        """Sets the business_object_format_usage of this StoragePolicyFilter.

        The business object format usage. The usage does not need to exist in the system. It is required when                   businessObjectFormatFileType is present                  # noqa: E501

        :param business_object_format_usage: The business_object_format_usage of this StoragePolicyFilter.  # noqa: E501
        :type: str
        """

        self._business_object_format_usage = business_object_format_usage

    @property
    def business_object_format_file_type(self):
        """Gets the business_object_format_file_type of this StoragePolicyFilter.  # noqa: E501

        The business object format file type. The file type must be known by the system. It is required when businessObjectFormatUsage                   is present                  # noqa: E501

        :return: The business_object_format_file_type of this StoragePolicyFilter.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_file_type

    @business_object_format_file_type.setter
    def business_object_format_file_type(self, business_object_format_file_type):
        """Sets the business_object_format_file_type of this StoragePolicyFilter.

        The business object format file type. The file type must be known by the system. It is required when businessObjectFormatUsage                   is present                  # noqa: E501

        :param business_object_format_file_type: The business_object_format_file_type of this StoragePolicyFilter.  # noqa: E501
        :type: str
        """

        self._business_object_format_file_type = business_object_format_file_type

    @property
    def storage_name(self):
        """Gets the storage_name of this StoragePolicyFilter.  # noqa: E501

        The name of the storage that this storage policy applies to. The storage with this name must already exist. Currently, only S3                   storage platform type is supported by the storage policies                  # noqa: E501

        :return: The storage_name of this StoragePolicyFilter.  # noqa: E501
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """Sets the storage_name of this StoragePolicyFilter.

        The name of the storage that this storage policy applies to. The storage with this name must already exist. Currently, only S3                   storage platform type is supported by the storage policies                  # noqa: E501

        :param storage_name: The storage_name of this StoragePolicyFilter.  # noqa: E501
        :type: str
        """
        if storage_name is None:
            raise ValueError("Invalid value for `storage_name`, must not be `None`")  # noqa: E501

        self._storage_name = storage_name

    @property
    def do_not_transition_latest_valid(self):
        """Gets the do_not_transition_latest_valid of this StoragePolicyFilter.  # noqa: E501

        If true, this storage policy will not transition latest valid business object data versions  # noqa: E501

        :return: The do_not_transition_latest_valid of this StoragePolicyFilter.  # noqa: E501
        :rtype: bool
        """
        return self._do_not_transition_latest_valid

    @do_not_transition_latest_valid.setter
    def do_not_transition_latest_valid(self, do_not_transition_latest_valid):
        """Sets the do_not_transition_latest_valid of this StoragePolicyFilter.

        If true, this storage policy will not transition latest valid business object data versions  # noqa: E501

        :param do_not_transition_latest_valid: The do_not_transition_latest_valid of this StoragePolicyFilter.  # noqa: E501
        :type: bool
        """

        self._do_not_transition_latest_valid = do_not_transition_latest_valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePolicyFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
