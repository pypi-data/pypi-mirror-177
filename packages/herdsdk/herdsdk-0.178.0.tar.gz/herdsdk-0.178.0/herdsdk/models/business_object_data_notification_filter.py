# coding: utf-8

"""
    herd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.178.0-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BusinessObjectDataNotificationFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'business_object_definition_name': 'str',
        'business_object_format_usage': 'str',
        'business_object_format_file_type': 'str',
        'business_object_format_version': 'int',
        'storage_name': 'str',
        'new_business_object_data_status': 'str',
        'old_business_object_data_status': 'str'
    }

    attribute_map = {
        'namespace': 'namespace',
        'business_object_definition_name': 'businessObjectDefinitionName',
        'business_object_format_usage': 'businessObjectFormatUsage',
        'business_object_format_file_type': 'businessObjectFormatFileType',
        'business_object_format_version': 'businessObjectFormatVersion',
        'storage_name': 'storageName',
        'new_business_object_data_status': 'newBusinessObjectDataStatus',
        'old_business_object_data_status': 'oldBusinessObjectDataStatus'
    }

    def __init__(self, namespace=None, business_object_definition_name=None, business_object_format_usage=None, business_object_format_file_type=None, business_object_format_version=None, storage_name=None, new_business_object_data_status=None, old_business_object_data_status=None):  # noqa: E501
        """BusinessObjectDataNotificationFilter - a model defined in OpenAPI"""  # noqa: E501

        self._namespace = None
        self._business_object_definition_name = None
        self._business_object_format_usage = None
        self._business_object_format_file_type = None
        self._business_object_format_version = None
        self._storage_name = None
        self._new_business_object_data_status = None
        self._old_business_object_data_status = None
        self.discriminator = None

        self.namespace = namespace
        self.business_object_definition_name = business_object_definition_name
        if business_object_format_usage is not None:
            self.business_object_format_usage = business_object_format_usage
        if business_object_format_file_type is not None:
            self.business_object_format_file_type = business_object_format_file_type
        if business_object_format_version is not None:
            self.business_object_format_version = business_object_format_version
        if storage_name is not None:
            self.storage_name = storage_name
        if new_business_object_data_status is not None:
            self.new_business_object_data_status = new_business_object_data_status
        if old_business_object_data_status is not None:
            self.old_business_object_data_status = old_business_object_data_status

    @property
    def namespace(self):
        """Gets the namespace of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The namespace of the business object definition  # noqa: E501

        :return: The namespace of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BusinessObjectDataNotificationFilter.

        The namespace of the business object definition  # noqa: E501

        :param namespace: The namespace of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def business_object_definition_name(self):
        """Gets the business_object_definition_name of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The business object definition name  # noqa: E501

        :return: The business_object_definition_name of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: str
        """
        return self._business_object_definition_name

    @business_object_definition_name.setter
    def business_object_definition_name(self, business_object_definition_name):
        """Sets the business_object_definition_name of this BusinessObjectDataNotificationFilter.

        The business object definition name  # noqa: E501

        :param business_object_definition_name: The business_object_definition_name of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: str
        """
        if business_object_definition_name is None:
            raise ValueError("Invalid value for `business_object_definition_name`, must not be `None`")  # noqa: E501

        self._business_object_definition_name = business_object_definition_name

    @property
    def business_object_format_usage(self):
        """Gets the business_object_format_usage of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The business object format usage  # noqa: E501

        :return: The business_object_format_usage of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_usage

    @business_object_format_usage.setter
    def business_object_format_usage(self, business_object_format_usage):
        """Sets the business_object_format_usage of this BusinessObjectDataNotificationFilter.

        The business object format usage  # noqa: E501

        :param business_object_format_usage: The business_object_format_usage of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: str
        """

        self._business_object_format_usage = business_object_format_usage

    @property
    def business_object_format_file_type(self):
        """Gets the business_object_format_file_type of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The business object format file type  # noqa: E501

        :return: The business_object_format_file_type of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: str
        """
        return self._business_object_format_file_type

    @business_object_format_file_type.setter
    def business_object_format_file_type(self, business_object_format_file_type):
        """Sets the business_object_format_file_type of this BusinessObjectDataNotificationFilter.

        The business object format file type  # noqa: E501

        :param business_object_format_file_type: The business_object_format_file_type of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: str
        """

        self._business_object_format_file_type = business_object_format_file_type

    @property
    def business_object_format_version(self):
        """Gets the business_object_format_version of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The business object format version  # noqa: E501

        :return: The business_object_format_version of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: int
        """
        return self._business_object_format_version

    @business_object_format_version.setter
    def business_object_format_version(self, business_object_format_version):
        """Sets the business_object_format_version of this BusinessObjectDataNotificationFilter.

        The business object format version  # noqa: E501

        :param business_object_format_version: The business_object_format_version of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: int
        """

        self._business_object_format_version = business_object_format_version

    @property
    def storage_name(self):
        """Gets the storage_name of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The storage name  # noqa: E501

        :return: The storage_name of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """Sets the storage_name of this BusinessObjectDataNotificationFilter.

        The storage name  # noqa: E501

        :param storage_name: The storage_name of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: str
        """

        self._storage_name = storage_name

    @property
    def new_business_object_data_status(self):
        """Gets the new_business_object_data_status of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The new business object data status  # noqa: E501

        :return: The new_business_object_data_status of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: str
        """
        return self._new_business_object_data_status

    @new_business_object_data_status.setter
    def new_business_object_data_status(self, new_business_object_data_status):
        """Sets the new_business_object_data_status of this BusinessObjectDataNotificationFilter.

        The new business object data status  # noqa: E501

        :param new_business_object_data_status: The new_business_object_data_status of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: str
        """

        self._new_business_object_data_status = new_business_object_data_status

    @property
    def old_business_object_data_status(self):
        """Gets the old_business_object_data_status of this BusinessObjectDataNotificationFilter.  # noqa: E501

        The old business object data status  # noqa: E501

        :return: The old_business_object_data_status of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :rtype: str
        """
        return self._old_business_object_data_status

    @old_business_object_data_status.setter
    def old_business_object_data_status(self, old_business_object_data_status):
        """Sets the old_business_object_data_status of this BusinessObjectDataNotificationFilter.

        The old business object data status  # noqa: E501

        :param old_business_object_data_status: The old_business_object_data_status of this BusinessObjectDataNotificationFilter.  # noqa: E501
        :type: str
        """

        self._old_business_object_data_status = old_business_object_data_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessObjectDataNotificationFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
