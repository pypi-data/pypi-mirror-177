from typing import ClassVar, Optional

import numpy
import pydrake.lcm
import pydrake.systems.framework
import pydrake.systems.lcm

class IiwaCommandReceiver(pydrake.systems.framework.LeafSystem_[float]):
    def __init__(self, num_joints: int = ...) -> None: ...
    def get_commanded_position_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_commanded_torque_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_message_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_position_measured_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_time_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...

class IiwaCommandSender(pydrake.systems.framework.LeafSystem_[float]):
    def __init__(self, num_joints: int = ...) -> None: ...
    def get_position_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_time_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_torque_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...

class IiwaDriver:
    __fields__: ClassVar[tuple] = ...  # read-only
    ext_joint_filter_tau: float
    hand_model_name: str
    lcm_bus: str
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> IiwaDriver: ...
    def __deepcopy__(self, arg0: dict) -> IiwaDriver: ...

class IiwaStatusReceiver(pydrake.systems.framework.LeafSystem_[float]):
    def __init__(self, num_joints: int = ...) -> None: ...
    def get_position_commanded_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_position_measured_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_time_measured_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_torque_commanded_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_torque_external_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_torque_measured_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...
    def get_velocity_estimated_output_port(self) -> pydrake.systems.framework.OutputPort_[float]: ...

class IiwaStatusSender(pydrake.systems.framework.LeafSystem_[float]):
    def __init__(self, num_joints: int = ...) -> None: ...
    def get_position_commanded_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_position_measured_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_time_measured_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_torque_commanded_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_torque_external_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_torque_measured_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def get_velocity_estimated_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...

def ApplyDriverConfig(driver_config: IiwaDriver, model_instance_name: str, sim_plant, models_from_directives, lcms: pydrake.systems.lcm.LcmBuses, builder: pydrake.systems.framework.DiagramBuilder_[float]) -> None: ...
def BuildIiwaControl(plant, iiwa_instance, controller_plant, lcm: pydrake.lcm.DrakeLcmInterface, builder: pydrake.systems.framework.DiagramBuilder_[float], ext_joint_filter_tau: float = ..., desired_iiwa_kp_gains: Optional[numpy.ndarray[numpy.float64[m,1]]] = ...) -> None: ...
def get_iiwa_max_joint_velocities() -> numpy.ndarray[numpy.float64[m,1]]: ...
