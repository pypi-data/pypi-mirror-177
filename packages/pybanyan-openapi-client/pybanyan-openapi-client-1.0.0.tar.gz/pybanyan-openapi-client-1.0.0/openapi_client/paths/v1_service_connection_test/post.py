# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            ServiceID = schemas.StrSchema
            __annotations__ = {
                "ServiceID": ServiceID,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ServiceID"]) -> MetaOapg.properties.ServiceID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ServiceID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ServiceID"]) -> typing.Union[MetaOapg.properties.ServiceID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ServiceID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ServiceID: typing.Union[MetaOapg.properties.ServiceID, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            ServiceID=ServiceID,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class FrontendConnStatus(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        DomainNameResolutionStatus = schemas.IntSchema
                        Reachability = schemas.IntSchema
                        ErrorMsg = schemas.StrSchema
                        __annotations__ = {
                            "DomainNameResolutionStatus": DomainNameResolutionStatus,
                            "Reachability": Reachability,
                            "ErrorMsg": ErrorMsg,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DomainNameResolutionStatus"]) -> MetaOapg.properties.DomainNameResolutionStatus: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Reachability"]) -> MetaOapg.properties.Reachability: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ErrorMsg"]) -> MetaOapg.properties.ErrorMsg: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["DomainNameResolutionStatus", "Reachability", "ErrorMsg", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DomainNameResolutionStatus"]) -> typing.Union[MetaOapg.properties.DomainNameResolutionStatus, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Reachability"]) -> typing.Union[MetaOapg.properties.Reachability, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ErrorMsg"]) -> typing.Union[MetaOapg.properties.ErrorMsg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DomainNameResolutionStatus", "Reachability", "ErrorMsg", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    DomainNameResolutionStatus: typing.Union[MetaOapg.properties.DomainNameResolutionStatus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    Reachability: typing.Union[MetaOapg.properties.Reachability, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    ErrorMsg: typing.Union[MetaOapg.properties.ErrorMsg, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'FrontendConnStatus':
                    return super().__new__(
                        cls,
                        *args,
                        DomainNameResolutionStatus=DomainNameResolutionStatus,
                        Reachability=Reachability,
                        ErrorMsg=ErrorMsg,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class BackendConnStatus(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                SiteName = schemas.StrSchema
                                
                                
                                class AccessTierStatus(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            DomainNameResolutionStatus = schemas.IntSchema
                                            Reachability = schemas.IntSchema
                                            ErrorMsg = schemas.StrSchema
                                            __annotations__ = {
                                                "DomainNameResolutionStatus": DomainNameResolutionStatus,
                                                "Reachability": Reachability,
                                                "ErrorMsg": ErrorMsg,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["DomainNameResolutionStatus"]) -> MetaOapg.properties.DomainNameResolutionStatus: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["Reachability"]) -> MetaOapg.properties.Reachability: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["ErrorMsg"]) -> MetaOapg.properties.ErrorMsg: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["DomainNameResolutionStatus", "Reachability", "ErrorMsg", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["DomainNameResolutionStatus"]) -> typing.Union[MetaOapg.properties.DomainNameResolutionStatus, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["Reachability"]) -> typing.Union[MetaOapg.properties.Reachability, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["ErrorMsg"]) -> typing.Union[MetaOapg.properties.ErrorMsg, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DomainNameResolutionStatus", "Reachability", "ErrorMsg", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        DomainNameResolutionStatus: typing.Union[MetaOapg.properties.DomainNameResolutionStatus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        Reachability: typing.Union[MetaOapg.properties.Reachability, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        ErrorMsg: typing.Union[MetaOapg.properties.ErrorMsg, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'AccessTierStatus':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            DomainNameResolutionStatus=DomainNameResolutionStatus,
                                            Reachability=Reachability,
                                            ErrorMsg=ErrorMsg,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class NetagentBackendStatus(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    ID = schemas.StrSchema
                                                    SiteName = schemas.StrSchema
                                                    NetagentHostname = schemas.StrSchema
                                                    
                                                    
                                                    class ConnStatus(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                DomainNameResolutionStatus = schemas.IntSchema
                                                                Reachability = schemas.IntSchema
                                                                ErrorMsg = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "DomainNameResolutionStatus": DomainNameResolutionStatus,
                                                                    "Reachability": Reachability,
                                                                    "ErrorMsg": ErrorMsg,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["DomainNameResolutionStatus"]) -> MetaOapg.properties.DomainNameResolutionStatus: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["Reachability"]) -> MetaOapg.properties.Reachability: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["ErrorMsg"]) -> MetaOapg.properties.ErrorMsg: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["DomainNameResolutionStatus", "Reachability", "ErrorMsg", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["DomainNameResolutionStatus"]) -> typing.Union[MetaOapg.properties.DomainNameResolutionStatus, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["Reachability"]) -> typing.Union[MetaOapg.properties.Reachability, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["ErrorMsg"]) -> typing.Union[MetaOapg.properties.ErrorMsg, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DomainNameResolutionStatus", "Reachability", "ErrorMsg", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            DomainNameResolutionStatus: typing.Union[MetaOapg.properties.DomainNameResolutionStatus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                            Reachability: typing.Union[MetaOapg.properties.Reachability, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                            ErrorMsg: typing.Union[MetaOapg.properties.ErrorMsg, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'ConnStatus':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                DomainNameResolutionStatus=DomainNameResolutionStatus,
                                                                Reachability=Reachability,
                                                                ErrorMsg=ErrorMsg,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                                    ValidBefore = schemas.StrSchema
                                                    __annotations__ = {
                                                        "ID": ID,
                                                        "SiteName": SiteName,
                                                        "NetagentHostname": NetagentHostname,
                                                        "ConnStatus": ConnStatus,
                                                        "ValidBefore": ValidBefore,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["SiteName"]) -> MetaOapg.properties.SiteName: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["NetagentHostname"]) -> MetaOapg.properties.NetagentHostname: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ConnStatus"]) -> MetaOapg.properties.ConnStatus: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ValidBefore"]) -> MetaOapg.properties.ValidBefore: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID", "SiteName", "NetagentHostname", "ConnStatus", "ValidBefore", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["SiteName"]) -> typing.Union[MetaOapg.properties.SiteName, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["NetagentHostname"]) -> typing.Union[MetaOapg.properties.NetagentHostname, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ConnStatus"]) -> typing.Union[MetaOapg.properties.ConnStatus, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ValidBefore"]) -> typing.Union[MetaOapg.properties.ValidBefore, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID", "SiteName", "NetagentHostname", "ConnStatus", "ValidBefore", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                ID: typing.Union[MetaOapg.properties.ID, str, schemas.Unset] = schemas.unset,
                                                SiteName: typing.Union[MetaOapg.properties.SiteName, str, schemas.Unset] = schemas.unset,
                                                NetagentHostname: typing.Union[MetaOapg.properties.NetagentHostname, str, schemas.Unset] = schemas.unset,
                                                ConnStatus: typing.Union[MetaOapg.properties.ConnStatus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                ValidBefore: typing.Union[MetaOapg.properties.ValidBefore, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    ID=ID,
                                                    SiteName=SiteName,
                                                    NetagentHostname=NetagentHostname,
                                                    ConnStatus=ConnStatus,
                                                    ValidBefore=ValidBefore,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'NetagentBackendStatus':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "SiteName": SiteName,
                                    "AccessTierStatus": AccessTierStatus,
                                    "NetagentBackendStatus": NetagentBackendStatus,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["SiteName"]) -> MetaOapg.properties.SiteName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["AccessTierStatus"]) -> MetaOapg.properties.AccessTierStatus: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["NetagentBackendStatus"]) -> MetaOapg.properties.NetagentBackendStatus: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["SiteName", "AccessTierStatus", "NetagentBackendStatus", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["SiteName"]) -> typing.Union[MetaOapg.properties.SiteName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["AccessTierStatus"]) -> typing.Union[MetaOapg.properties.AccessTierStatus, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["NetagentBackendStatus"]) -> typing.Union[MetaOapg.properties.NetagentBackendStatus, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SiteName", "AccessTierStatus", "NetagentBackendStatus", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            SiteName: typing.Union[MetaOapg.properties.SiteName, str, schemas.Unset] = schemas.unset,
                            AccessTierStatus: typing.Union[MetaOapg.properties.AccessTierStatus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            NetagentBackendStatus: typing.Union[MetaOapg.properties.NetagentBackendStatus, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                SiteName=SiteName,
                                AccessTierStatus=AccessTierStatus,
                                NetagentBackendStatus=NetagentBackendStatus,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'BackendConnStatus':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "FrontendConnStatus": FrontendConnStatus,
                "BackendConnStatus": BackendConnStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FrontendConnStatus"]) -> MetaOapg.properties.FrontendConnStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BackendConnStatus"]) -> MetaOapg.properties.BackendConnStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FrontendConnStatus", "BackendConnStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FrontendConnStatus"]) -> typing.Union[MetaOapg.properties.FrontendConnStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BackendConnStatus"]) -> typing.Union[MetaOapg.properties.BackendConnStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FrontendConnStatus", "BackendConnStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FrontendConnStatus: typing.Union[MetaOapg.properties.FrontendConnStatus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        BackendConnStatus: typing.Union[MetaOapg.properties.BackendConnStatus, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            FrontendConnStatus=FrontendConnStatus,
            BackendConnStatus=BackendConnStatus,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_service_connection_test_post_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         POST to start the service connection test
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_any_type.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1ServiceConnectionTestPost(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_service_connection_test_post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_service_connection_test_post_oapg(
            body=body,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_service_connection_test_post_oapg(
            body=body,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


