# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# query params
PolicyIDSchema = schemas.StrSchema
ServiceTypeSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'PolicyID': typing.Union[PolicyIDSchema, str, ],
        'ServiceType': typing.Union[ServiceTypeSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_policy_id = api_client.QueryParameter(
    name="PolicyID",
    style=api_client.ParameterStyle.FORM,
    schema=PolicyIDSchema,
    explode=True,
)
request_query_service_type = api_client.QueryParameter(
    name="ServiceType",
    style=api_client.ParameterStyle.FORM,
    schema=ServiceTypeSchema,
    explode=True,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    PolicyID = schemas.StrSchema
                    PolicyName = schemas.StrSchema
                    PolicySpec = schemas.StrSchema
                    CreatedBy = schemas.StrSchema
                    CreatedAt = schemas.IntSchema
                    LastUpdatedBy = schemas.StrSchema
                    LastUpdatedAt = schemas.IntSchema
                    Description = schemas.StrSchema
                    PolicyVersion = schemas.IntSchema
                    DeletedBy = schemas.StrSchema
                    DeletedAt = schemas.StrSchema
                    __annotations__ = {
                        "PolicyID": PolicyID,
                        "PolicyName": PolicyName,
                        "PolicySpec": PolicySpec,
                        "CreatedBy": CreatedBy,
                        "CreatedAt": CreatedAt,
                        "LastUpdatedBy": LastUpdatedBy,
                        "LastUpdatedAt": LastUpdatedAt,
                        "Description": Description,
                        "PolicyVersion": PolicyVersion,
                        "DeletedBy": DeletedBy,
                        "DeletedAt": DeletedAt,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["PolicyID"]) -> MetaOapg.properties.PolicyID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["PolicyName"]) -> MetaOapg.properties.PolicyName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["PolicySpec"]) -> MetaOapg.properties.PolicySpec: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CreatedBy"]) -> MetaOapg.properties.CreatedBy: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> MetaOapg.properties.LastUpdatedBy: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> MetaOapg.properties.LastUpdatedAt: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["PolicyVersion"]) -> MetaOapg.properties.PolicyVersion: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DeletedBy"]) -> MetaOapg.properties.DeletedBy: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DeletedAt"]) -> MetaOapg.properties.DeletedAt: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["PolicyID", "PolicyName", "PolicySpec", "CreatedBy", "CreatedAt", "LastUpdatedBy", "LastUpdatedAt", "Description", "PolicyVersion", "DeletedBy", "DeletedAt", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["PolicyID"]) -> typing.Union[MetaOapg.properties.PolicyID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["PolicyName"]) -> typing.Union[MetaOapg.properties.PolicyName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["PolicySpec"]) -> typing.Union[MetaOapg.properties.PolicySpec, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CreatedBy"]) -> typing.Union[MetaOapg.properties.CreatedBy, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> typing.Union[MetaOapg.properties.LastUpdatedBy, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> typing.Union[MetaOapg.properties.LastUpdatedAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["PolicyVersion"]) -> typing.Union[MetaOapg.properties.PolicyVersion, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DeletedBy"]) -> typing.Union[MetaOapg.properties.DeletedBy, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DeletedAt"]) -> typing.Union[MetaOapg.properties.DeletedAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["PolicyID", "PolicyName", "PolicySpec", "CreatedBy", "CreatedAt", "LastUpdatedBy", "LastUpdatedAt", "Description", "PolicyVersion", "DeletedBy", "DeletedAt", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                PolicyID: typing.Union[MetaOapg.properties.PolicyID, str, schemas.Unset] = schemas.unset,
                PolicyName: typing.Union[MetaOapg.properties.PolicyName, str, schemas.Unset] = schemas.unset,
                PolicySpec: typing.Union[MetaOapg.properties.PolicySpec, str, schemas.Unset] = schemas.unset,
                CreatedBy: typing.Union[MetaOapg.properties.CreatedBy, str, schemas.Unset] = schemas.unset,
                CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                LastUpdatedBy: typing.Union[MetaOapg.properties.LastUpdatedBy, str, schemas.Unset] = schemas.unset,
                LastUpdatedAt: typing.Union[MetaOapg.properties.LastUpdatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                Description: typing.Union[MetaOapg.properties.Description, str, schemas.Unset] = schemas.unset,
                PolicyVersion: typing.Union[MetaOapg.properties.PolicyVersion, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                DeletedBy: typing.Union[MetaOapg.properties.DeletedBy, str, schemas.Unset] = schemas.unset,
                DeletedAt: typing.Union[MetaOapg.properties.DeletedAt, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    PolicyID=PolicyID,
                    PolicyName=PolicyName,
                    PolicySpec=PolicySpec,
                    CreatedBy=CreatedBy,
                    CreatedAt=CreatedAt,
                    LastUpdatedBy=LastUpdatedBy,
                    LastUpdatedAt=LastUpdatedAt,
                    Description=Description,
                    PolicyVersion=PolicyVersion,
                    DeletedBy=DeletedBy,
                    DeletedAt=DeletedAt,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_security_policies_get_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        List policies
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_policy_id,
            request_query_service_type,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1SecurityPoliciesGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_security_policies_get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_security_policies_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_security_policies_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


