{"version":3,"file":"lib_widget_js-webpack_sharing_consume_default_jupyter-widgets_base-webpack_sharing_consume_de-cffbaf.99d61af65376ef61fae4.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;ACpBa;AACb;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,oBAAoB;AAC1C,eAAe,mBAAO,CAAC,yFAAuB;AAC9C,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA,mBAAO,CAAC,2CAAmB;AAC3B;AACA,0BAA0B,mBAAO,CAAC,wFAAiB;AACnD,0BAA0B,mBAAO,CAAC,wFAAiB;AACnD,kCAAkC,mBAAO,CAAC,oFAAyB;AACnE,gBAAgB,mBAAO,CAAC,qEAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,6BAA6B;AACnG;AACA;AACA;AACA;AACA,qDAAqD,kBAAkB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE,YAAY;AACZ,gEAAgE,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,kZAAkZ;AACtd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,8BAA8B;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,yDAAyD,wCAAwC;AACjG;AACA;AACA,KAAK,wIAAwI;AAC7I;AACA;AACA;AACA,wCAAwC;AACxC,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;ACjKA;AACA,kCAAkC,mBAAO,CAAC,qGAAgD;AAC1F;AACA;AACA,0CAA0C,oCAAoC,qBAAqB,GAAG;AACtG;AACA;;;;;;;;;;;ACNA,UAAU,mBAAO,CAAC,oJAAwE;AAC1F,0BAA0B,mBAAO,CAAC,qHAAuD;;AAEzF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA","sources":["webpack://custom_onnx/./lib/version.js","webpack://custom_onnx/./lib/widget.js","webpack://custom_onnx/./css/widget.css","webpack://custom_onnx/./css/widget.css?a195"],"sourcesContent":["\"use strict\";\n// Copyright (c) nallezard\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","\"use strict\";\n// Copyright (c) nallezard\n// Distributed under the terms of the Modified BSD License.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExampleView = exports.ExampleModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst version_1 = require(\"./version\");\n// Import the CSS\nrequire(\"../css/widget.css\");\n//@ts-ignore\nconst onnxruntime_web_1 = require(\"onnxruntime-web\");\nconst onnxruntime_web_2 = require(\"onnxruntime-web\");\nconst jupyter_dataserializers_1 = require(\"jupyter-dataserializers\");\nconst ndarray = require(\"ndarray\");\n// //use an async context to call onnxruntime functions.\n// async function create(model_path:string) {\n//     //try {\n//         // create a new session and load the specific model.\n//         //\n//         // the model in this example contains a single MatMul node\n//         // it has 2 inputs: 'a'(float32, 3x4) and 'b'(float32, 4x3)\n//         // it has 1 output: 'c'(float32, 3x3)\n//         env.wasm.wasmPaths='./wasm/'\n//         env.wasm.numThreads=2\n//         const session = await InferenceSession.create(model_path,{ executionProviders: ['wasm']});\n//         console.log(\"create\",session)\n//         return session\n//         // const inputnames=session.inputNames[0]\n//         // // prepare inputs. a tensor need its corresponding TypedArray as data\n//         // const random_data = Float32Array.from({length: 320*320*3}, () => Math.floor(Math.random() ));\n//         // const tensor_in = new Tensor('float32', random_data, [1,3,320, 320]);\n//         // // prepare feeds. use model input names as keys.\n//         // const feeds: Record<string, any> = {};\n//         // feeds[inputnames]=tensor_in\n//         // // feed inputs and run\n//         // const results = await session.run(feeds);\n//         // // read from results\n//         // const dataC = results\n//         // console.log(\"result\",dataC)\n//         // el.textContent=`data of result tensor 'c': ${dataC}`;\n//     // } catch (e) {\n//     //     document.write(`failed to inference ONNX model: ${e}.`);\n//     // }\n// }\nfunction serializeImageData(array) {\n    return new DataView(array.buffer.slice(0));\n}\nfunction deserializeImageData(dataview) {\n    if (dataview === null) {\n        return null;\n    }\n    return new Uint8ClampedArray(dataview.buffer);\n}\nclass ExampleModel extends base_1.DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: ExampleModel.model_name, _model_module: ExampleModel.model_module, _model_module_version: ExampleModel.model_module_version, _view_name: ExampleModel.view_name, _view_module: ExampleModel.view_module, _view_module_version: ExampleModel.view_module_version, value: 'Hello World', model_path: './model.onnx', initialized: false, image_data: null, array: ndarray([]), array_out: ndarray([]) });\n    }\n    initialize(attributes, options) {\n        super.initialize(attributes, options);\n        console.log(\"custom onnx model init\");\n        this.on('change:image_data', this.onImageData.bind(this));\n        this.on('change:array', this.onChangeArray.bind(this));\n        this.session = undefined;\n        const model_path = this.get(\"model_path\");\n        console.log(\"model_path\", model_path);\n        this.create(model_path);\n        console.log(\"session\", this.session);\n    }\n    //use an async context to call onnxruntime functions.\n    create(model_path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // create a new session and load the specific model.\n                //\n                // the model in this example contains a single MatMul node\n                // it has 2 inputs: 'a'(float32, 3x4) and 'b'(float32, 4x3)\n                // it has 1 output: 'c'(float32, 3x3)\n                onnxruntime_web_2.env.wasm.wasmPaths = './wasm/';\n                onnxruntime_web_2.env.wasm.numThreads = 2;\n                this.session = yield onnxruntime_web_1.InferenceSession.create(model_path, { executionProviders: ['wasm'] });\n                console.log(\"create session\", this.session);\n                this.set(\"initialized\", true);\n                this.save_changes();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        });\n    }\n    run_model(values, shape) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.set(\"done\", false);\n            console.log(\"run_model with\", this.session, shape);\n            var feeds = {};\n            // feed inputs and run\n            const input_tensor = new onnxruntime_web_1.Tensor('float32', values, shape);\n            feeds[this.session.inputNames[0]] = input_tensor;\n            const results = yield this.session.run(feeds);\n            const shape_out = results[this.session.outputNames[0]].dims;\n            const data_out = results[this.session.outputNames[0]].data;\n            // console.log(\"data_out\",data_out)\n            // console.log(\"shape_out\",shape_out)\n            const array_out = ndarray(data_out, shape_out);\n            console.log(\"ndarray out\", array_out);\n            this.set(\"array_out\", array_out);\n            this.save_changes(this.callbacks());\n        });\n    }\n    onChangeArray() {\n        console.log(\"onArray\");\n        const array = this.get(\"array\");\n        console.log(\"array_data\", array.data, array.shape); //,array_data.buffer.buffer)\n        this.run_model(array.data, array.shape);\n        console.log(\"fin\");\n    }\n    onImageData() {\n        console.log(\"onImageData\");\n        const data = this.get(\"image_data\");\n        const float_data = Float32Array.from(data);\n        console.log(\"data float\", float_data);\n        //const tensorA = new Tensor('float32', float_data, [3, 4]);\n    }\n}\nexports.ExampleModel = ExampleModel;\nExampleModel.serializers = Object.assign(Object.assign({}, base_1.DOMWidgetModel.serializers), { image_data: {\n        serialize: serializeImageData,\n        deserialize: deserializeImageData\n    }, array: jupyter_dataserializers_1.compressed_array_serialization, array_out: jupyter_dataserializers_1.compressed_array_serialization });\nExampleModel.model_name = 'ExampleModel';\nExampleModel.model_module = version_1.MODULE_NAME;\nExampleModel.model_module_version = version_1.MODULE_VERSION;\nExampleModel.view_name = 'ExampleView'; // Set to null if no view\nExampleModel.view_module = version_1.MODULE_NAME; // Set to null if no view\nExampleModel.view_module_version = version_1.MODULE_VERSION;\nclass ExampleView extends base_1.DOMWidgetView {\n    render() {\n        this.el.classList.add('custom-widget');\n        this.value_changed();\n        this.model.on('change:value', this.value_changed, this);\n        //\n    }\n    value_changed() {\n        this.el.textContent = this.model.get('value');\n        console.log(\"on value changed\", this.model.get(\"array_out\"));\n        //let arr= ndarray(new Float64Array([1, 0, 0, 1]), [2,2])\n        // console.log(\"arr ndarray\",arr)\n        // //const a={ shape: [2,2], dtype:'float32', buffer: arr.data as ndarray.TypedArray }\n        // this.model.set(\"array_out\",arr)\n        // this.touch()\n    }\n}\nexports.ExampleView = ExampleView;\n//# sourceMappingURL=widget.js.map","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".custom-widget {\\n  background-color: lightseagreen;\\n  padding: 0px 2px;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./widget.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":[],"sourceRoot":""}