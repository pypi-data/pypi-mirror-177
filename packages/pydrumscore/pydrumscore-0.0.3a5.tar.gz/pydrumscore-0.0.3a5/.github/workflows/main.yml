name: main

on: [push]

jobs:

  build-documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-python@v3
    - uses: actions/checkout@main
      with:
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

    - name: Building documentation
      run: |
        pip install -r docs/requirements.txt
        sphinx-apidoc --module-first -o docs/source/ pydrumscore/ *test -e
        sphinx-build docs public -b dirhtml

    - name: Upload doc artifacts
      uses: actions/upload-artifact@v3
      with:
        name: doc-artifacts
        path: public


  publish-documentation:
    if: github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/')

    needs: build-documentation
    runs-on: ubuntu-latest
    steps:
    - name: Download doc artifacts
      uses: actions/download-artifact@v3
      with:
        name: doc-artifacts
        path: public

    - name: Publish to GitHub Pages
      uses: peaceiris/actions-gh-pages@v2.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: public


  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pydrumscore/requirements.txt  # Note: Needed for import error analysis
        pip install pylint flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Pylint
      run: |
        pylint $(git ls-files '*.py')


  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pydrumscore/requirements.txt
      - name: Test with unittest
        run: |
          python -m unittest -v


  build-package:
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist


  publish-package:
    if: startsWith(github.ref, 'refs/tags/')

    needs: build-package

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist

      - name: Publish Package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
