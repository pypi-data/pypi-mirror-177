# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from . import function
import webbrowser

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


class App(tk.Frame):

    # Variables
    fileName = None
    filePath = None

    senderEmail = None
    senderPassword = None
    receiverList = []
    validReceiverList = []
    invalidReceiverList = []

    subject = None
    message = None

    attachmentPath = []
    attachmentName = []

    selectedColumnIndex = None
    selectedColumn = None

    validSender = False
    validReceivers = False
    validFile = False
    validColumn = False
    validSubject = False
    validMessage = False

    def __init__(self, *args, **kwargs):
        window = tk.Frame.__init__(self, *args, **kwargs)

        canvas = Canvas(
            window,
            bg="#583931",
            height=600,
            width=900,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)

        # Image

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        self.image_1 = canvas.create_image(
            816.0,
            53.9999942779541,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        self.image_2 = canvas.create_image(
            100.0,
            541.0000305175781,
            image=self.image_image_2
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        self.image_3 = canvas.create_image(
            73.0,
            61.0,
            image=self.image_image_3
        )

        self.image_image_4 = PhotoImage(
            file=relative_to_assets("image_4.png"))
        self.image_4 = canvas.create_image(
            455.0,
            61.0,
            image=self.image_image_4
        )

        # Label

        self.lblSettings = canvas.create_text(
            104.0,
            49.0,
            anchor="nw",
            text="Settings",
            fill="#FFFFFF",
            font=("Arial Bold", 20 * -1)
        )

        self.lblSender = canvas.create_text(
            58.0,
            95.0,
            anchor="nw",
            text="Sender",
            fill="#FFFFFF",
            font=("Arial Bold", 16 * -1)
        )

        self.lblEmail = canvas.create_text(
            58.0,
            140.0,
            anchor="nw",
            text="Email:",
            fill="#FFFFFF",
            font=("Arial", 14 * -1)
        )

        self.lblPassword = canvas.create_text(
            58.0,
            186.0,
            anchor="nw",
            text="Password:",
            fill="#FFFFFF",
            font=("Arial", 14 * -1)
        )

        self.lblReceiver = canvas.create_text(
            58.0,
            322.0,
            anchor="nw",
            text="Receivers",
            fill="#FFFFFF",
            font=("Arial Bold", 16 * -1)
        )

        self.lblFileName = canvas.create_text(
            200.0,
            367.0,
            anchor="nw",
            text="-",
            fill="#FFFFFF",
            font=("DMSans Regular", 14 * -1)
        )

        self.lblColumn = canvas.create_text(
            58.0,
            415.0,
            anchor="nw",
            text="Select column:",
            fill="#FFFFFF",
            font=("Arial", 14 * -1)
        )

        self.lblBread = canvas.create_text(
            486.0,
            49.0,
            anchor="nw",
            text="Bread",
            fill="#FFFFFF",
            font=("Arial Bold", 20 * -1)
        )

        self.lblSubject = canvas.create_text(
            440.0,
            92.0,
            anchor="nw",
            text="Subject:",
            fill="#FFFFFF",
            font=("Arial Bold", 14 * -1)
        )

        self.lblMessage = canvas.create_text(
            440.0,
            164.0,
            anchor="nw",
            text="Message:",
            fill="#FFFFFF",
            font=("Arial Bold", 14 * -1)
        )

        self.lblAttachment = canvas.create_text(
            440.0,
            410.0,
            anchor="nw",
            text="Attachment:",
            fill="#FFFFFF",
            font=("Arial Bold", 14 * -1)
        )

        # Entry

        self.txtEmail_img = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.txtEmail_bg = canvas.create_image(
            240.0,
            150.0,
            image=self.txtEmail_img
        )
        self.txtEmail = Entry(
            bd=0,
            bg="#DAC4BB",
            highlightthickness=0
        )
        self.txtEmail.place(
            x=140.0,
            y=137.0,
            width=199.0,
            height=25.0
        )

        self.txtPassword_img = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        self.txtPassword_bg = canvas.create_image(
            240.0,
            194.0,
            image=self.txtPassword_img
        )
        self.txtPassword = Entry(
            bd=0,
            bg="#DAC4BB",
            highlightthickness=0,
            show='‚óè'
        )
        self.txtPassword.place(
            x=140.0,
            y=181.0,
            width=199.0,
            height=25.0
        )

        self.txtColumn_img = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        self.txtColumn_bg = canvas.create_image(
            255.0,
            437.0,
            image=self.txtColumn_img
        )
        self.txtColumn = Listbox(
            bd=0,
            bg="#DAC4BB",
            highlightthickness=0
        )
        self.txtColumn.place(
            x=170.0,
            y=412.0,
            width=170.0,
            height=45.0
        )
        self.txtColumn.bind('<<ListboxSelect>>', self.selectColumn)

        self.txtSubject_img = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        self.txtSubject_bg = canvas.create_image(
            593.0,
            131.0,
            image=self.txtSubject_img
        )
        self.txtSubject = Entry(
            bd=0,
            bg="#DAC4BB",
            highlightthickness=0
        )
        self.txtSubject.place(
            x=446.0,
            y=118.0,
            width=295.0,
            height=25.0
        )

        self.txtMessage_img = PhotoImage(
            file=relative_to_assets("entry_5.png"))
        self.txtMessage_bg = canvas.create_image(
            593.0,
            290.0,
            image=self.txtMessage_img
        )
        self.txtMessage = Text(
            bd=0,
            bg="#DAC4BB",
            highlightthickness=0,
            wrap=WORD
        )
        self.txtMessage.configure(font=('Arial', 10))
        self.txtMessage.place(
            x=446.0,
            y=193.0,
            width=293.0,
            height=197.0
        )

        self.txtAttachment_img = PhotoImage(
            file=relative_to_assets("entry_6.png"))
        self.txtAttachment_bg = canvas.create_image(
            643.0,
            437.0,
            image=self.txtAttachment_img
        )
        self.txtAttachment = Listbox(
            bd=0,
            bg="#DAC4BB",
            highlightthickness=0
        )
        self.txtAttachment.place(
            x=548.0,
            y=412.0,
            width=190.0,
            height=45.0
        )

        # Button

        self.btnSet_img = PhotoImage(
            file=relative_to_assets("button_5.png"))
        self.btnSet = Button(
            image=self.btnSet_img,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.setSender(),
            relief="flat"
        )
        self.btnSet.place(
            x=135.0,
            y=230.0,
            width=210.0,
            height=34.0
        )

        self.btnImport_img = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.btnImport = Button(
            image=self.btnImport_img,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.importFile(canvas),
            relief="flat"
        )
        self.btnImport.place(
            x=58.0,
            y=359.0,
            width=108.0,
            height=34.0
        )

        self.btnLoad_img = PhotoImage(
            file=relative_to_assets("button_7.png"))
        self.btnLoad = Button(
            image=self.btnLoad_img,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.loadReceivers(),
            relief="flat"
        )
        self.btnLoad.place(
            x=165.0,
            y=480.0,
            width=180.0,
            height=34.0
        )

        self.btnHTML_img = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.btnHTML = Button(
            image=self.btnHTML_img,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: webbrowser.open("https://wordtohtml.net/"),
            relief="flat"
        )
        self.btnHTML.place(
            x=758.0,
            y=188.0,
            width=83.0,
            height=26.0
        )

        self.btnAttach_img = PhotoImage(
            file=relative_to_assets("button_8.png"))
        self.btnAttach = Button(
            image=self.btnAttach_img,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.attachFile(),
            relief="flat"
        )
        self.btnAttach.place(
            x=758.0,
            y=409.0,
            width=83.0,
            height=26.0
        )

        self.btnClear_img = PhotoImage(
            file=relative_to_assets("button_4.png"))
        self.btnClear = Button(
            image=self.btnClear_img,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.clearAttachments(),
            relief="flat"
        )
        self.btnClear.place(
            x=758.0,
            y=443.0,
            width=83.0,
            height=26.0
        )

        self.btnSend_img = PhotoImage(
            file=relative_to_assets("button_6.png"))
        self.btnSend = Button(
            image=self.btnSend_img,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.send(),
            relief="flat"
        )
        self.btnSend.place(
            x=440.0,
            y=480.0,
            width=306.0,
            height=34.0
        )

    def importFile(self, canvas):
        global filePath, fileName
        filePath = function.getFilePath(True)
        fileName = function.getFileName(filePath)
        canvas.itemconfig(self.lblFileName, text=fileName)

        if filePath == '-':
            self.txtColumn.delete(0, END)
            self.validColumn = False
            self.validFile = False
        else:
            self.setColumn()
            self.validFile = True

    def attachFile(self):
        global attachmentPath, attachmentName

        attachPath = function.getFilePath(False)

        if not attachPath == '-':
            self.attachmentPath.append(attachPath)
            self.attachmentName.append(function.getFileName(attachPath))
            self.setAttachment()

    def setSender(self):

        email = self.txtEmail.get()
        password = self.txtPassword.get()

        # password validation
        if(len(self.txtEmail.get()) == 0 or len(self.txtPassword.get()) == 0):
            messagebox.showerror(title='Blank entry',
                                 message='Please fill in the blank.')
            return

        if(function.validEmail(email)):
            global senderEmail
            global senderPassword

            self.senderEmail = email
            self.senderPassword = password
            # encryptedPassword = '‚óè' * \
            #     (len(senderPassword) - 4)+senderPassword[-4:]

            messagebox.showinfo(title='Set Sender Successfully',
                                message=f'Email is set to {self.senderEmail} \nPassword is set to {self.senderPassword}')

            self.validSender = True

        else:
            messagebox.showerror(title='Invalid Email',
                                 message='This is not a valid email, please try again.')
            self.txtEmail.delete(0, END)
            self.txtEmail.focus()

            self.validSender = False

    def setColumn(self):
        self.txtColumn.delete(0, END)
        self.validColumn = False
        columnList = function.getColumn(filePath)

        for column in columnList:
            self.txtColumn.insert(END, column)

    def setAttachment(self):
        self.txtAttachment.delete(0, END)

        for column in self.attachmentName:
            self.txtAttachment.insert(END, column)

    def setReceivers(self):
        global receiverList, validReceiverList, invalidReceiverList
        self.receiverList = function.getReceivers(
            filePath, self.selectedColumn)
        self.validReceiverList, self.invalidReceiverList = function.validateReceiver(
            self.receiverList)

    def selectColumn(self, event):
        global selectedColumn
        try:
            index = int(self.txtColumn.curselection()[0])
            self.selectedColumn = self.txtColumn.get(index)
            messagebox.showinfo(title='Column is selected',
                                message=f'Selected column: {self.selectedColumn}')
            self.validColumn = True

        except IndexError:
            return

    def loadReceivers(self):
        if not self.validFile:
            messagebox.showerror(title='File Not Found',
                                 message='Please import a file.')

        elif not self.validColumn:
            messagebox.showerror(title='Column Not Selected',
                                 message='Please select email column.')

        else:
            global validReceivers
            self.setReceivers()
            if (not self.invalidReceiverList):
                messagebox.showinfo(title='Loaded Successfully',
                                    message='All email are valid')
                self.validReceivers = True
            else:
                self.receiverErrorWindow()
                self.validReceivers = False

    def receiverErrorWindow(self):

        window = Toplevel(self)
        window.grab_set()
        window.geometry("300x400")
        window.title("Invalid Email Detected")
        icon = Image.open(relative_to_assets('logo.png'))
        photo = ImageTk.PhotoImage(icon)
        window.wm_iconphoto(False, photo)
        window.resizable(False, False)

        lblError = Label(window,
                         text="There are some invalid email detected in the column")
        lbEmail = Listbox(window)
        for email in self.invalidReceiverList:
            lbEmail.insert(END, email)

        btnClose = Button(window, text='Close', command=window.destroy)

        lblError.pack()
        lbEmail.pack()
        btnClose.pack()

    def clearAttachments(self):
        self.attachmentPath.clear()
        self.attachmentName.clear()

        self.txtAttachment.delete(0, END)

    def validateSubject(self):

        global validSubject, subject
        self.subject = self.txtSubject.get()

        if (self.subject == ""):
            self.validSubject = False
        else:
            self.validSubject = True

    def validateMessage(self):

        global validMessage, message
        self.message = self.txtMessage.get("1.0", 'end-1c')

        if (self.message == ""):
            self.validMessage = False
        else:
            self.validMessage = True

    def send(self):

        self.validateSubject()
        self.validateMessage()

        if not self.validSender:
            messagebox.showerror(title='Invalid Sender',
                                 message='Please insert valid sender email and password.')
        elif not self.validReceivers:
            messagebox.showerror(title='Invalid Receivers',
                                 message="Please ensure every receiver's email is correct.")
        elif not self.validFile:
            messagebox.showerror(title='Invalid File',
                                 message='Please import the valid file.')
        elif not self.validColumn:
            messagebox.showerror(title='Invalid Column',
                                 message='Please import the valid file.')
        elif not self.validSubject:
            messagebox.showerror(title='Invalid Subject',
                                 message='Please enter a valid subject.')
        elif not self.validMessage:
            messagebox.showerror(title='Invalid Message',
                                 message='Please enter valid message.')
        else:
            function.sendEmail(self.senderEmail, self.senderPassword,
                               self.validReceiverList, self.subject, self.message, self.attachmentPath)


def launch():
    window = tk.Tk()
    window.geometry("900x600")
    window.configure(bg="#583931")
    window.title('Bread')
    icon = Image.open(relative_to_assets('logo.png'))
    photo = ImageTk.PhotoImage(icon)
    window.wm_iconphoto(False, photo)
    window.resizable(False, False)
    App(window)
    window.mainloop()
