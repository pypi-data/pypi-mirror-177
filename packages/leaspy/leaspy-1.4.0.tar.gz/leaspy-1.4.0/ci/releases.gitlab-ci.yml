# Child pipeline only containing publication/release jobs
default:
  retry: 0  # job is not retried if failed
  interruptible: true  # by default jobs should be canceled when a newer pipeline starts before jobs complete
  tags:
    - conda
    - linux  # arbitrary choice (needs `leaspy_deploy` conda env)
  before_script:
    # <!> do not delete the corresponding env in linux CI machine
    - conda activate leaspy_deploy

stages:
  - check           # sanity checks before any release even for dev
  - release-dev     # automatic job when relevant (dev / pre public release or check before public release)
  - release-public  # manual job when relevant
  - release-gitlab  # automatic upon completion of previous manual step

workflow:
  rules:
    - if: $CI_COMMIT_TAG

variables:
  PYPI_REPOSITORIES_DEV: $PYPI_REPOSITORIES_DEV
  PYPI_REPOSITORIES_PUBLIC: $PYPI_REPOSITORIES_PUBLIC
  CHANGELOG_VERSION_HEADER: '## '
  CHANGELOG_SECTION_REGEX: '${CHANGELOG_VERSION_HEADER}[^\n]+\n([^#\n]+\n)+'
  CHANGELOG_SECTION_SNIPPET: 'with open("CHANGELOG.md", "r") as f: import re; r = re.compile(r"^(${CHANGELOG_SECTION_REGEX})(?:\n|$)", flags=re.M); print(r.search(f.read()).group(1), end="")'
  CHANGELOG_SUB_FILE: CHANGELOG_sub.md
  # TODO? check date instead of regex? (load in `prepare_metadata` job?)
  PKG_DATE_REGEX: '20[2-9][0-9]-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])'

# Create at least one job that is sure to be executed
check_env:
  # important to have at least one job in this child pipeline otherwise it will be considered as failed
  stage: check
  script:
    # dynamically obtained from code (following rules could not be dynamically applied in main pipeline)
    - '[[ "$CI_DEBUG" == "1" ]] && env || true'
    - echo $CI_COMMIT_TAG
    - echo $TAG_WITHOUT_PREFIX
    - echo $PKG_VERSION
    - echo $PKG_VERSION_WITHOUT_DEV_SUFFIX
    # update all packages in conda deploy env for later steps
    - conda upgrade --all --yes
    - '[[ "$CI_DEBUG" == "1" ]] && conda info || true'

.dev_release_condition:
  rules:
    # we check consistency between version registered in code & in tag
    - if: $TAG_WITHOUT_PREFIX == $PKG_VERSION

.public_release_condition_manual:
  rules:
    # previous condition AND version is not targeted for dev only
    - if: $TAG_WITHOUT_PREFIX == $PKG_VERSION && $PKG_VERSION == $PKG_VERSION_WITHOUT_DEV_SUFFIX
      when: manual  # the launch of job will be manual (e.g. to let the user inspect testpypi result for instance)
      allow_failure: false  # to wait for this manual job before gitlab_release job

# for now we are forced to copy this condition because `when` and `rules:if` can not be mixed together, and so there is
# no other (elegant) way for `gitlab_release` to be automatically launched after manual launch and completion of `pypi_release``
.public_release_condition_auto:
  rules:
    - if: $TAG_WITHOUT_PREFIX == $PKG_VERSION && $PKG_VERSION == $PKG_VERSION_WITHOUT_DEV_SUFFIX

# Try to spot new version in CHANGELOG.md and extract the relevant part
prepare_changelog:
  stage: check
  extends: .dev_release_condition
  script:
    # output first (= latest) section from changelog in a changelog dedicated to release
    - python -c "$CHANGELOG_SECTION_SNIPPET" > $CHANGELOG_SUB_FILE
    - cat $CHANGELOG_SUB_FILE
    # check version of header correspond to $PKG_VERSION (without dev suffix if any)
    - PKG_VERSION_WITHOUT_DEV_SUFFIX_ESCAPED=$(echo ${PKG_VERSION_WITHOUT_DEV_SUFFIX} | sed -E 's/\./\\./g')
    - CHANGELOG_SECTION_EXPECTED_REGEX="^${CHANGELOG_VERSION_HEADER}\[${PKG_VERSION_WITHOUT_DEV_SUFFIX_ESCAPED}\] - ${PKG_DATE_REGEX}$"
    - echo "$CHANGELOG_SECTION_EXPECTED_REGEX"
    - '[[ "$(head -n 1 $CHANGELOG_SUB_FILE)" =~ $CHANGELOG_SECTION_EXPECTED_REGEX ]]'  # <!> no quote around regex pattern in bash
  artifacts:
    paths:
      - $CHANGELOG_SUB_FILE

# Publish package in PyPI index(es) (base script)
.pypi_publish:
  script:
    # substitute environment variables in template .pypirc (only do it now since Gitlab token is attached to the job)
    - envsubst < ci/.pypirc.in > .pypirc
    # generate packages files (source and wheel)
    - python setup.py sdist bdist_wheel
    # push on registries thanks to `twine` (installed in `leaspy_deploy` environment)
    - for pypi_repo in $PYPI_REPOSITORIES; do python -m twine upload --verbose --config-file .pypirc --repository $pypi_repo dist/*; done

# When tagged: automatically publish package in Gitlab Package Registry & TestPyPI (for dev pkg & test before official)
pypi_dev:
  stage: release-dev
  extends:
    - .pypi_publish
    - .dev_release_condition
  variables:
    PYPI_REPOSITORIES: $PYPI_REPOSITORIES_DEV

# Manually publish on official PyPI index
pypi_public:
  stage: release-public
  extends:
    - .pypi_publish
    - .public_release_condition_manual
  variables:
    PYPI_REPOSITORIES: $PYPI_REPOSITORIES_PUBLIC

# Automatically add a release in Gitlab repo upon completion of previous manually launched job
gitlab_release:
  stage: release-gitlab
  ## this does not work: it starts even if `pypi_release` does not exist, so use the `extends` trick
  #needs:
  #  - job: pypi_release
  #    optional: true  # needed because sometimes the `pypi_release`` won't be part of the pipeline due to its rules!
  extends: .public_release_condition_auto
  dependencies:
    - prepare_changelog
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - docker
  before_script: []
  script:
    - echo "Releasing $CI_COMMIT_TAG on Gitlab..."
  release:
    #name: $CI_COMMIT_TAG
    tag_name: $CI_COMMIT_TAG
    description: $CHANGELOG_SUB_FILE  # only extract the subset of changelog concerning current version
    assets:
      links:
        # TODO: doc page for precise version?
        - name: 'PyPI package'
          url: 'https://pypi.org/project/leaspy/${PKG_VERSION}/'
          link_type: 'package'
